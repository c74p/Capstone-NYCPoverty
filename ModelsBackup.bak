{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Models\n",
    "\n",
    "### The Dataset\n",
    "\n",
    "As a refresher:\n",
    "* Data from https://data.cityofnewyork.us/browse?q=poverty\n",
    "* 12 annual data files, from 2005 to 2016 inclusive (e.g. NYCgov_Poverty_MeasureData__2016.csv)\n",
    "* CSV files with ~80 columns and ~60,000 rows each\n",
    "* Each file had essentially the same format and contained (mostly) the same information\n",
    "* Data types included:\n",
    "    * Classification types encoded as integers (e.g. 1 if in poverty, 2 if not in poverty)\n",
    "    * Floats for financial data (e.g. wages for the calendar year)\n",
    "\n",
    "I'll import a cleaned version of the files (see https://github.com/c74p/Springboard/blob/master/Capstone%20Project%201%20-%20Poverty/DataWranglingSummary.ipynb) for details.\n",
    "\n",
    "### Modeling approach\n",
    "\n",
    "The poverty rate overall in New York City is roughly 20%, and there are lots of imbalanced groups (education, income, \n",
    "disability status, etc.).  I'll use imbalanced test-train splits to improve my model.\n",
    "\n",
    "Overview of modeling approach:\n",
    "1. Use all years, households only, classify yes/no for poverty. Test and compare Logistic Regression, Support Vector \n",
    "Machines (SVM), and Random Forest algorithms.\n",
    "2. Run classifiers for individual years (the thresholds differ from year to year, so a predictor for a specific year would presumably be better for a specific year).\n",
    "3. Test running regressors on houshold income and poverty threshold, in order to predict poverty classification. Test and\n",
    "compare Linear Regression (Ordinary Least Squares), Stochastic Gradient Descent, and ElasticNet.\n",
    "    a. This is not likely to be useful, but I'm doing it as a learning exercise.\n",
    "4. Test steps 2 and 3 above at the person level, rather than at the household level.\n",
    "    a. This is not likely to be useful, but I'm doing it as a learning exercise.\n",
    "\n",
    "### Housekeeping part 1: imports and file prep\n",
    "\n",
    "After importing we'll make some quick modifications to the data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Basic imports and setup\n",
    "# See below for model-specific imports\n",
    "from __future__ import print_function\n",
    "from joblib import dump, load\n",
    "import matplotlib.pyplot as plt\n",
    "from multiprocessing import Pool\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "from pandas.api.types import CategoricalDtype\n",
    "import seaborn as sns\n",
    "import tempfile\n",
    "import time\n",
    "\n",
    "# Model-specific imports\n",
    "from dask_ml.preprocessing import Categorizer, DummyEncoder\n",
    "\n",
    "from imblearn.combine import SMOTETomek, SMOTEENN\n",
    "from imblearn.ensemble import BalancedBaggingClassifier, BalancedRandomForestClassifier, RUSBoostClassifier\n",
    "from imblearn.metrics import classification_report_imbalanced, geometric_mean_score\n",
    "from imblearn.over_sampling import SMOTE\n",
    "from imblearn.pipeline import Pipeline as imbPipeline\n",
    "from imblearn.under_sampling import TomekLinks\n",
    "\n",
    "import lime\n",
    "import lime.lime_tabular\n",
    "\n",
    "from sklearn.ensemble import AdaBoostClassifier, BaggingClassifier, GradientBoostingClassifier, RandomForestClassifier, \\\n",
    "    RandomForestRegressor\n",
    "from sklearn.feature_selection import RFECV\n",
    "from sklearn.linear_model import LogisticRegression, SGDClassifier\n",
    "from sklearn.metrics import balanced_accuracy_score, confusion_matrix\n",
    "from sklearn.model_selection import GridSearchCV, KFold, train_test_split\n",
    "from sklearn.pipeline import Pipeline\n",
    "from sklearn.preprocessing import StandardScaler, PowerTransformer, QuantileTransformer, Normalizer\n",
    "from sklearn.svm import SVC\n",
    "\n",
    "from statsmodels.discrete.discrete_model import Logit, LogitResults\n",
    "\n",
    "%matplotlib inline\n",
    "\n",
    "# Temporarily turn off warnings if they get to be too much\n",
    "#import warnings\n",
    "#warnings.simplefilter(action='ignore', category=FutureWarning)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.read_csv('data/all_years.csv', index_col=0)\n",
    "\n",
    "# Group the columns into 1) raw input variables, 2) id variables of various things, 3) American Community Survey (census)\n",
    "# variables, 4) NYC government-calculated variables, and 5) output variables.\n",
    "#\n",
    "# The ACS and NYC variables are generally calculated from the raw input variables - my initial expectation is that\n",
    "# the raw input variables can be thought of as independent variables, and that the ACS and NYC variables are not\n",
    "# independent even though they are not output variables.\n",
    "\n",
    "raw_inp_vars = ['AGEP', 'Boro', 'CIT', 'DIS', 'ENG', 'ESR', 'Ethnicity', 'HHT', 'HIUnit_Head', 'HousingStatus', 'JWTR', 'LANX', 'MAR', 'MSP','NP', 'Off_Threshold', 'PreTaxIncome_PU', 'REL', 'SCH', 'SCHG', 'SCHL', 'SEX', 'TEN', 'WKHP', 'WKW', 'Year']\n",
    "id_vars = ['HIUnit_ID', 'Povunit_ID', 'PWGTP', 'SERIALNO', 'SNAPUnit_ID', 'SPORDER', 'TaxUnit_ID', 'WGTP']\n",
    "acs_vars = ['AgeCateg', 'INTP_adj', 'OI_adj', 'MRGP_adj', 'PA_adj', 'RETP_adj', 'RNTP_adj', 'SEMP_adj', 'SSIP_adj', 'SSP_adj',  'WAGP_adj']\n",
    "nyc_vars = ['CitizenStatus',  'EducAttain', 'FTPTWork', 'FamType_PU', 'NYCgov_Childcare', 'NYCgov_Commuting', 'NYCgov_EITC', 'NYCgov_FICAtax', 'NYCgov_HEAP', 'NYCgov_Housing', 'NYCgov_Income', 'NYCgov_IncomeTax', 'NYCgov_MOOP', 'NYCgov_MedPremiums', 'NYCgov_MedSpending', 'NYCgov_Nutrition', 'NYCgov_REL', 'NYCgov_SFN', 'NYCgov_SFR', 'NYCgov_SNAP', 'NYCgov_SchoolBreakfast', 'NYCgov_SchoolLunch', 'NYCgov_Threshold', 'NYCgov_WIC', 'Povunit_Rel', 'SNAPUnit_Rel',  'TaxUnit_FILER', 'TaxUnit_FILESTAT', 'TaxUnit_FILETYPE', 'TaxUnit_Rel', 'TotalWorkHrs_PU']\n",
    "output_vars = ['NYCgov_PovGap', 'NYCgov_Pov_Stat', 'NYCgov_PovGapIndex', 'Off_Pov_Stat']\n",
    "all_columns = raw_inp_vars + id_vars + acs_vars + nyc_vars + output_vars"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create codes for the raw input variables that are number-coded, so we can create charts that make sense\n",
    "raw_codes = {'Boro': {1: 'Bronx', 2: 'Brooklyn', 3: 'Manhattan', 4: 'Queens', 5: 'Staten Island'},\n",
    "         'CIT': {1: 'Birth', 2: 'Territories', 3: 'US Parents', 4: 'Naturalized', 5: 'No'},\n",
    "         'DIS': {0: 'NA', 1: 'Yes', 2: 'No'},\n",
    "         'ENG': {0: '<5', 1: 'Very Well', 2: 'Well', 3: 'Not well', 4: 'Not at all', 5: 'Only Eng'},\n",
    "         'ESR': {0: '<16', 1: 'EMP', 2:'EMP/NAW', 3: 'UNEMP', 4: 'AF', 5: 'AF/NAW', 6:'NILF'},\n",
    "         'Ethnicity': {1: 'White', 2: 'Black', 3: 'Asian', 4: 'Hispanic', 5: 'Other'},\n",
    "         'HHT': {0: 'NA', 1: 'MAR', 2: 'MNW', 3: 'WNM', 4: 'Malone', 5: 'MNAlone', 6: 'Walone', 7: 'WNalone'},\n",
    "         'HIUnit_Head': {0: 'Not Head', 1: 'Head', 2: 'Not Head'},\n",
    "         'HousingStatus': {0: 'NA', 1: 'Public', 2: 'Mitchell', 3: 'Subsidy', 4: 'Regulated', 5: 'OtherReg', 6: 'MarketRate', 7: 'NoCash', 8: 'OwnF&C', 9: 'Own-Mortgage'},\n",
    "         'JWTR': {0: 'NA', 1: 'Car', 2: 'Bus', 3:'Streetcar', 4:'Subway', 5:'RR', 6:'Ferry', 7:'Taxi', 8:'Motorcycle', 9:'Bike', 10:'Walk', 11:'Home', 12: 'Other'},\n",
    "         'LANX': {0: 'NA', 1: 'Yes', 2: 'Only Eng'},\n",
    "         'MAR': {1: 'Married', 2:'Widowed', 3:'Divorced', 4:'Separated', 5:'Never Married'},\n",
    "         'MSP': {0: 'NA', 1: 'Yes', 2:'Spouse absent', 3:'Widowed', 4:'Divorced', 5:'Separated', 6:'Never Married'},\n",
    "         'REL': {0: 'Self', 1:'Spouse', 2:'Child', 3:'Adopted', 4:'Stepchild', 5:'Sibling', 6:'Parent', 7:'Grandchild', 8:'Parent-in-law', 9:'Child-in-law', 10:'Other', 11:'Boarder', 12:'Roommate', 13:'Partner', 14:'Foster', 15:'OtherNR', 16:'Inst', 17:'NonInst'},\n",
    "         'SCH': {0: 'NA', 1: 'NoPast3Mos', 2:'Public', 3:'Private/Home'},\n",
    "         'SCHG': {0: 'NA', 1:'Preschool', 2:'Kindergarten', 3:'1', 4:'2', 5:'3', 6:'4', 7:'5', 8:'6', 9:'7', 10:'8', 11:'9', 12:'10', 13:'11', 14:'12', 15:'College', 16:'Grad school'},\n",
    "         'SCHL': {0: 'NA', 1:'None', 2:'Preschool', 3:'Kindergarten', 4:'1', 5:'2', 6:'3', 7:'4', 8:'5', 9:'6', 10:'7', 11:'8', 12:'9', 13:'10', 14:'11', 15:'12-NoDip', 16:'Diploma', 17:'GED', 18:'<1yrCollege', 19:'CollNoDegree', 20:'Associates', 21:'Bachelors', 22:'Masters', 23:'Professional', 24:'Doctorate'},\n",
    "         'SEX': {1:'Male', 2:'Female'},\n",
    "         'TEN': {0: 'NA', 1:'Mortage', 2:'Free&Clear', 3:'Rent', 4:'OccButNoRent'},\n",
    "         'WKW': {0:'NA', 1:'50-52', 2:'48-49', 3:'40-47', 4:'27-39', 5:'14-26', 6:'<13'},\n",
    "        }\n",
    "\n",
    "# Create codes for the nyc variables that are number-coded, so we can create charts that make sense\n",
    "nyc_codes = {\n",
    "    'CitizenStatus': {1: 'Birth', 2: 'Naturalized', 3: 'No'},\n",
    "    'EducAttain': {0: 'NA', 1:'<HS', 2:'HS', 3:'SomeCollege', 4:'Bachelors+'},\n",
    "    'FTPTWork': {1:'FTYR', 2:'<FTYR', 3:'None'},\n",
    "    'FamType_PU': {1:'Family', 2:'Couple', 3:'M+kid', 4:'W+kid', 5:'Mnokid', 6:'Wnokid', 7:'Unrelated', 8:'UnrelAlone'},\n",
    "    'NYCgov_REL': {0:'Self', 1:'Spouse', 2:'Child', 3:'Sibling', 4:'Parent', 5:'Grandkid', 6:'Inlaw', 7:'OtherRel', 8:'Boarder', 9:'Roommate', 10:'Partner', 11:'FosterKid', 12:'OtherNonRel'},\n",
    "    'NYCgov_SFR': {0: 'NA', 1:'NoKids', 2:'Kids', 3:'OneParent', 4:'Kid', 5:'Kid-Monly', 6:'Kid-Wonly'},\n",
    "    'Povunit_Rel': {1:'Head', 2:'Spouse/Ptnr', 3:'Child', 4:'Other'},\n",
    "    'SNAPUnit_Rel': {1:'Head', 2:'Spouse/Ptnr', 3:'Child', 4:'Other'},\n",
    "    'TaxUnit_FILER': {1:'Filer', 0:'Non-Filer'},\n",
    "    'TaxUnit_FILESTAT': {0: 'NA', 1:'Joint', 2:'HH', 3:'MFS', 4:'Single'},\n",
    "    'TaxUnit_FILETYPE': {0: 'NA', 1: 'Normal', 2:'Dependent', 3:'BelowThresh'},\n",
    "    'TaxUnit_Rel': {1:'Head', 2:'Spouse/Ptnr', 3:'Child', 4:'Other', 5:'EIC', 6:'Relative'},\n",
    "    'TotalWorkHrs_PU': {1:'3500+', 2:'2340-3500', 3:'1750-2340', 4:'<1750', 5:'None'}\n",
    "    }"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Key dataframes of interest\n",
    "# All 2016 data\n",
    "all_2016 = df[df.Year == 2016]\n",
    "\n",
    "# Our data set contains two sets of weights: household weights and person weights.  \n",
    "# We need to separate out each column by whether it should be weighted as a household variable or a person variable.\n",
    "# Lists to create weighted columns, separated based on whether they are personal or household statistics.\n",
    "personal_vars = ['AGEP', 'Boro', 'CIT', 'SCH', 'SCHG', 'SCHL', 'SEX', 'ESR', 'ENG', 'LANX', 'MSP', 'MAR', 'NYCgov_EITC', 'WKW', 'WKHP', 'DIS', 'JWTR', 'WAGP_adj', 'INTP_adj', 'SEMP_adj', 'SSP_adj', 'SSIP_adj', 'PA_adj', 'RETP_adj', 'OI_adj', 'TaxUnit_Rel', 'NYCgov_REL', 'NYCgov_SFR', 'SNAPUnit_Rel', 'TaxUnit_FILER', 'TaxUnit_FILESTAT', 'TaxUnit_FILETYPE', 'Ethnicity', 'EducAttain', 'CitizenStatus', 'AgeCateg', 'FTPTWork', 'PWGTP'] \n",
    "pu_vars = ['MRGP_adj', 'RNTP_adj', 'NP', 'TEN', 'HHT', 'FamType_PU', 'HousingStatus', 'TotalWorkHrs_PU', 'PreTaxIncome_PU', 'NYCgov_Income', 'NYCgov_Threshold', 'NYCgov_Pov_Stat',  'NYCgov_Housing', 'NYCgov_Childcare', 'NYCgov_Commuting', 'NYCgov_MOOP', 'NYCgov_MedSpending', 'NYCgov_MedPremiums', 'NYCgov_HEAP', 'NYCgov_WIC', 'NYCgov_SNAP', 'NYCgov_SchoolLunch', 'NYCgov_SchoolBreakfast', 'NYCgov_Nutrition', 'NYCgov_FICAtax', 'NYCgov_IncomeTax', 'Off_Threshold', 'Off_Pov_Stat', 'NYCgov_PovGap', 'NYCgov_PovGapIndex', 'WGTP']\n",
    "other_vars = ['HIUnit_Head', 'HIUnit_ID', 'NYCgov_SFN', 'Povunit_ID', 'Povunit_Rel', 'REL', 'SERIALNO', 'SNAPUnit_ID', 'SPORDER', 'TaxUnit_ID', 'Year']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Feature Engineering - Adding New Poverty-Unit Variables Based on Personal Variables\n",
    "Here's where we're actually adding new variables based on old variables.\n",
    "\n",
    "From the personal-level features, we'll create new household-level features (e.g. number of kids, mean salary among \n",
    "adults, count of people making more than $30k, count of adults working between 14-26 hours/week, minimum salary among\n",
    "adults working more than 26 hours/week, etc.)\n",
    "\n",
    "This is a wall of text, not much exciting narrative here.\n",
    "\n",
    "(Note on programming style/choices: the first function 'add_pu_columns' below is a real function, although it has a\n",
    "kludge in case one of the summary calculations fails. (That happens rarely, but it's still a code smell.)\n",
    "\n",
    "The second function, however, is not really a 'real' function; it's heavily hand-coded and relies on custom choices of\n",
    "various groupings.  It was put into a function solely to comply with the DRY principle - in particular, this function\n",
    "will typically be run twice (once for the whole grouping, and possibly once for a model run without the 'financial' \n",
    "features).  By putting it into a function for DRY purposes, we at least avoid accidentally running different code when we \n",
    "mean to run the same code)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "done with CIT\n",
      "took 64.48582053184509 s so far\n",
      "done with SCHL\n",
      "took 134.63068413734436 s so far\n",
      "done with SEX\n",
      "took 178.26997876167297 s so far\n",
      "done with ENG\n",
      "took 270.48538613319397 s so far\n",
      "done with MSP\n",
      "took 351.7556619644165 s so far\n",
      "done with WKW\n",
      "took 527.8056879043579 s so far\n",
      "done with WKHP\n",
      "took 721.531191110611 s so far\n",
      "done with DIS\n",
      "took 781.8973388671875 s so far\n",
      "done with NP\n",
      "took 1017.774843454361 s so far\n",
      "done with JWTR\n",
      "took 1037.0357296466827 s so far\n",
      "done with WAGP\n",
      "took 1372.6890752315521 s so far\n",
      "done with INTP\n",
      "took 1524.2630858421326 s so far\n",
      "done with SEMP\n",
      "took 1681.711932182312 s so far\n",
      "done with SSP\n",
      "took 1845.299048423767 s so far\n",
      "done with SSIP\n",
      "took 1985.9200677871704 s so far\n",
      "done with PA\n",
      "took 2101.1818034648895 s so far\n",
      "done with RETP\n",
      "took 2227.952205657959 s so far\n",
      "done with OI\n",
      "took 2348.0948402881622 s so far\n",
      "done with Ethnicity\n",
      "took 2535.209809064865 s so far\n",
      "took 2999.9464485645294 s\n"
     ]
    }
   ],
   "source": [
    "def add_pu_columns(df, groups, group_names, categories, category_names, column):\n",
    "    \"\"\"\n",
    "    Adds columns to dataframe 'df' containing calculations by poverty-unit, restricted by categories, considering groups.\n",
    "    Calculations include any(), all(), min(), max(), count(), sum(), mean(), and % in given category.\n",
    "    Input: a dataframe with multi-index consisting of 'SERIALNO', 'Povunit_ID', and 'SPORDER'; a set of masks and list of\n",
    "    names for the groups; a set of masks and a list of names for the categories; and the column of interest.\n",
    "    Output: no return value.  Inserts a series of columns into the dataframe including min, max, count, sum, any, all,\n",
    "    % of total, and mean - within households, focusing on the groups and categories of interest. \n",
    "    \"\"\"\n",
    "    \n",
    "    for group, group_name in zip(groups, group_names):\n",
    "        for category, category_name in zip(categories, category_names):\n",
    "            stacked = df[column][group & category].stack().groupby(['SERIALNO', 'Povunit_ID'])\n",
    "            anys = stacked.any()\n",
    "            # would love to use .all() here, but it would always be True because we filtered out everyone else\n",
    "            mins = stacked.min()\n",
    "            maxes = stacked.max()\n",
    "            counts = stacked.count()\n",
    "            sums = stacked.sum()\n",
    "            means = sums/counts\n",
    "            # The divisor below only restricts by 'groups' - so the final calculation is within a household, within\n",
    "            # the group of interest (e.g. adults), what % is in the category of interest (e.g. works 40 hrs/week)\n",
    "            divisor_for_percents = df[column][group].stack().groupby(['SERIALNO', 'Povunit_ID']).count()\n",
    "            try:\n",
    "                percents = counts.div(divisor_for_percents, axis=0)\n",
    "                alls = percents == 1\n",
    "            except: # if the calculation failed, leave percents and alls as a column of zeros\n",
    "                df_len = len(df.groupby(['SERIALNO', 'Povunit_ID']).sum())\n",
    "                percents = np.zeros(df_len)\n",
    "                alls = np.zeros(df_len)\n",
    "            \n",
    "            # loop through, put in the dataframe, and fill in NAs of appropriate type\n",
    "            series_and_names = zip([anys, alls, mins, maxes, counts, sums, means, percents], \n",
    "                                  ['any', 'all', 'min', 'max', 'count', 'sum', 'mean', '%'])\n",
    "            for series, series_name in series_and_names:\n",
    "                column_title = series_name + '_' + group_name + '_' + category_name\n",
    "                df[column_title] = series\n",
    "                if series_name in ['any', 'all']:\n",
    "                    df[column_title] = df[column_title].fillna(False)\n",
    "                else:\n",
    "                    df[column_title] = df[column_title].fillna(0)\n",
    "                    \n",
    "def engineer_features(df, include_financials=True):\n",
    "    \"\"\"Create features for the dataframe. This function is heavily custom and was solely created for DRY-ness.\n",
    "    Input: a poverty dataframe and whether or not to include financial features.\n",
    "    Output: returns a copy of the dataframe summarized by poverty-unit, with *only* the new features included. \n",
    "    Prints progess updates to the screen as it goes.\n",
    "    \"\"\"\n",
    "\n",
    "    time_0 = time.time()\n",
    "\n",
    "    # Create dataframe to house new features \n",
    "    dfc = df.copy() # read as 'X new features'\n",
    "\n",
    "    # Count the original # of features - later we'll just slice out the new features\n",
    "    # Keep in mind that 'SERIALNO' and 'Povunit_ID' will go into the index, so we need to subtract 2 columns\n",
    "    features_to_mask = len(dfc.columns) - 2\n",
    "    \n",
    "    # This is the largest # of people in a household; when we group the columns below, for each existing feature we'll\n",
    "    # create one column for each person in a household - so we'll need to know this number at the end when we want to \n",
    "    # mask our existing features\n",
    "    max_ppl = dfc.SPORDER.max()\n",
    "\n",
    "    # First, some categoricals have odd ordering; remap them\n",
    "    fix_orders = {'ENG': {0:0, 4:1, 3:2, 2:3, 1:4, 5:5}, 'WKW': {0:0, 6:1, 5:2, 4:3, 3:4, 2:5, 1:6}, \n",
    "                  'TotalWorkHrs_PU': {5:0, 4:1, 3:2, 2:3, 1:4}}\n",
    "    dfc['ENG'] = dfc['ENG'].map(fix_orders['ENG'])\n",
    "    dfc['WKW'] = dfc['WKW'].map(fix_orders['WKW'])\n",
    "    dfc['TotalWorkHrs_PU'] = dfc['TotalWorkHrs_PU'].map(fix_orders['TotalWorkHrs_PU'])\n",
    "\n",
    "    # Add column for total personal income\n",
    "    if include_financials:\n",
    "        dfc['TINP'] = dfc.WAGP_adj + dfc.INTP_adj + dfc.SEMP_adj + dfc.SSP_adj + dfc.SSIP_adj + \\\n",
    "                        dfc.PA_adj + dfc.RETP_adj + dfc.OI_adj\n",
    "\n",
    "    # Grouping by SERIALNO and Povunit_ID, put SPORDER (person # in household) at the top as multi-index columns\n",
    "    dfc = dfc.set_index(['SERIALNO', 'Povunit_ID', 'SPORDER']).unstack('SPORDER').fillna(0)\n",
    "\n",
    "    # Create masks for age groups to use in creating new features\n",
    "    mask_adult = (dfc.AgeCateg == 2) | (dfc.AgeCateg == 3)\n",
    "    mask_65_plus = dfc.AgeCateg == 3\n",
    "    mask_18_64 = dfc.AgeCateg == 2\n",
    "    mask_kid = dfc.AgeCateg == 1\n",
    "    mask_any_age = dfc.AgeCateg != 0\n",
    "    mask_any = mask_any_age\n",
    "\n",
    "    # add columns with age only, no categories\n",
    "    groups = [mask_adult, mask_65_plus, mask_18_64, mask_kid, mask_any_age]\n",
    "    group_names = ['adult', '65+', '18-64', 'kid', 'anyage']\n",
    "    add_pu_columns(dfc, groups, group_names, [mask_any_age], ['age'], 'AGEP')\n",
    "\n",
    "    # add columns for CIT\n",
    "    groups = [mask_adult, mask_65_plus, mask_18_64, mask_kid, mask_any_age]\n",
    "    group_names = ['adult', '65+', '18-64', 'kid', 'anyage']\n",
    "\n",
    "    mask_non_cit = dfc.CIT == 5\n",
    "    mask_cit = (dfc.CIT != 5) & (dfc.CIT != 0)\n",
    "    mask_naturalized = dfc.CIT == 4\n",
    "\n",
    "    categories = [mask_non_cit, mask_cit, mask_naturalized, mask_any]\n",
    "    category_names = ['non-cit', 'citizen', 'naturalized_cit', 'any_CIT']\n",
    "\n",
    "    add_pu_columns(dfc, groups, group_names, categories, category_names, 'CIT')\n",
    "    add_pu_columns(dfc, groups, group_names, categories, category_names, 'AGEP')\n",
    "    print('done with CIT')\n",
    "    time_took = time.time() - time_0\n",
    "    print('took ' + str(time_took) + ' s so far')\n",
    "\n",
    "    # add columns for SCHL\n",
    "    groups = [mask_adult, mask_65_plus, mask_18_64, mask_kid, mask_any_age]\n",
    "    group_names = ['adult', '65+', '18-64', 'kid', 'anyage']\n",
    "\n",
    "    mask_college_degree = (dfc.SCHL >= 21)\n",
    "    mask_HS_diploma = (dfc.SCHL >= 17)\n",
    "    mask_no_diploma = (dfc.SCHL <= 16)\n",
    "\n",
    "    categories = [mask_college_degree, mask_HS_diploma, mask_no_diploma, mask_HS_diploma & ~mask_college_degree, mask_any]\n",
    "    category_names = ['college', 'HS', 'no_diploma', 'diploma_no_bachelors', 'any_SCHL']\n",
    "\n",
    "    add_pu_columns(dfc, groups, group_names, categories, category_names, 'SCHL')\n",
    "    add_pu_columns(dfc, groups, group_names, categories, category_names, 'AGEP')\n",
    "    print('done with SCHL')\n",
    "    time_took = time.time() - time_0\n",
    "    print('took ' + str(time_took) + ' s so far')\n",
    "\n",
    "    # add columns for SEX\n",
    "    groups = [mask_adult, mask_65_plus, mask_18_64, mask_kid, mask_any_age]\n",
    "    group_names = ['adult', '65+', '18-64', 'kid', 'anyage']\n",
    "\n",
    "    mask_male = dfc.SEX == 1\n",
    "    mask_female = dfc.SEX == 2\n",
    "\n",
    "    categories = [mask_male, mask_female, mask_any]\n",
    "    category_names = ['male', 'female', 'any_SEX']\n",
    "\n",
    "    add_pu_columns(dfc, groups, group_names, categories, category_names, 'SEX')\n",
    "    add_pu_columns(dfc, groups, group_names, categories, category_names, 'AGEP')\n",
    "    print('done with SEX')\n",
    "    time_took = time.time() - time_0\n",
    "    print('took ' + str(time_took) + ' s so far')\n",
    "\n",
    "    # add columns for English ability (ENG)\n",
    "    groups = [mask_adult, mask_65_plus, mask_18_64, mask_kid, mask_any_age]\n",
    "    group_names = ['adult', '65+', '18-64', 'kid', 'anyage']\n",
    "\n",
    "    # Keep in mind we switched ENG above so that 0 is NA, 1 is not at all, 2 is not very well, ..., 5 is only English\n",
    "    mask_no_english = dfc.ENG == 1\n",
    "    mask_eng_nvw = dfc.ENG == 2\n",
    "    mask_sep_well = dfc.ENG == 3\n",
    "    mask_eng_vw = dfc.ENG == 4\n",
    "    mask_only_eng = dfc.ENG == 5\n",
    "\n",
    "    categories = [mask_no_english, mask_eng_nvw, mask_sep_well, mask_eng_vw, mask_only_eng, mask_any]\n",
    "    category_names = ['ENG_no', 'ENG_nvw', 'ENG_well', 'ENG_vw', 'ENG_only', 'ENG_any']\n",
    "\n",
    "    add_pu_columns(dfc, groups, group_names, categories, category_names, 'ENG')\n",
    "    add_pu_columns(dfc, groups, group_names, categories, category_names, 'AGEP')\n",
    "    print('done with ENG')\n",
    "    time_took = time.time() - time_0\n",
    "    print('took ' + str(time_took) + ' s so far')\n",
    "\n",
    "    # add columns for marital status (MSP)\n",
    "    groups = [mask_adult, mask_65_plus, mask_18_64, mask_kid, mask_any_age]\n",
    "    group_names = ['adult', '65+', '18-64', 'kid', 'anyage']\n",
    "\n",
    "    mask_married = (dfc.MSP == 1) | (dfc.MSP == 2)\n",
    "    mask_widowed = dfc.MSP == 3\n",
    "    mask_sep_div = (dfc.MSP == 4) | (dfc.MSP == 5)\n",
    "    mask_not_married = dfc.MSP == 6\n",
    "\n",
    "    categories = [mask_married, mask_widowed, mask_sep_div, mask_not_married, mask_any]\n",
    "    category_names = ['married', 'widowed', 'sep/divorced', 'not_married', 'any_MSP']\n",
    "\n",
    "    add_pu_columns(dfc, groups, group_names, categories, category_names, 'MSP')\n",
    "    add_pu_columns(dfc, groups, group_names, categories, category_names, 'AGEP')\n",
    "    print('done with MSP')\n",
    "    time_took = time.time() - time_0\n",
    "    print('took ' + str(time_took) + ' s so far')\n",
    "\n",
    "    # add columns for weeks worked (WKW) -- this is *weeks* worked last year, not *hours per week* (that's WKHP)\n",
    "    groups = [mask_adult, mask_65_plus, mask_18_64, mask_kid, mask_any_age]\n",
    "    group_names = ['adult', '65+', '18-64', 'kid', 'anyage']\n",
    "\n",
    "    # Keep in mind we switched WKW above so that 0 is none, 1 is <14 weeks, 2 is 14-26 weeks, etc.\n",
    "    mask_0_WKW = dfc.WKW == 0\n",
    "    mask_u14_WKW = dfc.WKW == 1\n",
    "    mask_14_26_WKW = dfc.WKW == 2\n",
    "    mask_27_39_WKW = dfc.WKW == 3\n",
    "    mask_40_47_WKW = dfc.WKW == 4\n",
    "    mask_48_49_WKW = dfc.WKW == 5\n",
    "    mask_50_52_WKW = dfc.WKW == 6\n",
    "\n",
    "    categories = [mask_0_WKW, mask_u14_WKW, mask_14_26_WKW, mask_27_39_WKW, mask_40_47_WKW, mask_48_49_WKW, mask_50_52_WKW, \n",
    "                 (mask_40_47_WKW | mask_48_49_WKW | mask_50_52_WKW), ~mask_0_WKW, mask_any]\n",
    "    category_names = ['no_work', '<14WKW', '14-26WKW', '27-39WKW', '40-47WKW', '48-49WKW', '50-52WKW', '>40WKW', 'nonzero_WKW',\n",
    "                     'any_WKW']\n",
    "\n",
    "    add_pu_columns(dfc, groups, group_names, categories, category_names, 'WKW')\n",
    "    add_pu_columns(dfc, groups, group_names, categories, category_names, 'AGEP')\n",
    "    print('done with WKW')\n",
    "    time_took = time.time() - time_0\n",
    "    print('took ' + str(time_took) + ' s so far')\n",
    "\n",
    "    # add columns for usual hours worked per week last 12 months (WKHP)\n",
    "    groups = [mask_adult, mask_65_plus, mask_18_64, mask_kid, mask_any_age]\n",
    "    group_names = ['adult', '65+', '18-64', 'kid', 'anyage']\n",
    "\n",
    "    mask_0_WKHP = dfc.WKHP == 0\n",
    "    mask_u10_WKHP = dfc.WKHP < 10\n",
    "    mask_u15_WKHP = dfc.WKHP < 15\n",
    "    mask_u20_WKHP = dfc.WKHP < 20\n",
    "    mask_u30_WKHP = dfc.WKHP < 30\n",
    "    mask_u40_WKHP = dfc.WKHP < 40\n",
    "    mask_u50_WKHP = dfc.WKHP < 50\n",
    "    mask_50_plus_WKHP = dfc.WKHP >= 50\n",
    "    mask_40_plus_WKHP = dfc.WKHP >= 40\n",
    "\n",
    "    categories = [mask_0_WKHP, mask_u10_WKHP, mask_u15_WKHP, mask_u20_WKHP, mask_u30_WKHP, mask_u40_WKHP, \n",
    "                  mask_u50_WKHP, mask_50_plus_WKHP, mask_40_plus_WKHP, mask_any]\n",
    "    category_names = ['no_work_hrs', '<10_work_hrs', '<15_work_hrs', '<20_work_hrs', '<30_work_hrs', '<40_work_hrs', \n",
    "                      '<50_work_hrs', '50_plus_work_hrs', '40_plus_work_hrs', 'any_WKHP']\n",
    "\n",
    "    add_pu_columns(dfc, groups, group_names, categories, category_names, 'WKHP')\n",
    "    add_pu_columns(dfc, groups, group_names, categories, category_names, 'AGEP')\n",
    "    print('done with WKHP')\n",
    "    time_took = time.time() - time_0\n",
    "    print('took ' + str(time_took) + ' s so far')\n",
    "\n",
    "    # add columns for disability status (DIS)\n",
    "    groups = [mask_adult, mask_65_plus, mask_18_64, mask_kid, mask_any_age]\n",
    "    group_names = ['adult', '65+', '18-64', 'kid', 'anyage']\n",
    "\n",
    "    mask_DIS = dfc.DIS == 1\n",
    "    mask_not_DIS = dfc.DIS == 2\n",
    "\n",
    "    categories = [mask_DIS, mask_not_DIS, mask_any]\n",
    "    category_names = ['DIS', 'not_DIS', 'any_DIS']\n",
    "\n",
    "    add_pu_columns(dfc, groups, group_names, categories, category_names, 'DIS')\n",
    "    add_pu_columns(dfc, groups, group_names, categories, category_names, 'AGEP')\n",
    "    print('done with DIS')\n",
    "    time_took = time.time() - time_0\n",
    "    print('took ' + str(time_took) + ' s so far')\n",
    "\n",
    "    # add columns for number of people (NP)\n",
    "    groups = [mask_adult, mask_65_plus, mask_18_64, mask_kid, mask_any_age]\n",
    "    group_names = ['adult', '65+', '18-64', 'kid', 'anyage']\n",
    "\n",
    "    mask_1_NP = dfc.NP == 1\n",
    "    mask_2_NP = dfc.NP == 2\n",
    "    mask_3_NP = dfc.NP == 3\n",
    "    mask_4_NP = dfc.NP == 4\n",
    "    mask_5_NP = dfc.NP == 5\n",
    "    mask_p5_NP = dfc.NP > 5\n",
    "    mask_p6_NP = dfc.NP > 6\n",
    "    mask_p8_NP = dfc.NP > 8\n",
    "    mask_p10_NP = dfc.NP > 10\n",
    "    mask_p12_NP = dfc.NP > 12\n",
    "\n",
    "    categories = [mask_1_NP, mask_2_NP, mask_3_NP, mask_4_NP, mask_5_NP, mask_p5_NP, mask_p6_NP, mask_p8_NP, mask_p10_NP, \n",
    "                  mask_p12_NP, mask_any]\n",
    "    category_names = ['NP1', 'NP2', 'NP3', 'NP4', 'NP5', 'NP>5', 'NP>6', 'NP>8', 'NP>10', 'NP>12', 'anyNP']\n",
    "\n",
    "    add_pu_columns(dfc, groups, group_names, categories, category_names, 'NP')\n",
    "    add_pu_columns(dfc, groups, group_names, categories, category_names, 'AGEP')\n",
    "    print('done with NP')\n",
    "    time_took = time.time() - time_0\n",
    "    print('took ' + str(time_took) + ' s so far')\n",
    "\n",
    "    # add columns for means of transportation to work (JWTR)\n",
    "    groups = [mask_adult, mask_65_plus, mask_18_64, mask_kid, mask_any_age]\n",
    "    group_names = ['adult', '65+', '18-64', 'kid', 'anyage']\n",
    "\n",
    "    categories = [mask_any]\n",
    "    category_names = ['work_trans']\n",
    "\n",
    "    add_pu_columns(dfc, groups, group_names, categories, category_names, 'JWTR')\n",
    "    # Since only doing this to get means/avgs on JWTR, no need to add the 'AGEP' version here\n",
    "    #add_pu_columns(dfc, groups, group_names, categories, category_names, 'AGEP')\n",
    "    print('done with JWTR')\n",
    "    time_took = time.time() - time_0\n",
    "    print('took ' + str(time_took) + ' s so far')\n",
    "\n",
    "    # add columns for wages (WAGP_adj)\n",
    "    groups = [mask_adult, mask_65_plus, mask_18_64, mask_kid, mask_any_age]\n",
    "    group_names = ['adult', '65+', '18-64', 'kid', 'anyage']\n",
    "\n",
    "    mask_0_WAG = dfc.WAGP_adj == 0\n",
    "    mask_u10_WAG = dfc.WAGP_adj < 10000\n",
    "    mask_u15_WAG = dfc.WAGP_adj < 15000\n",
    "    mask_u20_WAG = dfc.WAGP_adj < 20000\n",
    "    mask_u25_WAG = dfc.WAGP_adj < 25000\n",
    "    mask_u30_WAG = dfc.WAGP_adj < 30000\n",
    "    mask_u35_WAG = dfc.WAGP_adj < 35000\n",
    "    mask_u40_WAG = dfc.WAGP_adj < 40000\n",
    "    mask_u45_WAG = dfc.WAGP_adj < 45000\n",
    "    mask_u50_WAG = dfc.WAGP_adj < 50000\n",
    "    mask_u60_WAG = dfc.WAGP_adj < 60000\n",
    "    mask_u70_WAG = dfc.WAGP_adj < 70000\n",
    "    mask_u80_WAG = dfc.WAGP_adj < 80000\n",
    "\n",
    "    categories = [mask_0_WAG, mask_u10_WAG, mask_u15_WAG, mask_u20_WAG, mask_u25_WAG, mask_u30_WAG,  mask_u35_WAG, \n",
    "                  mask_u40_WAG, mask_u45_WAG, mask_u50_WAG, mask_u60_WAG, mask_u70_WAG, mask_u80_WAG, mask_any]\n",
    "    category_names = ['WAG0', 'WAG<10', 'WAG<15', 'WAG<20', 'WAG<25', 'WAG<30', 'WAG<35', \n",
    "                      'WAG<40', 'WAG<45', 'WAG<50', 'WAG<60', 'WAG<70', 'WAG<80', 'WAG_any']\n",
    "\n",
    "    if include_financials:\n",
    "        add_pu_columns(dfc, groups, group_names, categories, category_names, 'WAGP_adj')\n",
    "        add_pu_columns(dfc, groups, group_names, categories, category_names, 'AGEP')\n",
    "    print('done with WAGP')\n",
    "    time_took = time.time() - time_0\n",
    "    print('took ' + str(time_took) + ' s so far')\n",
    "\n",
    "    # add columns for interest income (INTP_adj)\n",
    "    groups = [mask_adult, mask_65_plus, mask_18_64, mask_kid, mask_any_age]\n",
    "    group_names = ['adult', '65+', '18-64', 'kid', 'anyage']\n",
    "\n",
    "    # cutoffs taken from quartiles of nonzero values\n",
    "    mask_0_INT = dfc.INTP_adj <= 0\n",
    "    mask_INT_1q = (dfc.INTP_adj > 0) & (dfc.INTP_adj <= 400)\n",
    "    mask_INT_2q = (dfc.INTP_adj > 400) & (dfc.INTP_adj <= 4000)\n",
    "    mask_INT_3q = (dfc.INTP_adj > 4000) & (dfc.INTP_adj <= 15000)\n",
    "    mask_INT_4q = dfc.INTP_adj > 15000\n",
    "\n",
    "    categories = [mask_0_INT, mask_INT_1q, mask_INT_2q, mask_INT_3q, mask_INT_4q, mask_any]\n",
    "    category_names = ['INT0', 'INT1q', 'INT2q', 'INT3q', 'INT4q', 'INT_any']\n",
    "\n",
    "    if include_financials:\n",
    "        add_pu_columns(dfc, groups, group_names, categories, category_names, 'INTP_adj')\n",
    "        add_pu_columns(dfc, groups, group_names, categories, category_names, 'AGEP')\n",
    "    print('done with INTP')\n",
    "    time_took = time.time() - time_0\n",
    "    print('took ' + str(time_took) + ' s so far')\n",
    "\n",
    "    # add columns for self-employment income (SEMP_adj)\n",
    "    groups = [mask_adult, mask_65_plus, mask_18_64, mask_kid, mask_any_age]\n",
    "    group_names = ['adult', '65+', '18-64', 'kid', 'anyage']\n",
    "\n",
    "    # cutoffs taken from quartiles of nonzero values\n",
    "    mask_0_SEMP = dfc.SEMP_adj <= 0\n",
    "    mask_SEMP_1q = (dfc.SEMP_adj > 0) & (dfc.SEMP_adj <= 5000)\n",
    "    mask_SEMP_2q = (dfc.SEMP_adj > 5000) & (dfc.SEMP_adj <= 15000)\n",
    "    mask_SEMP_3q = (dfc.SEMP_adj > 15000) & (dfc.SEMP_adj <= 35000)\n",
    "    mask_SEMP_4q = dfc.SEMP_adj > 35000\n",
    "\n",
    "    categories = [mask_0_SEMP, mask_SEMP_1q, mask_SEMP_2q, mask_SEMP_3q, mask_SEMP_4q, mask_any]\n",
    "    category_names = ['SEMP0', 'SEMP1q', 'SEMP2q', 'SEMP3q', 'SEMP4q', 'SEMP_any']\n",
    "\n",
    "    if include_financials:\n",
    "        add_pu_columns(dfc, groups, group_names, categories, category_names, 'SEMP_adj')\n",
    "        add_pu_columns(dfc, groups, group_names, categories, category_names, 'AGEP')\n",
    "    print('done with SEMP')\n",
    "    time_took = time.time() - time_0\n",
    "    print('took ' + str(time_took) + ' s so far')\n",
    "\n",
    "    # add columns for social security income (SSP_adj)\n",
    "    groups = [mask_adult, mask_65_plus, mask_18_64, mask_kid, mask_any_age]\n",
    "    group_names = ['adult', '65+', '18-64', 'kid', 'anyage']\n",
    "\n",
    "    # cutoffs taken from quartiles of nonzero values\n",
    "    # min 10, 25% 8000, 50% 12,000, 75% 18,000, max 50,000\n",
    "    mask_0_SSP = dfc.SSP_adj <= 0\n",
    "    mask_SSP_1q = (dfc.SSP_adj > 0) & (dfc.SSP_adj <= 8000)\n",
    "    mask_SSP_2q = (dfc.SSP_adj > 8000) & (dfc.SSP_adj <= 12000)\n",
    "    mask_SSP_3q = (dfc.SSP_adj > 12000) & (dfc.SSP_adj <= 18000)\n",
    "    mask_SSP_4q = dfc.SSP_adj > 18000\n",
    "\n",
    "    categories = [mask_0_SSP, mask_SSP_1q, mask_SSP_2q, mask_SSP_3q, mask_SSP_4q, mask_any]\n",
    "    category_names = ['SSP0', 'SSP1q', 'SSP2q', 'SSP3q', 'SSP4q', 'SSP_any']\n",
    "\n",
    "    if include_financials:\n",
    "        add_pu_columns(dfc, groups, group_names, categories, category_names, 'SSP_adj')\n",
    "        add_pu_columns(dfc, groups, group_names, categories, category_names, 'AGEP')\n",
    "    print('done with SSP')\n",
    "    time_took = time.time() - time_0\n",
    "    print('took ' + str(time_took) + ' s so far')\n",
    "\n",
    "    # add columns for supplemental security income (SSIP_adj)\n",
    "    groups = [mask_adult, mask_65_plus, mask_18_64, mask_kid, mask_any_age]\n",
    "    group_names = ['adult', '65+', '18-64', 'kid', 'anyage']\n",
    "\n",
    "    # cutoffs taken from quartiles of nonzero values\n",
    "    mask_0_SSIP = dfc.SSIP_adj <= 0 \n",
    "    mask_SSIP_1q = (dfc.SSIP_adj > 0) & (dfc.SSIP_adj <= 5500) \n",
    "    mask_SSIP_2q = (dfc.SSIP_adj > 5500) & (dfc.SSIP_adj <= 8000) \n",
    "    mask_SSIP_3q = (dfc.SSIP_adj > 8000)\n",
    "\n",
    "    categories = [mask_0_SSIP, mask_SSIP_1q, mask_SSIP_2q, mask_SSIP_3q, mask_any]\n",
    "    category_names = ['SSIP0', 'SSIP1q', 'SSIP2q', 'SSIP3q', 'SSIP_any']\n",
    "\n",
    "    if include_financials:\n",
    "        add_pu_columns(dfc, groups, group_names, categories, category_names, 'SSIP_adj')\n",
    "        add_pu_columns(dfc, groups, group_names, categories, category_names, 'AGEP')\n",
    "    print('done with SSIP')\n",
    "    time_took = time.time() - time_0\n",
    "    print('took ' + str(time_took) + ' s so far')\n",
    "\n",
    "    # add columns for public assistance income (PA_adj)\n",
    "    groups = [mask_adult, mask_65_plus, mask_18_64, mask_kid, mask_any_age]\n",
    "    group_names = ['adult', '65+', '18-64', 'kid', 'anyage']\n",
    "\n",
    "    # cutoffs taken from quartiles of nonzero values\n",
    "    mask_0_PA = dfc.PA_adj <= 0 \n",
    "    mask_PA_1q = (dfc.PA_adj > 0) & (dfc.PA_adj <= 900) \n",
    "    mask_PA_2q = (dfc.PA_adj > 900)\n",
    "\n",
    "    categories = [mask_0_PA, mask_PA_1q, mask_PA_2q, mask_any]\n",
    "    category_names = ['PA0', 'PA1q', 'PA2q', 'PA_any']\n",
    "\n",
    "    if include_financials:\n",
    "        add_pu_columns(dfc, groups, group_names, categories, category_names, 'PA_adj')\n",
    "        add_pu_columns(dfc, groups, group_names, categories, category_names, 'AGEP')\n",
    "    print('done with PA')\n",
    "    time_took = time.time() - time_0\n",
    "    print('took ' + str(time_took) + ' s so far')\n",
    "\n",
    "    # add columns for retirement income (RETP_adj)\n",
    "    groups = [mask_adult, mask_65_plus, mask_18_64, mask_kid, mask_any_age]\n",
    "    group_names = ['adult', '65+', '18-64', 'kid', 'anyage']\n",
    "\n",
    "    # cutoffs taken from quartiles of nonzero values\n",
    "    mask_RETP_1q = (dfc.RETP_adj > 0) & (dfc.RETP_adj <= 6000) \n",
    "    mask_RETP_2q = (dfc.RETP_adj > 6000) & (dfc.RETP_adj <= 13400) \n",
    "    mask_RETP_3q = (dfc.RETP_adj > 13400)\n",
    "\n",
    "    categories = [mask_RETP_1q, mask_RETP_2q, mask_RETP_3q, mask_any]\n",
    "    category_names = ['RETP1q', 'RETP2q', 'RETP3q', 'RETP_any']\n",
    "\n",
    "    if include_financials:\n",
    "        add_pu_columns(dfc, groups, group_names, categories, category_names, 'RETP_adj')\n",
    "        add_pu_columns(dfc, groups, group_names, categories, category_names, 'AGEP')\n",
    "    print('done with RETP')\n",
    "    time_took = time.time() - time_0\n",
    "    print('took ' + str(time_took) + ' s so far')\n",
    "\n",
    "    # add columns for other income (OI_adj)\n",
    "    groups = [mask_adult, mask_65_plus, mask_18_64, mask_kid, mask_any_age]\n",
    "    group_names = ['adult', '65+', '18-64', 'kid', 'anyage']\n",
    "\n",
    "    # cutoffs taken from quartiles of nonzero values\n",
    "    mask_OI_1q = (dfc.OI_adj > 0) & (dfc.OI_adj <= 2000) \n",
    "    mask_OI_2q = (dfc.OI_adj > 2000) & (dfc.OI_adj <= 6000) \n",
    "    mask_OI_3q = (dfc.OI_adj > 6000)\n",
    "\n",
    "    categories = [mask_OI_1q, mask_OI_2q, mask_OI_3q, mask_any]\n",
    "    category_names = ['OI1q', 'OI2q', 'OI3q', 'OI_any']\n",
    "\n",
    "    if include_financials:\n",
    "        add_pu_columns(dfc, groups, group_names, categories, category_names, 'OI_adj')\n",
    "        add_pu_columns(dfc, groups, group_names, categories, category_names, 'AGEP')\n",
    "    print('done with OI')\n",
    "    time_took = time.time() - time_0\n",
    "    print('took ' + str(time_took) + ' s so far')\n",
    "\n",
    "    # add columns for ethnicity\n",
    "    groups = [mask_adult, mask_65_plus, mask_18_64, mask_kid, mask_any_age]\n",
    "    group_names = ['adult', '65+', '18-64', 'kid', 'anyage']\n",
    "\n",
    "    mask_white = dfc.Ethnicity == 1\n",
    "    mask_black = dfc.Ethnicity == 2\n",
    "    mask_asian = dfc.Ethnicity == 3\n",
    "    mask_hisp = dfc.Ethnicity == 4\n",
    "    mask_other = dfc.Ethnicity == 5\n",
    "\n",
    "    categories = [mask_white, mask_black, mask_asian, mask_hisp, mask_other, mask_any]\n",
    "    category_names = ['White', 'Black', 'Asian', 'Hisp', 'ETH_other', 'ETH_any']\n",
    "\n",
    "    add_pu_columns(dfc, groups, group_names, categories, category_names, 'Ethnicity')\n",
    "    add_pu_columns(dfc, groups, group_names, categories, category_names, 'AGEP')\n",
    "    print('done with Ethnicity')\n",
    "    time_took = time.time() - time_0\n",
    "    print('took ' + str(time_took) + ' s so far')\n",
    "\n",
    "    if include_financials:\n",
    "        # add columns for total personal income that we added above ('TINP')\n",
    "        groups = [mask_adult, mask_65_plus, mask_18_64, mask_kid, mask_any_age]\n",
    "        group_names = ['adult', '65+', '18-64', 'kid', 'anyage']\n",
    "\n",
    "        mask_0_TINP = dfc.TINP == 0\n",
    "        mask_u10_TINP = dfc.TINP < 10000\n",
    "        mask_u15_TINP = dfc.TINP < 15000\n",
    "        mask_u20_TINP = dfc.TINP < 20000\n",
    "        mask_u25_TINP = dfc.TINP < 25000\n",
    "        mask_u30_TINP = dfc.TINP < 30000\n",
    "        mask_u35_TINP = dfc.TINP < 35000\n",
    "        mask_u40_TINP = dfc.TINP < 40000\n",
    "        mask_u45_TINP = dfc.TINP < 45000\n",
    "        mask_u50_TINP = dfc.TINP < 50000\n",
    "        mask_u60_TINP = dfc.TINP < 60000\n",
    "        mask_u70_TINP = dfc.TINP < 70000\n",
    "        mask_u80_TINP = dfc.TINP < 80000\n",
    "\n",
    "        categories = [mask_0_TINP, mask_u10_TINP, mask_u15_TINP, mask_u20_TINP, mask_u25_TINP, mask_u30_TINP,  mask_u35_TINP, \n",
    "                      mask_u40_TINP, mask_u45_TINP, mask_u50_TINP, mask_u60_TINP, mask_u70_TINP, mask_u80_TINP, mask_any]\n",
    "        category_names = ['TINP0', 'TINP<10', 'TINP<15', 'TINP<20', 'TINP<25', 'TINP<30', 'TINP<35', \n",
    "                          'TINP<40', 'TINP<45', 'TINP<50', 'TINP<60', 'TINP<70', 'TINP<80', 'TINP_any']\n",
    "\n",
    "        add_pu_columns(dfc, groups, group_names, categories, category_names, 'TINP')\n",
    "        add_pu_columns(dfc, groups, group_names, categories, category_names, 'AGEP')\n",
    "\n",
    "    time_took = time.time() - time_0\n",
    "    print('took ' + str(time_took) + ' s')\n",
    "\n",
    "    # Only return the new features that we engineered\n",
    "    # The variables features_to_mask and max_ppl were created at the beginning of this function\n",
    "    columns_to_mask = features_to_mask * max_ppl\n",
    "    dfc = dfc.iloc[:, columns_to_mask:].copy()\n",
    "\n",
    "    # We ended up with multi-level column headers - just keep the top level\n",
    "    dfc.columns = dfc.columns.get_level_values(0)\n",
    "    \n",
    "    return(dfc)\n",
    "\n",
    "#new_features = engineer_features(all_2016, include_financials=True)\n",
    "\n",
    "#new_features.to_csv('data/EngineeredFeatures.csv')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Feature Engineering - Putting Personal Features into Poverty Unit Rows\n",
    "Our dataset contains people in poverty units (a household may contain one or more poverty units). The entire \n",
    "poverty unit either is or is not in poverty, but the data set as constructed has people in different rows (the data is\n",
    "not tidy).\n",
    "\n",
    "To tidy up, we'll move information on all the people in the poverty unit, into the row for that poverty unit.\n",
    "Instead of having 3 people in a poverty unit represented by different rows, we'll put all three people in\n",
    "the same row but different columns. The columns will be named 'AGEP_1', 'AGEP_2', 'AGEP_3', etc, with zero values in all\n",
    "columns where person n does not exist.\n",
    "\n",
    "There are three main columns of interest for this:\n",
    "* SERIALNO is the serial number of each household.\n",
    "* PovUnit_ID is the serial number of the poverty unit within the household (1-18). Each household can have more than one poverty unit (although the vast majority of households have only one poverty unit).\n",
    "* SPORDER is the serial number of a person in the household (1-20). Note that the dataset only assigns serial numbers to\n",
    "the people in the *household*, not the *poverty unit*.  This means that if for example a household has two poverty units,\n",
    "the first with two people and the second with three people, the head of the second poverty unit will have SPORDER of 3,\n",
    "not 1.  (One-based counting scheme) This is not a problem, but a particularity to be aware of when looking at dataset\n",
    "rows for reference.\n",
    "\n",
    "Also, there are some poverty-unit-level columns (e.g. 'TotalWorkHrs_PU', the number of work hours in the poverty unit)\n",
    "that have the same value for each person in the poverty unit; we'll collect those separately.\n",
    "\n",
    "So the strategy in the next section is to create dataframes X_pers and X_pu, containing respectively the personal and\n",
    "poverty-unit features for each household.  We'll join those together, and then at the end add in all the new features we created in the last section."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "def pers_and_pu_features(df, include_financials=True, target_column='NYCgov_Pov_Stat'):\n",
    "    \"\"\"Create personal and poverty-unit features for the dataframe. No new features are created, just 'tidy'-ing the data.\n",
    "    Input: a poverty dataframe, whether or not to include financial features, and the target column.\n",
    "    Output: returns a copy of the dataframe, tidy-ed up, with poverty units in rows and only features of interest in \n",
    "    columns. Prints progess updates to the screen as it goes.\n",
    "    \"\"\"\n",
    "\n",
    "    dfc = df.copy()\n",
    "    \n",
    "    # First, some categoricals have odd ordering; remap them\n",
    "    fix_orders = {'ENG': {0:0, 4:1, 3:2, 2:3, 1:4, 5:5}, 'WKW': {0:0, 6:1, 5:2, 4:3, 3:4, 2:5, 1:6}, \n",
    "                  'TotalWorkHrs_PU': {5:0, 4:1, 3:2, 2:3, 1:4}}\n",
    "    dfc['ENG'] = dfc['ENG'].map(fix_orders['ENG'])\n",
    "    dfc['WKW'] = dfc['WKW'].map(fix_orders['WKW'])\n",
    "    dfc['TotalWorkHrs_PU'] = dfc['TotalWorkHrs_PU'].map(fix_orders['TotalWorkHrs_PU'])\n",
    "\n",
    "    # Add column for total personal income\n",
    "    if include_financials:\n",
    "        dfc['TINP'] = dfc.WAGP_adj + dfc.INTP_adj + dfc.SEMP_adj + dfc.SSP_adj + dfc.SSIP_adj + dfc.PA_adj + dfc.RETP_adj + dfc.OI_adj\n",
    "\n",
    "    categoricals = ['AGEP', 'CIT', 'SCHL', 'SEX', 'ENG', 'MSP', 'WKW', 'WKHP', 'DIS', 'JWTR', 'Ethnicity', 'Boro', 'NP', \n",
    "                    'TEN', 'HHT', 'HousingStatus', 'TotalWorkHrs_PU']\n",
    "\n",
    "    # We'll create separate dataframes for personal and poverty-unit variables, then join them together\n",
    "    personal_columns = ['AGEP', 'CIT', 'SCHL', 'SEX', 'ENG', 'MSP', 'WKW', 'WKHP', 'DIS', 'JWTR', 'Ethnicity', 'Boro']\n",
    "    if include_financials:\n",
    "        personal_columns += ['WAGP_adj', 'INTP_adj', 'SEMP_adj', 'SSP_adj', 'SSIP_adj', 'PA_adj', 'RETP_adj', \n",
    "                             'OI_adj', 'TINP']\n",
    "    pu_columns = ['NP', 'TEN', 'HHT', 'MRGP_adj', 'RNTP_adj', 'HousingStatus', 'TotalWorkHrs_PU'] + [target_column]\n",
    "\n",
    "    # Create a dataframe for the personal columns, including our 3 indicator variables\n",
    "    df_pers = dfc.copy()\n",
    "    df_pers_columns = ['SERIALNO', 'Povunit_ID', 'SPORDER'] + personal_columns\n",
    "    df_pers = df_pers[df_pers_columns]\n",
    "\n",
    "    # Grouping by SERIALNO and Povunit_ID, put SPORDER (person # in household) at the top as multi-index columns\n",
    "    df_pers = df_pers.set_index(['SERIALNO', 'Povunit_ID', 'SPORDER']).unstack('SPORDER').fillna(0)\n",
    "\n",
    "    # Turn the multi-index columns into a single indexed column: 'AGEP_1', 'AGEP_2', 'AGEP_3', etc.\n",
    "    df_pers.columns = list(map('_'.join, [(y, str(z)) for y, z in (x for x in df_pers.columns)]))\n",
    "    print('df_pers complete')\n",
    "\n",
    "    # Create a dataframe for the poverty-unit columns, including our 3 indicator variables\n",
    "    df_pu = dfc.copy()\n",
    "    df_pu_columns = ['SERIALNO', 'Povunit_ID', 'SPORDER'] + pu_columns\n",
    "    df_pu = df_pu[df_pu_columns]\n",
    "\n",
    "    # Add column for total mortgage + rent\n",
    "    df_pu['MRNT'] = df_pu.MRGP_adj + df_pu.RNTP_adj\n",
    "\n",
    "    # Grouping by SERIALNO and Povunit_ID, put SPORDER (person # in household) at the top as multi-index columns\n",
    "    df_pu = df_pu.set_index(['SERIALNO', 'Povunit_ID', 'SPORDER']).unstack('SPORDER').fillna(0)\n",
    "\n",
    "    # Groupby and take the max of SPORDER (these are poverty-unit variables; if there is a nonzero value, it's unique)\n",
    "    df_pu = df_pu.stack().groupby(['SERIALNO', 'Povunit_ID']).max()\n",
    "    print('df_pu complete')\n",
    "\n",
    "    # Add the personal and poverty-unit dataframes\n",
    "    dfc = df_pers.join(df_pu)\n",
    "    return(dfc)\n",
    "\n",
    "\n",
    "# Get the personal and poverty-unit features\n",
    "#X = pers_and_pu_features(all_2016, include_financials=True, target_column='NYCgov_Pov_Stat')\n",
    "\n",
    "# Add the personal and poverty-unit dataframes\n",
    "# new_features = pd.read_csv('/data/EngineeredFeatures.csv', index_col=[0,1], header=0)\n",
    "#X = X.join(new_features)\n",
    "    \n",
    "#X.to_csv('/data/Features.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_and_y = pd.read_csv('data/Features.csv', index_col=[0,1], header=0)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### One-Hot Encoding\n",
    "Most of our features are numerical or ordinal; but a few features are nominal, that is, categorical without any order,\n",
    "like disabled status (yes or no), for example.  We'll loop through and one-hot encode those."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "def one_hot_encode(df, old_df):\n",
    "    \"\"\"\n",
    "    Turn the categorical columns of df into one-hot encoded columns.\n",
    "    Input: the dataframe of interest (that has been tidy-ed up so that all people in the same poverty unit are in the\n",
    "    same row, and a reference dataframe (pre-tidy-ed version) so we have the correct number of loop iterations.\n",
    "    Output: returns the dataframe with columns transformed.\n",
    "    \"\"\"\n",
    "    \n",
    "    dfc = df.copy()\n",
    "    \n",
    "    # Number of enumerated columns for each feature ('AGEP_1', 'AGEP_2', etc.)\n",
    "    # This is equal to the maximum number of people in any household, which is the max of SPORDER\n",
    "    n = old_df.SPORDER.max()\n",
    "\n",
    "    # Some categoricals have no ordering\n",
    "    nominal_pers = ['DIS', 'SEX', 'MSP', 'JWTR', 'Ethnicity', 'Boro']\n",
    "    nominal_pu = ['TEN', 'HHT', 'HousingStatus']\n",
    "    \n",
    "    # Collect all the names that we need to change to str for get_dummies purposes\n",
    "    names = []\n",
    "    \n",
    "    # Loop through and collect the names of all the personal-variables columns\n",
    "    for feature in nominal_pers:\n",
    "        # Loop through and one-hot encode for each suffixed column '_1', '_2', etc.\n",
    "        for i in range(1,n+1):\n",
    "            suffixed_name = str(feature + '_' + str(i))\n",
    "            names.append(suffixed_name)\n",
    "\n",
    "    # Loop through and one-hot encode poverty-unit categoricals\n",
    "    for feature in nominal_pu:\n",
    "        names.append(feature)\n",
    "    \n",
    "    dfc[names] = dfc[names].astype(str)\n",
    "    # Assuming this doesn't work, just use dfc_names_only = dfc_names and dfc_non_names=dfc.drop(names, axis='columns') and go from there\n",
    "    dfc = pd.get_dummies(dfc, drop_first=True)\n",
    "    \n",
    "    return(dfc)\n",
    "\n",
    "X_and_y = one_hot_encode(X_and_y, all_2016)\n",
    "#X_and_y.to_csv('data/FeaturesCoded.csv')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Removing Columns with Low Standard Deviation\n",
    "The algorithm used above created thousands of features -- but not all of them will be useful.  Let's remove all of the \n",
    "features that have a Standard Deviation of less than 0.1, to reduce the noise and speed up our model runs (especially\n",
    "our run to remove co-linear features, which will take a while)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5916\n",
      "4960\n"
     ]
    }
   ],
   "source": [
    "tester = X_and_y.copy()\n",
    "print('Number of columns before feature pruning: ' + str(len(tester.columns)))\n",
    "tester = tester.loc[:, tester.astype('float64').std() > .1] #4960 columns\n",
    "print('Number of columns after feature pruning: ' + str(len(tester.columns)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Removing Co-Linear Features\n",
    "We also introduced a lot of of features that are very highly correlated.  Out of the 4,960 columns, below we identify\n",
    "3,406 columns (nearly 70 percent!) to drop due to colinearity. This step took over 20 minutes on a fairly beefy AWS\n",
    "instance; don't run it unless you're ready to wait. If you don't want to run it, just un-comment the 'to_drop' line at the end."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "4960\n",
      "got correlations; took 1261.0507678985596s\n",
      "got uppers; took 1261.2725381851196s cumulative\n",
      "got to-drop, took 1262.4210934638977s cumulative\n",
      "['SCHL_19', 'WAGP_adj_15', 'SSP_adj_20', 'SSIP_adj_14', 'SSIP_adj_20', 'PA_adj_14', 'PA_adj_16', 'PA_adj_17', 'PA_adj_18', 'PA_adj_19', 'PA_adj_20', 'TINP_3', 'TINP_10', 'TINP_11', 'TINP_12', 'TINP_13', 'TINP_14', 'TINP_15', 'TINP_16', 'TINP_17', 'TINP_18', 'TINP_19', 'TINP_20', 'all_65+_age', 'min_65+_age', 'max_65+_age', 'sum_65+_age', 'mean_65+_age', '%_65+_age', 'all_18-64_age', 'mean_18-64_age', '%_18-64_age', 'all_kid_age', 'mean_kid_age', '%_kid_age', 'max_anyage_age', 'sum_anyage_age', 'max_adult_non-cit', 'sum_adult_non-cit', 'mean_adult_non-cit', 'any_adult_citizen', 'all_adult_citizen', 'mean_adult_citizen', '%_adult_citizen', 'max_adult_naturalized_cit', 'sum_adult_naturalized_cit', 'mean_adult_naturalized_cit', 'min_adult_any_CIT', 'max_adult_any_CIT', 'count_adult_any_CIT', 'sum_adult_any_CIT', 'mean_adult_any_CIT', 'min_65+_non-cit', 'max_65+_non-cit', 'count_65+_non-cit', 'sum_65+_non-cit', 'mean_65+_non-cit', '%_65+_non-cit', 'all_65+_citizen', 'min_65+_citizen', 'max_65+_citizen', 'sum_65+_citizen', 'mean_65+_citizen', '%_65+_citizen', 'min_65+_naturalized_cit', 'max_65+_naturalized_cit', 'sum_65+_naturalized_cit', 'mean_65+_naturalized_cit', '%_65+_naturalized_cit', 'any_65+_any_CIT', 'all_65+_any_CIT', 'min_65+_any_CIT', 'max_65+_any_CIT', 'count_65+_any_CIT', 'sum_65+_any_CIT', 'mean_65+_any_CIT', '%_65+_any_CIT', 'max_18-64_non-cit', 'count_18-64_non-cit', 'sum_18-64_non-cit', 'mean_18-64_non-cit', 'mean_18-64_citizen', '%_18-64_citizen', 'min_18-64_naturalized_cit', 'max_18-64_naturalized_cit', 'sum_18-64_naturalized_cit', 'mean_18-64_naturalized_cit', 'any_18-64_any_CIT', 'all_18-64_any_CIT', 'min_18-64_any_CIT', 'max_18-64_any_CIT', 'count_18-64_any_CIT', 'sum_18-64_any_CIT', 'mean_18-64_any_CIT', '%_18-64_any_CIT', 'max_kid_non-cit', 'mean_kid_non-cit', 'any_kid_citizen', 'all_kid_citizen', 'min_kid_citizen', 'max_kid_citizen', 'count_kid_citizen', 'sum_kid_citizen', 'mean_kid_citizen', '%_kid_citizen', 'max_kid_naturalized_cit', 'mean_kid_naturalized_cit', 'any_kid_any_CIT', 'all_kid_any_CIT', 'min_kid_any_CIT', 'max_kid_any_CIT', 'count_kid_any_CIT', 'sum_kid_any_CIT', 'mean_kid_any_CIT', '%_kid_any_CIT', 'any_anyage_non-cit', 'min_anyage_non-cit', 'max_anyage_non-cit', 'count_anyage_non-cit', 'sum_anyage_non-cit', 'mean_anyage_non-cit', '%_anyage_non-cit', 'any_anyage_citizen', 'all_anyage_citizen', 'max_anyage_citizen', 'sum_anyage_citizen', 'mean_anyage_citizen', '%_anyage_citizen', 'any_anyage_naturalized_cit', 'min_anyage_naturalized_cit', 'max_anyage_naturalized_cit', 'count_anyage_naturalized_cit', 'sum_anyage_naturalized_cit', 'mean_anyage_naturalized_cit', '%_anyage_naturalized_cit', 'min_anyage_any_CIT', 'max_anyage_any_CIT', 'count_anyage_any_CIT', 'sum_anyage_any_CIT', 'mean_anyage_any_CIT', 'max_adult_college', 'mean_adult_college', 'mean_adult_HS', 'any_adult_no_diploma', 'all_adult_no_diploma', 'max_adult_no_diploma', 'mean_adult_no_diploma', '%_adult_no_diploma', 'max_adult_diploma_no_bachelors', 'mean_adult_diploma_no_bachelors', 'min_adult_any_SCHL', 'max_adult_any_SCHL', 'count_adult_any_SCHL', 'sum_adult_any_SCHL', 'mean_adult_any_SCHL', 'min_65+_college', 'max_65+_college', 'sum_65+_college', 'mean_65+_college', '%_65+_college', 'min_65+_HS', 'max_65+_HS', 'sum_65+_HS', 'mean_65+_HS', '%_65+_HS', 'min_65+_no_diploma', 'max_65+_no_diploma', 'sum_65+_no_diploma', 'mean_65+_no_diploma', '%_65+_no_diploma', 'min_65+_diploma_no_bachelors', 'max_65+_diploma_no_bachelors', 'count_65+_diploma_no_bachelors', 'sum_65+_diploma_no_bachelors', 'mean_65+_diploma_no_bachelors', '%_65+_diploma_no_bachelors', 'any_65+_any_SCHL', 'all_65+_any_SCHL', 'min_65+_any_SCHL', 'max_65+_any_SCHL', 'count_65+_any_SCHL', 'sum_65+_any_SCHL', 'mean_65+_any_SCHL', '%_65+_any_SCHL', 'max_18-64_college', 'mean_18-64_college', 'mean_18-64_HS', 'max_18-64_no_diploma', 'sum_18-64_no_diploma', 'mean_18-64_no_diploma', 'max_18-64_diploma_no_bachelors', 'mean_18-64_diploma_no_bachelors', 'any_18-64_any_SCHL', 'all_18-64_any_SCHL', 'min_18-64_any_SCHL', 'max_18-64_any_SCHL', 'count_18-64_any_SCHL', 'sum_18-64_any_SCHL', 'mean_18-64_any_SCHL', '%_18-64_any_SCHL', 'max_kid_HS', 'sum_kid_HS', 'mean_kid_HS', 'any_kid_no_diploma', 'all_kid_no_diploma', 'min_kid_no_diploma', 'max_kid_no_diploma', 'count_kid_no_diploma', 'sum_kid_no_diploma', 'mean_kid_no_diploma', '%_kid_no_diploma', 'min_kid_diploma_no_bachelors', 'max_kid_diploma_no_bachelors', 'sum_kid_diploma_no_bachelors', 'mean_kid_diploma_no_bachelors', 'any_kid_any_SCHL', 'all_kid_any_SCHL', 'min_kid_any_SCHL', 'max_kid_any_SCHL', 'count_kid_any_SCHL', 'sum_kid_any_SCHL', 'mean_kid_any_SCHL', '%_kid_any_SCHL', 'any_anyage_college', 'min_anyage_college', 'max_anyage_college', 'count_anyage_college', 'sum_anyage_college', 'mean_anyage_college', '%_anyage_college', 'any_anyage_HS', 'min_anyage_HS', 'max_anyage_HS', 'count_anyage_HS', 'sum_anyage_HS', 'mean_anyage_HS', 'any_anyage_no_diploma', 'all_anyage_no_diploma', 'max_anyage_no_diploma', 'sum_anyage_no_diploma', 'mean_anyage_no_diploma', '%_anyage_no_diploma', 'any_anyage_diploma_no_bachelors', 'min_anyage_diploma_no_bachelors', 'max_anyage_diploma_no_bachelors', 'count_anyage_diploma_no_bachelors', 'sum_anyage_diploma_no_bachelors', 'mean_anyage_diploma_no_bachelors', '%_anyage_diploma_no_bachelors', 'min_anyage_any_SCHL', 'max_anyage_any_SCHL', 'count_anyage_any_SCHL', 'sum_anyage_any_SCHL', 'mean_anyage_any_SCHL', 'mean_adult_male', 'any_adult_female', 'all_adult_female', 'mean_adult_female', '%_adult_female', 'min_adult_any_SEX', 'max_adult_any_SEX', 'count_adult_any_SEX', 'sum_adult_any_SEX', 'mean_adult_any_SEX', 'min_65+_male', 'max_65+_male', 'count_65+_male', 'sum_65+_male', 'mean_65+_male', 'min_65+_female', 'max_65+_female', 'count_65+_female', 'sum_65+_female', 'mean_65+_female', '%_65+_female', 'any_65+_any_SEX', 'all_65+_any_SEX', 'min_65+_any_SEX', 'max_65+_any_SEX', 'count_65+_any_SEX', 'sum_65+_any_SEX', 'mean_65+_any_SEX', '%_65+_any_SEX', 'mean_18-64_male', 'mean_18-64_female', 'any_18-64_any_SEX', 'all_18-64_any_SEX', 'min_18-64_any_SEX', 'max_18-64_any_SEX', 'count_18-64_any_SEX', 'sum_18-64_any_SEX', 'mean_18-64_any_SEX', '%_18-64_any_SEX', 'mean_kid_male', 'mean_kid_female', 'any_kid_any_SEX', 'all_kid_any_SEX', 'min_kid_any_SEX', 'max_kid_any_SEX', 'count_kid_any_SEX', 'sum_kid_any_SEX', 'mean_kid_any_SEX', '%_kid_any_SEX', 'all_anyage_male', 'max_anyage_male', 'sum_anyage_male', 'mean_anyage_male', '%_anyage_male', 'any_anyage_female', 'all_anyage_female', 'max_anyage_female', 'sum_anyage_female', 'mean_anyage_female', '%_anyage_female', 'min_anyage_any_SEX', 'max_anyage_any_SEX', 'count_anyage_any_SEX', 'sum_anyage_any_SEX', 'mean_anyage_any_SEX', 'min_adult_ENG_no', 'max_adult_ENG_no', 'sum_adult_ENG_no', 'mean_adult_ENG_no', 'max_adult_ENG_nvw', 'sum_adult_ENG_nvw', 'mean_adult_ENG_nvw', 'max_adult_ENG_well', 'mean_adult_ENG_well', 'max_adult_ENG_vw', 'mean_adult_ENG_vw', 'mean_adult_ENG_only', '%_adult_ENG_only', 'min_adult_ENG_any', 'max_adult_ENG_any', 'count_adult_ENG_any', 'sum_adult_ENG_any', 'mean_adult_ENG_any', 'min_65+_ENG_no', 'max_65+_ENG_no', 'count_65+_ENG_no', 'sum_65+_ENG_no', 'mean_65+_ENG_no', '%_65+_ENG_no', 'min_65+_ENG_nvw', 'max_65+_ENG_nvw', 'count_65+_ENG_nvw', 'sum_65+_ENG_nvw', 'mean_65+_ENG_nvw', '%_65+_ENG_nvw', 'min_65+_ENG_well', 'max_65+_ENG_well', 'count_65+_ENG_well', 'sum_65+_ENG_well', 'mean_65+_ENG_well', '%_65+_ENG_well', 'min_65+_ENG_vw', 'max_65+_ENG_vw', 'sum_65+_ENG_vw', 'mean_65+_ENG_vw', '%_65+_ENG_vw', 'all_65+_ENG_only', 'min_65+_ENG_only', 'max_65+_ENG_only', 'sum_65+_ENG_only', 'mean_65+_ENG_only', '%_65+_ENG_only', 'any_65+_ENG_any', 'all_65+_ENG_any', 'min_65+_ENG_any', 'max_65+_ENG_any', 'count_65+_ENG_any', 'sum_65+_ENG_any', 'mean_65+_ENG_any', '%_65+_ENG_any', 'min_18-64_ENG_no', 'max_18-64_ENG_no', 'sum_18-64_ENG_no', 'mean_18-64_ENG_no', 'min_18-64_ENG_nvw', 'max_18-64_ENG_nvw', 'sum_18-64_ENG_nvw', 'mean_18-64_ENG_nvw', 'min_18-64_ENG_well', 'max_18-64_ENG_well', 'sum_18-64_ENG_well', 'mean_18-64_ENG_well', 'max_18-64_ENG_vw', 'sum_18-64_ENG_vw', 'mean_18-64_ENG_vw', 'sum_18-64_ENG_only', 'mean_18-64_ENG_only', '%_18-64_ENG_only', 'any_18-64_ENG_any', 'all_18-64_ENG_any', 'min_18-64_ENG_any', 'max_18-64_ENG_any', 'count_18-64_ENG_any', 'sum_18-64_ENG_any', 'mean_18-64_ENG_any', '%_18-64_ENG_any', 'max_kid_ENG_no', 'mean_kid_ENG_no', 'max_kid_ENG_nvw', 'mean_kid_ENG_nvw', 'max_kid_ENG_well', 'sum_kid_ENG_well', 'mean_kid_ENG_well', 'max_kid_ENG_vw', 'sum_kid_ENG_vw', 'mean_kid_ENG_vw', '%_kid_ENG_vw', 'max_kid_ENG_only', 'sum_kid_ENG_only', 'mean_kid_ENG_only', '%_kid_ENG_only', 'any_kid_ENG_any', 'all_kid_ENG_any', 'min_kid_ENG_any', 'max_kid_ENG_any', 'count_kid_ENG_any', 'sum_kid_ENG_any', 'mean_kid_ENG_any', '%_kid_ENG_any', 'any_anyage_ENG_no', 'all_anyage_ENG_no', 'min_anyage_ENG_no', 'max_anyage_ENG_no', 'count_anyage_ENG_no', 'sum_anyage_ENG_no', 'mean_anyage_ENG_no', '%_anyage_ENG_no', 'any_anyage_ENG_nvw', 'min_anyage_ENG_nvw', 'max_anyage_ENG_nvw', 'count_anyage_ENG_nvw', 'sum_anyage_ENG_nvw', 'mean_anyage_ENG_nvw', '%_anyage_ENG_nvw', 'any_anyage_ENG_well', 'min_anyage_ENG_well', 'max_anyage_ENG_well', 'sum_anyage_ENG_well', 'mean_anyage_ENG_well', '%_anyage_ENG_well', 'min_anyage_ENG_vw', 'max_anyage_ENG_vw', 'sum_anyage_ENG_vw', 'mean_anyage_ENG_vw', '%_anyage_ENG_vw', 'any_anyage_ENG_only', 'max_anyage_ENG_only', 'sum_anyage_ENG_only', 'mean_anyage_ENG_only', '%_anyage_ENG_only', 'min_anyage_ENG_any', 'max_anyage_ENG_any', 'count_anyage_ENG_any', 'sum_anyage_ENG_any', 'mean_anyage_ENG_any', 'max_adult_married', 'sum_adult_married', 'mean_adult_married', 'min_adult_widowed', 'max_adult_widowed', 'count_adult_widowed', 'sum_adult_widowed', 'mean_adult_widowed', 'min_adult_sep/divorced', 'max_adult_sep/divorced', 'count_adult_sep/divorced', 'sum_adult_sep/divorced', 'mean_adult_sep/divorced', 'max_adult_not_married', 'mean_adult_not_married', 'min_adult_any_MSP', 'max_adult_any_MSP', 'count_adult_any_MSP', 'sum_adult_any_MSP', 'mean_adult_any_MSP', 'all_65+_married', 'min_65+_married', 'max_65+_married', 'count_65+_married', 'sum_65+_married', 'mean_65+_married', '%_65+_married', 'all_65+_widowed', 'min_65+_widowed', 'max_65+_widowed', 'count_65+_widowed', 'sum_65+_widowed', 'mean_65+_widowed', '%_65+_widowed', 'all_65+_sep/divorced', 'min_65+_sep/divorced', 'max_65+_sep/divorced', 'count_65+_sep/divorced', 'sum_65+_sep/divorced', 'mean_65+_sep/divorced', '%_65+_sep/divorced', 'all_65+_not_married', 'min_65+_not_married', 'max_65+_not_married', 'count_65+_not_married', 'sum_65+_not_married', 'mean_65+_not_married', '%_65+_not_married', 'any_65+_any_MSP', 'all_65+_any_MSP', 'min_65+_any_MSP', 'max_65+_any_MSP', 'count_65+_any_MSP', 'sum_65+_any_MSP', 'mean_65+_any_MSP', '%_65+_any_MSP', 'min_18-64_married', 'max_18-64_married', 'sum_18-64_married', 'mean_18-64_married', '%_18-64_married', 'min_18-64_widowed', 'max_18-64_widowed', 'count_18-64_widowed', 'sum_18-64_widowed', 'mean_18-64_widowed', 'min_18-64_sep/divorced', 'max_18-64_sep/divorced', 'count_18-64_sep/divorced', 'sum_18-64_sep/divorced', 'mean_18-64_sep/divorced', 'max_18-64_not_married', 'count_18-64_not_married', 'mean_18-64_not_married', 'any_18-64_any_MSP', 'all_18-64_any_MSP', 'min_18-64_any_MSP', 'max_18-64_any_MSP', 'count_18-64_any_MSP', 'sum_18-64_any_MSP', 'mean_18-64_any_MSP', '%_18-64_any_MSP', 'max_kid_married', 'sum_kid_married', 'mean_kid_married', 'max_kid_sep/divorced', 'sum_kid_sep/divorced', 'mean_kid_sep/divorced', 'min_kid_not_married', 'max_kid_not_married', 'count_kid_not_married', 'sum_kid_not_married', 'mean_kid_not_married', 'any_kid_any_MSP', 'all_kid_any_MSP', 'min_kid_any_MSP', 'max_kid_any_MSP', 'count_kid_any_MSP', 'sum_kid_any_MSP', 'mean_kid_any_MSP', '%_kid_any_MSP', 'any_anyage_married', 'min_anyage_married', 'max_anyage_married', 'count_anyage_married', 'sum_anyage_married', 'mean_anyage_married', 'any_anyage_widowed', 'all_anyage_widowed', 'min_anyage_widowed', 'max_anyage_widowed', 'count_anyage_widowed', 'sum_anyage_widowed', 'mean_anyage_widowed', '%_anyage_widowed', 'any_anyage_sep/divorced', 'min_anyage_sep/divorced', 'max_anyage_sep/divorced', 'count_anyage_sep/divorced', 'sum_anyage_sep/divorced', 'mean_anyage_sep/divorced', '%_anyage_sep/divorced', 'min_anyage_not_married', 'max_anyage_not_married', 'sum_anyage_not_married', 'mean_anyage_not_married', '%_anyage_not_married', 'min_anyage_any_MSP', 'max_anyage_any_MSP', 'count_anyage_any_MSP', 'sum_anyage_any_MSP', 'mean_anyage_any_MSP', 'max_adult_no_work', 'mean_adult_no_work', 'max_adult_<14WKW', 'count_adult_<14WKW', 'sum_adult_<14WKW', 'mean_adult_<14WKW', 'max_adult_14-26WKW', 'count_adult_14-26WKW', 'sum_adult_14-26WKW', 'mean_adult_14-26WKW', 'max_adult_27-39WKW', 'count_adult_27-39WKW', 'sum_adult_27-39WKW', 'mean_adult_27-39WKW', 'max_adult_40-47WKW', 'count_adult_40-47WKW', 'sum_adult_40-47WKW', 'mean_adult_40-47WKW', 'max_adult_48-49WKW', 'count_adult_48-49WKW', 'sum_adult_48-49WKW', 'mean_adult_48-49WKW', 'mean_adult_50-52WKW', 'mean_adult_>40WKW', 'any_adult_nonzero_WKW', 'all_adult_nonzero_WKW', 'mean_adult_nonzero_WKW', '%_adult_nonzero_WKW', 'min_adult_any_WKW', 'max_adult_any_WKW', 'count_adult_any_WKW', 'sum_adult_any_WKW', 'mean_adult_any_WKW', 'min_65+_no_work', 'max_65+_no_work', 'sum_65+_no_work', 'mean_65+_no_work', '%_65+_no_work', 'max_65+_<14WKW', 'sum_65+_<14WKW', 'mean_65+_<14WKW', 'max_65+_14-26WKW', 'sum_65+_14-26WKW', 'mean_65+_14-26WKW', 'max_65+_27-39WKW', 'sum_65+_27-39WKW', 'mean_65+_27-39WKW', 'max_65+_40-47WKW', 'sum_65+_40-47WKW', 'mean_65+_40-47WKW', 'max_65+_48-49WKW', 'sum_65+_48-49WKW', 'mean_65+_48-49WKW', 'min_65+_50-52WKW', 'max_65+_50-52WKW', 'count_65+_50-52WKW', 'sum_65+_50-52WKW', 'mean_65+_50-52WKW', '%_65+_50-52WKW', 'min_65+_>40WKW', 'max_65+_>40WKW', 'count_65+_>40WKW', 'sum_65+_>40WKW', 'mean_65+_>40WKW', '%_65+_>40WKW', 'min_65+_nonzero_WKW', 'max_65+_nonzero_WKW', 'count_65+_nonzero_WKW', 'sum_65+_nonzero_WKW', 'mean_65+_nonzero_WKW', '%_65+_nonzero_WKW', 'any_65+_any_WKW', 'all_65+_any_WKW', 'min_65+_any_WKW', 'max_65+_any_WKW', 'count_65+_any_WKW', 'sum_65+_any_WKW', 'mean_65+_any_WKW', '%_65+_any_WKW', 'max_18-64_no_work', 'mean_18-64_no_work', 'max_18-64_<14WKW', 'count_18-64_<14WKW', 'sum_18-64_<14WKW', 'mean_18-64_<14WKW', 'any_18-64_14-26WKW', 'max_18-64_14-26WKW', 'count_18-64_14-26WKW', 'sum_18-64_14-26WKW', 'mean_18-64_14-26WKW', 'any_18-64_27-39WKW', 'max_18-64_27-39WKW', 'count_18-64_27-39WKW', 'sum_18-64_27-39WKW', 'mean_18-64_27-39WKW', 'any_18-64_40-47WKW', 'max_18-64_40-47WKW', 'count_18-64_40-47WKW', 'sum_18-64_40-47WKW', 'mean_18-64_40-47WKW', 'any_18-64_48-49WKW', 'min_18-64_48-49WKW', 'max_18-64_48-49WKW', 'count_18-64_48-49WKW', 'sum_18-64_48-49WKW', 'mean_18-64_48-49WKW', '%_18-64_48-49WKW', 'count_18-64_50-52WKW', 'mean_18-64_50-52WKW', 'count_18-64_>40WKW', 'mean_18-64_>40WKW', 'count_18-64_nonzero_WKW', 'mean_18-64_nonzero_WKW', 'any_18-64_any_WKW', 'all_18-64_any_WKW', 'min_18-64_any_WKW', 'max_18-64_any_WKW', 'count_18-64_any_WKW', 'sum_18-64_any_WKW', 'mean_18-64_any_WKW', '%_18-64_any_WKW', 'any_kid_no_work', 'all_kid_no_work', 'min_kid_no_work', 'max_kid_no_work', 'count_kid_no_work', 'sum_kid_no_work', 'mean_kid_no_work', '%_kid_no_work', 'max_kid_<14WKW', 'sum_kid_<14WKW', 'mean_kid_<14WKW', 'max_kid_14-26WKW', 'sum_kid_14-26WKW', 'mean_kid_14-26WKW', 'max_kid_27-39WKW', 'sum_kid_27-39WKW', 'mean_kid_27-39WKW', 'max_kid_40-47WKW', 'sum_kid_40-47WKW', 'mean_kid_40-47WKW', 'max_kid_50-52WKW', 'sum_kid_50-52WKW', 'mean_kid_50-52WKW', 'max_kid_>40WKW', 'sum_kid_>40WKW', 'mean_kid_>40WKW', 'max_kid_nonzero_WKW', 'sum_kid_nonzero_WKW', 'mean_kid_nonzero_WKW', 'any_kid_any_WKW', 'all_kid_any_WKW', 'min_kid_any_WKW', 'max_kid_any_WKW', 'count_kid_any_WKW', 'sum_kid_any_WKW', 'mean_kid_any_WKW', '%_kid_any_WKW', 'all_anyage_no_work', 'max_anyage_no_work', 'sum_anyage_no_work', 'mean_anyage_no_work', 'any_anyage_<14WKW', 'min_anyage_<14WKW', 'max_anyage_<14WKW', 'count_anyage_<14WKW', 'sum_anyage_<14WKW', 'mean_anyage_<14WKW', '%_anyage_<14WKW', 'any_anyage_14-26WKW', 'all_anyage_14-26WKW', 'min_anyage_14-26WKW', 'max_anyage_14-26WKW', 'count_anyage_14-26WKW', 'sum_anyage_14-26WKW', 'mean_anyage_14-26WKW', '%_anyage_14-26WKW', 'any_anyage_27-39WKW', 'min_anyage_27-39WKW', 'max_anyage_27-39WKW', 'count_anyage_27-39WKW', 'sum_anyage_27-39WKW', 'mean_anyage_27-39WKW', '%_anyage_27-39WKW', 'any_anyage_40-47WKW', 'min_anyage_40-47WKW', 'max_anyage_40-47WKW', 'count_anyage_40-47WKW', 'sum_anyage_40-47WKW', 'mean_anyage_40-47WKW', '%_anyage_40-47WKW', 'any_anyage_48-49WKW', 'min_anyage_48-49WKW', 'max_anyage_48-49WKW', 'count_anyage_48-49WKW', 'sum_anyage_48-49WKW', 'mean_anyage_48-49WKW', '%_anyage_48-49WKW', 'any_anyage_50-52WKW', 'min_anyage_50-52WKW', 'max_anyage_50-52WKW', 'count_anyage_50-52WKW', 'sum_anyage_50-52WKW', 'mean_anyage_50-52WKW', 'any_anyage_>40WKW', 'min_anyage_>40WKW', 'max_anyage_>40WKW', 'count_anyage_>40WKW', 'sum_anyage_>40WKW', 'mean_anyage_>40WKW', 'any_anyage_nonzero_WKW', 'all_anyage_nonzero_WKW', 'min_anyage_nonzero_WKW', 'max_anyage_nonzero_WKW', 'count_anyage_nonzero_WKW', 'sum_anyage_nonzero_WKW', 'mean_anyage_nonzero_WKW', '%_anyage_nonzero_WKW', 'min_anyage_any_WKW', 'max_anyage_any_WKW', 'count_anyage_any_WKW', 'sum_anyage_any_WKW', 'mean_anyage_any_WKW', 'any_adult_no_work_hrs', 'all_adult_no_work_hrs', 'min_adult_no_work_hrs', 'max_adult_no_work_hrs', 'count_adult_no_work_hrs', 'sum_adult_no_work_hrs', 'mean_adult_no_work_hrs', '%_adult_no_work_hrs', 'any_adult_<10_work_hrs', 'all_adult_<10_work_hrs', 'min_adult_<10_work_hrs', 'max_adult_<10_work_hrs', 'count_adult_<10_work_hrs', 'sum_adult_<10_work_hrs', 'mean_adult_<10_work_hrs', '%_adult_<10_work_hrs', 'any_adult_<15_work_hrs', 'all_adult_<15_work_hrs', 'min_adult_<15_work_hrs', 'max_adult_<15_work_hrs', 'count_adult_<15_work_hrs', 'sum_adult_<15_work_hrs', 'mean_adult_<15_work_hrs', '%_adult_<15_work_hrs', 'any_adult_<20_work_hrs', 'all_adult_<20_work_hrs', 'min_adult_<20_work_hrs', 'max_adult_<20_work_hrs', 'count_adult_<20_work_hrs', 'sum_adult_<20_work_hrs', 'mean_adult_<20_work_hrs', '%_adult_<20_work_hrs', 'sum_adult_<30_work_hrs', 'mean_adult_<30_work_hrs', 'mean_adult_<40_work_hrs', 'any_adult_50_plus_work_hrs', 'all_adult_50_plus_work_hrs', 'max_adult_50_plus_work_hrs', 'sum_adult_50_plus_work_hrs', 'mean_adult_50_plus_work_hrs', '%_adult_50_plus_work_hrs', 'any_adult_40_plus_work_hrs', 'all_adult_40_plus_work_hrs', 'max_adult_40_plus_work_hrs', 'mean_adult_40_plus_work_hrs', '%_adult_40_plus_work_hrs', 'min_adult_any_WKHP', 'max_adult_any_WKHP', 'count_adult_any_WKHP', 'sum_adult_any_WKHP', 'mean_adult_any_WKHP', 'any_65+_no_work_hrs', 'all_65+_no_work_hrs', 'min_65+_no_work_hrs', 'max_65+_no_work_hrs', 'count_65+_no_work_hrs', 'sum_65+_no_work_hrs', 'mean_65+_no_work_hrs', '%_65+_no_work_hrs', 'any_65+_<10_work_hrs', 'all_65+_<10_work_hrs', 'min_65+_<10_work_hrs', 'max_65+_<10_work_hrs', 'count_65+_<10_work_hrs', 'sum_65+_<10_work_hrs', 'mean_65+_<10_work_hrs', '%_65+_<10_work_hrs', 'any_65+_<15_work_hrs', 'all_65+_<15_work_hrs', 'min_65+_<15_work_hrs', 'max_65+_<15_work_hrs', 'count_65+_<15_work_hrs', 'sum_65+_<15_work_hrs', 'mean_65+_<15_work_hrs', '%_65+_<15_work_hrs', 'any_65+_<20_work_hrs', 'all_65+_<20_work_hrs', 'min_65+_<20_work_hrs', 'max_65+_<20_work_hrs', 'count_65+_<20_work_hrs', 'sum_65+_<20_work_hrs', 'mean_65+_<20_work_hrs', '%_65+_<20_work_hrs', 'any_65+_<30_work_hrs', 'all_65+_<30_work_hrs', 'min_65+_<30_work_hrs', 'max_65+_<30_work_hrs', 'count_65+_<30_work_hrs', 'sum_65+_<30_work_hrs', 'mean_65+_<30_work_hrs', '%_65+_<30_work_hrs', 'any_65+_<40_work_hrs', 'all_65+_<40_work_hrs', 'min_65+_<40_work_hrs', 'max_65+_<40_work_hrs', 'count_65+_<40_work_hrs', 'sum_65+_<40_work_hrs', 'mean_65+_<40_work_hrs', '%_65+_<40_work_hrs', 'any_65+_<50_work_hrs', 'all_65+_<50_work_hrs', 'min_65+_<50_work_hrs', 'max_65+_<50_work_hrs', 'count_65+_<50_work_hrs', 'sum_65+_<50_work_hrs', 'mean_65+_<50_work_hrs', '%_65+_<50_work_hrs', 'max_65+_50_plus_work_hrs', 'sum_65+_50_plus_work_hrs', 'mean_65+_50_plus_work_hrs', 'min_65+_40_plus_work_hrs', 'max_65+_40_plus_work_hrs', 'count_65+_40_plus_work_hrs', 'sum_65+_40_plus_work_hrs', 'mean_65+_40_plus_work_hrs', '%_65+_40_plus_work_hrs', 'any_65+_any_WKHP', 'all_65+_any_WKHP', 'min_65+_any_WKHP', 'max_65+_any_WKHP', 'count_65+_any_WKHP', 'sum_65+_any_WKHP', 'mean_65+_any_WKHP', '%_65+_any_WKHP', 'any_18-64_no_work_hrs', 'all_18-64_no_work_hrs', 'min_18-64_no_work_hrs', 'max_18-64_no_work_hrs', 'count_18-64_no_work_hrs', 'sum_18-64_no_work_hrs', 'mean_18-64_no_work_hrs', '%_18-64_no_work_hrs', 'any_18-64_<10_work_hrs', 'all_18-64_<10_work_hrs', 'min_18-64_<10_work_hrs', 'max_18-64_<10_work_hrs', 'count_18-64_<10_work_hrs', 'sum_18-64_<10_work_hrs', 'mean_18-64_<10_work_hrs', '%_18-64_<10_work_hrs', 'any_18-64_<15_work_hrs', 'all_18-64_<15_work_hrs', 'min_18-64_<15_work_hrs', 'max_18-64_<15_work_hrs', 'count_18-64_<15_work_hrs', 'sum_18-64_<15_work_hrs', 'mean_18-64_<15_work_hrs', '%_18-64_<15_work_hrs', 'any_18-64_<20_work_hrs', 'all_18-64_<20_work_hrs', 'min_18-64_<20_work_hrs', 'max_18-64_<20_work_hrs', 'count_18-64_<20_work_hrs', 'sum_18-64_<20_work_hrs', 'mean_18-64_<20_work_hrs', '%_18-64_<20_work_hrs', 'mean_18-64_<30_work_hrs', 'mean_18-64_<40_work_hrs', 'mean_18-64_<50_work_hrs', '%_18-64_<50_work_hrs', 'any_18-64_50_plus_work_hrs', 'all_18-64_50_plus_work_hrs', 'min_18-64_50_plus_work_hrs', 'max_18-64_50_plus_work_hrs', 'count_18-64_50_plus_work_hrs', 'sum_18-64_50_plus_work_hrs', 'mean_18-64_50_plus_work_hrs', '%_18-64_50_plus_work_hrs', 'max_18-64_40_plus_work_hrs', 'count_18-64_40_plus_work_hrs', 'mean_18-64_40_plus_work_hrs', 'any_18-64_any_WKHP', 'all_18-64_any_WKHP', 'min_18-64_any_WKHP', 'max_18-64_any_WKHP', 'count_18-64_any_WKHP', 'sum_18-64_any_WKHP', 'mean_18-64_any_WKHP', '%_18-64_any_WKHP', 'any_kid_no_work_hrs', 'all_kid_no_work_hrs', 'min_kid_no_work_hrs', 'max_kid_no_work_hrs', 'count_kid_no_work_hrs', 'sum_kid_no_work_hrs', 'mean_kid_no_work_hrs', '%_kid_no_work_hrs', 'any_kid_<10_work_hrs', 'all_kid_<10_work_hrs', 'min_kid_<10_work_hrs', 'max_kid_<10_work_hrs', 'count_kid_<10_work_hrs', 'sum_kid_<10_work_hrs', 'mean_kid_<10_work_hrs', '%_kid_<10_work_hrs', 'any_kid_<15_work_hrs', 'all_kid_<15_work_hrs', 'min_kid_<15_work_hrs', 'max_kid_<15_work_hrs', 'count_kid_<15_work_hrs', 'sum_kid_<15_work_hrs', 'mean_kid_<15_work_hrs', '%_kid_<15_work_hrs', 'any_kid_<20_work_hrs', 'all_kid_<20_work_hrs', 'min_kid_<20_work_hrs', 'max_kid_<20_work_hrs', 'count_kid_<20_work_hrs', 'sum_kid_<20_work_hrs', 'mean_kid_<20_work_hrs', '%_kid_<20_work_hrs', 'any_kid_<30_work_hrs', 'all_kid_<30_work_hrs', 'min_kid_<30_work_hrs', 'max_kid_<30_work_hrs', 'count_kid_<30_work_hrs', 'sum_kid_<30_work_hrs', 'mean_kid_<30_work_hrs', '%_kid_<30_work_hrs', 'any_kid_<40_work_hrs', 'all_kid_<40_work_hrs', 'min_kid_<40_work_hrs', 'max_kid_<40_work_hrs', 'count_kid_<40_work_hrs', 'sum_kid_<40_work_hrs', 'mean_kid_<40_work_hrs', '%_kid_<40_work_hrs', 'any_kid_<50_work_hrs', 'all_kid_<50_work_hrs', 'min_kid_<50_work_hrs', 'max_kid_<50_work_hrs', 'count_kid_<50_work_hrs', 'sum_kid_<50_work_hrs', 'mean_kid_<50_work_hrs', '%_kid_<50_work_hrs', 'max_kid_40_plus_work_hrs', 'sum_kid_40_plus_work_hrs', 'mean_kid_40_plus_work_hrs', 'any_kid_any_WKHP', 'all_kid_any_WKHP', 'min_kid_any_WKHP', 'max_kid_any_WKHP', 'count_kid_any_WKHP', 'sum_kid_any_WKHP', 'mean_kid_any_WKHP', '%_kid_any_WKHP', 'any_anyage_no_work_hrs', 'all_anyage_no_work_hrs', 'min_anyage_no_work_hrs', 'max_anyage_no_work_hrs', 'count_anyage_no_work_hrs', 'sum_anyage_no_work_hrs', 'mean_anyage_no_work_hrs', '%_anyage_no_work_hrs', 'any_anyage_<10_work_hrs', 'all_anyage_<10_work_hrs', 'min_anyage_<10_work_hrs', 'max_anyage_<10_work_hrs', 'count_anyage_<10_work_hrs', 'sum_anyage_<10_work_hrs', 'mean_anyage_<10_work_hrs', '%_anyage_<10_work_hrs', 'any_anyage_<15_work_hrs', 'all_anyage_<15_work_hrs', 'min_anyage_<15_work_hrs', 'max_anyage_<15_work_hrs', 'count_anyage_<15_work_hrs', 'sum_anyage_<15_work_hrs', 'mean_anyage_<15_work_hrs', '%_anyage_<15_work_hrs', 'any_anyage_<20_work_hrs', 'all_anyage_<20_work_hrs', 'min_anyage_<20_work_hrs', 'max_anyage_<20_work_hrs', 'count_anyage_<20_work_hrs', 'sum_anyage_<20_work_hrs', 'mean_anyage_<20_work_hrs', '%_anyage_<20_work_hrs', 'all_anyage_<30_work_hrs', 'min_anyage_<30_work_hrs', 'max_anyage_<30_work_hrs', 'count_anyage_<30_work_hrs', 'sum_anyage_<30_work_hrs', 'mean_anyage_<30_work_hrs', 'all_anyage_<40_work_hrs', 'max_anyage_<40_work_hrs', 'sum_anyage_<40_work_hrs', 'mean_anyage_<40_work_hrs', '%_anyage_<40_work_hrs', 'any_anyage_<50_work_hrs', 'all_anyage_<50_work_hrs', 'max_anyage_<50_work_hrs', 'count_anyage_<50_work_hrs', 'sum_anyage_<50_work_hrs', 'mean_anyage_<50_work_hrs', '%_anyage_<50_work_hrs', 'any_anyage_50_plus_work_hrs', 'all_anyage_50_plus_work_hrs', 'min_anyage_50_plus_work_hrs', 'max_anyage_50_plus_work_hrs', 'count_anyage_50_plus_work_hrs', 'sum_anyage_50_plus_work_hrs', 'mean_anyage_50_plus_work_hrs', '%_anyage_50_plus_work_hrs', 'any_anyage_40_plus_work_hrs', 'all_anyage_40_plus_work_hrs', 'min_anyage_40_plus_work_hrs', 'max_anyage_40_plus_work_hrs', 'count_anyage_40_plus_work_hrs', 'sum_anyage_40_plus_work_hrs', 'mean_anyage_40_plus_work_hrs', '%_anyage_40_plus_work_hrs', 'min_anyage_any_WKHP', 'max_anyage_any_WKHP', 'count_anyage_any_WKHP', 'sum_anyage_any_WKHP', 'mean_anyage_any_WKHP', 'max_adult_DIS', 'sum_adult_DIS', 'mean_adult_DIS', 'any_adult_not_DIS', 'all_adult_not_DIS', 'mean_adult_not_DIS', '%_adult_not_DIS', 'min_adult_any_DIS', 'max_adult_any_DIS', 'count_adult_any_DIS', 'sum_adult_any_DIS', 'mean_adult_any_DIS', 'min_65+_DIS', 'max_65+_DIS', 'count_65+_DIS', 'sum_65+_DIS', 'mean_65+_DIS', '%_65+_DIS', 'min_65+_not_DIS', 'max_65+_not_DIS', 'sum_65+_not_DIS', 'mean_65+_not_DIS', '%_65+_not_DIS', 'any_65+_any_DIS', 'all_65+_any_DIS', 'min_65+_any_DIS', 'max_65+_any_DIS', 'count_65+_any_DIS', 'sum_65+_any_DIS', 'mean_65+_any_DIS', '%_65+_any_DIS', 'min_18-64_DIS', 'max_18-64_DIS', 'sum_18-64_DIS', 'mean_18-64_DIS', 'mean_18-64_not_DIS', '%_18-64_not_DIS', 'any_18-64_any_DIS', 'all_18-64_any_DIS', 'min_18-64_any_DIS', 'max_18-64_any_DIS', 'count_18-64_any_DIS', 'sum_18-64_any_DIS', 'mean_18-64_any_DIS', '%_18-64_any_DIS', 'max_kid_DIS', 'mean_kid_DIS', 'any_kid_not_DIS', 'all_kid_not_DIS', 'min_kid_not_DIS', 'max_kid_not_DIS', 'count_kid_not_DIS', 'sum_kid_not_DIS', 'mean_kid_not_DIS', '%_kid_not_DIS', 'any_kid_any_DIS', 'all_kid_any_DIS', 'min_kid_any_DIS', 'max_kid_any_DIS', 'count_kid_any_DIS', 'sum_kid_any_DIS', 'mean_kid_any_DIS', '%_kid_any_DIS', 'any_anyage_DIS', 'all_anyage_DIS', 'min_anyage_DIS', 'max_anyage_DIS', 'count_anyage_DIS', 'sum_anyage_DIS', 'mean_anyage_DIS', '%_anyage_DIS', 'any_anyage_not_DIS', 'all_anyage_not_DIS', 'max_anyage_not_DIS', 'sum_anyage_not_DIS', '%_anyage_not_DIS', 'min_anyage_any_DIS', 'max_anyage_any_DIS', 'count_anyage_any_DIS', 'sum_anyage_any_DIS', 'mean_anyage_any_DIS', 'all_adult_NP1', 'max_adult_NP1', 'count_adult_NP1', 'sum_adult_NP1', 'mean_adult_NP1', '%_adult_NP1', 'all_adult_NP2', 'max_adult_NP2', 'count_adult_NP2', 'sum_adult_NP2', 'mean_adult_NP2', '%_adult_NP2', 'all_adult_NP3', 'count_adult_NP3', 'sum_adult_NP3', 'mean_adult_NP3', '%_adult_NP3', 'all_adult_NP4', 'max_adult_NP4', 'sum_adult_NP4', 'mean_adult_NP4', '%_adult_NP4', 'all_adult_NP5', 'max_adult_NP5', 'sum_adult_NP5', 'mean_adult_NP5', '%_adult_NP5', 'all_adult_NP>5', 'sum_adult_NP>5', 'mean_adult_NP>5', '%_adult_NP>5', 'all_adult_NP>6', 'max_adult_NP>6', 'sum_adult_NP>6', 'mean_adult_NP>6', '%_adult_NP>6', 'all_adult_NP>8', 'max_adult_NP>8', 'sum_adult_NP>8', 'mean_adult_NP>8', '%_adult_NP>8', 'sum_adult_NP>10', 'mean_adult_NP>10', 'sum_adult_NP>12', 'mean_adult_NP>12', 'min_adult_anyNP', 'max_adult_anyNP', 'count_adult_anyNP', 'sum_adult_anyNP', 'mean_adult_anyNP', 'all_65+_NP1', 'min_65+_NP1', 'max_65+_NP1', 'count_65+_NP1', 'sum_65+_NP1', 'mean_65+_NP1', '%_65+_NP1', 'all_65+_NP2', 'min_65+_NP2', 'max_65+_NP2', 'sum_65+_NP2', 'mean_65+_NP2', '%_65+_NP2', 'all_65+_NP3', 'min_65+_NP3', 'max_65+_NP3', 'sum_65+_NP3', 'mean_65+_NP3', '%_65+_NP3', 'all_65+_NP4', 'min_65+_NP4', 'max_65+_NP4', 'sum_65+_NP4', 'mean_65+_NP4', '%_65+_NP4', 'all_65+_NP5', 'min_65+_NP5', 'max_65+_NP5', 'sum_65+_NP5', 'mean_65+_NP5', '%_65+_NP5', 'all_65+_NP>5', 'min_65+_NP>5', 'max_65+_NP>5', 'sum_65+_NP>5', 'mean_65+_NP>5', '%_65+_NP>5', 'max_65+_NP>6', 'sum_65+_NP>6', 'mean_65+_NP>6', 'max_65+_NP>8', 'mean_65+_NP>8', 'max_65+_NP>10', 'mean_65+_NP>10', 'max_65+_NP>12', 'sum_65+_NP>12', 'mean_65+_NP>12', 'any_65+_anyNP', 'all_65+_anyNP', 'min_65+_anyNP', 'max_65+_anyNP', 'count_65+_anyNP', 'sum_65+_anyNP', 'mean_65+_anyNP', '%_65+_anyNP', 'all_18-64_NP1', 'min_18-64_NP1', 'max_18-64_NP1', 'count_18-64_NP1', 'sum_18-64_NP1', 'mean_18-64_NP1', '%_18-64_NP1', 'all_18-64_NP2', 'max_18-64_NP2', 'sum_18-64_NP2', 'mean_18-64_NP2', '%_18-64_NP2', 'any_18-64_NP3', 'all_18-64_NP3', 'min_18-64_NP3', 'max_18-64_NP3', 'sum_18-64_NP3', 'mean_18-64_NP3', '%_18-64_NP3', 'any_18-64_NP4', 'all_18-64_NP4', 'min_18-64_NP4', 'max_18-64_NP4', 'count_18-64_NP4', 'sum_18-64_NP4', 'mean_18-64_NP4', '%_18-64_NP4', 'any_18-64_NP5', 'all_18-64_NP5', 'min_18-64_NP5', 'max_18-64_NP5', 'count_18-64_NP5', 'sum_18-64_NP5', 'mean_18-64_NP5', '%_18-64_NP5', 'any_18-64_NP>5', 'all_18-64_NP>5', 'max_18-64_NP>5', 'count_18-64_NP>5', 'sum_18-64_NP>5', 'mean_18-64_NP>5', '%_18-64_NP>5', 'any_18-64_NP>6', 'all_18-64_NP>6', 'min_18-64_NP>6', 'max_18-64_NP>6', 'count_18-64_NP>6', 'sum_18-64_NP>6', 'mean_18-64_NP>6', '%_18-64_NP>6', 'max_18-64_NP>8', 'count_18-64_NP>8', 'sum_18-64_NP>8', 'mean_18-64_NP>8', 'min_18-64_NP>10', 'max_18-64_NP>10', 'count_18-64_NP>10', 'sum_18-64_NP>10', 'mean_18-64_NP>10', 'min_18-64_NP>12', 'max_18-64_NP>12', 'count_18-64_NP>12', 'sum_18-64_NP>12', 'mean_18-64_NP>12', 'any_18-64_anyNP', 'all_18-64_anyNP', 'min_18-64_anyNP', 'max_18-64_anyNP', 'count_18-64_anyNP', 'sum_18-64_anyNP', 'mean_18-64_anyNP', '%_18-64_anyNP', 'max_kid_NP1', 'sum_kid_NP1', 'mean_kid_NP1', 'all_kid_NP2', 'max_kid_NP2', 'count_kid_NP2', 'sum_kid_NP2', 'mean_kid_NP2', '%_kid_NP2', 'max_kid_NP3', 'count_kid_NP3', 'sum_kid_NP3', 'mean_kid_NP3', '%_kid_NP3', 'all_kid_NP4', 'count_kid_NP4', 'sum_kid_NP4', 'mean_kid_NP4', '%_kid_NP4', 'all_kid_NP5', 'mean_kid_NP5', '%_kid_NP5', 'all_kid_NP>5', 'mean_kid_NP>5', '%_kid_NP>5', 'all_kid_NP>6', 'mean_kid_NP>6', '%_kid_NP>6', 'sum_kid_NP>8', 'mean_kid_NP>8', 'mean_kid_NP>10', 'sum_kid_NP>12', 'mean_kid_NP>12', 'any_kid_anyNP', 'all_kid_anyNP', 'min_kid_anyNP', 'max_kid_anyNP', 'count_kid_anyNP', 'sum_kid_anyNP', 'mean_kid_anyNP', '%_kid_anyNP', 'any_anyage_NP1', 'all_anyage_NP1', 'min_anyage_NP1', 'max_anyage_NP1', 'count_anyage_NP1', 'sum_anyage_NP1', 'mean_anyage_NP1', '%_anyage_NP1', 'any_anyage_NP2', 'all_anyage_NP2', 'min_anyage_NP2', 'max_anyage_NP2', 'count_anyage_NP2', 'sum_anyage_NP2', 'mean_anyage_NP2', '%_anyage_NP2', 'any_anyage_NP3', 'all_anyage_NP3', 'max_anyage_NP3', 'count_anyage_NP3', 'sum_anyage_NP3', 'mean_anyage_NP3', '%_anyage_NP3', 'any_anyage_NP4', 'all_anyage_NP4', 'max_anyage_NP4', 'count_anyage_NP4', 'sum_anyage_NP4', 'mean_anyage_NP4', '%_anyage_NP4', 'any_anyage_NP5', 'all_anyage_NP5', 'max_anyage_NP5', 'sum_anyage_NP5', 'mean_anyage_NP5', '%_anyage_NP5', 'any_anyage_NP>5', 'all_anyage_NP>5', 'max_anyage_NP>5', 'sum_anyage_NP>5', 'mean_anyage_NP>5', '%_anyage_NP>5', 'any_anyage_NP>6', 'all_anyage_NP>6', 'max_anyage_NP>6', 'sum_anyage_NP>6', 'mean_anyage_NP>6', '%_anyage_NP>6', 'any_anyage_NP>8', 'all_anyage_NP>8', 'max_anyage_NP>8', 'sum_anyage_NP>8', 'mean_anyage_NP>8', '%_anyage_NP>8', 'max_anyage_NP>10', 'sum_anyage_NP>10', 'mean_anyage_NP>10', 'min_anyage_NP>12', 'max_anyage_NP>12', 'count_anyage_NP>12', 'sum_anyage_NP>12', 'mean_anyage_NP>12', 'min_anyage_anyNP', 'max_anyage_anyNP', 'count_anyage_anyNP', 'sum_anyage_anyNP', 'mean_anyage_anyNP', 'count_adult_work_trans', 'all_65+_work_trans', 'count_65+_work_trans', 'sum_65+_work_trans', 'mean_65+_work_trans', '%_65+_work_trans', 'all_18-64_work_trans', 'count_18-64_work_trans', 'sum_18-64_work_trans', '%_18-64_work_trans', 'all_kid_work_trans', 'count_kid_work_trans', 'sum_kid_work_trans', '%_kid_work_trans', 'any_anyage_work_trans', 'max_anyage_work_trans', 'count_anyage_work_trans', 'sum_anyage_work_trans', 'mean_anyage_work_trans', 'max_adult_WAG0', 'sum_adult_WAG0', 'mean_adult_WAG0', 'sum_adult_WAG<10', 'mean_adult_WAG<10', 'min_adult_WAG<15', 'max_adult_WAG<15', 'sum_adult_WAG<15', 'mean_adult_WAG<15', 'min_adult_WAG<20', 'max_adult_WAG<20', 'count_adult_WAG<20', 'sum_adult_WAG<20', 'mean_adult_WAG<20', 'min_adult_WAG<25', 'max_adult_WAG<25', 'count_adult_WAG<25', 'sum_adult_WAG<25', 'mean_adult_WAG<25', 'min_adult_WAG<30', 'max_adult_WAG<30', 'count_adult_WAG<30', 'sum_adult_WAG<30', 'mean_adult_WAG<30', 'min_adult_WAG<35', 'max_adult_WAG<35', 'count_adult_WAG<35', 'sum_adult_WAG<35', 'mean_adult_WAG<35', 'min_adult_WAG<40', 'max_adult_WAG<40', 'count_adult_WAG<40', 'sum_adult_WAG<40', 'mean_adult_WAG<40', 'min_adult_WAG<45', 'max_adult_WAG<45', 'count_adult_WAG<45', 'sum_adult_WAG<45', 'mean_adult_WAG<45', 'min_adult_WAG<50', 'max_adult_WAG<50', 'count_adult_WAG<50', 'sum_adult_WAG<50', 'mean_adult_WAG<50', 'max_adult_WAG<60', 'count_adult_WAG<60', 'sum_adult_WAG<60', 'mean_adult_WAG<60', 'max_adult_WAG<70', 'count_adult_WAG<70', 'sum_adult_WAG<70', 'mean_adult_WAG<70', 'min_adult_WAG<80', 'max_adult_WAG<80', 'count_adult_WAG<80', 'sum_adult_WAG<80', 'mean_adult_WAG<80', 'min_adult_WAG_any', 'max_adult_WAG_any', 'count_adult_WAG_any', 'sum_adult_WAG_any', 'mean_adult_WAG_any', 'any_65+_WAG0', 'all_65+_WAG0', 'min_65+_WAG0', 'max_65+_WAG0', 'count_65+_WAG0', 'sum_65+_WAG0', 'mean_65+_WAG0', '%_65+_WAG0', 'any_65+_WAG<10', 'all_65+_WAG<10', 'min_65+_WAG<10', 'max_65+_WAG<10', 'count_65+_WAG<10', 'sum_65+_WAG<10', 'mean_65+_WAG<10', '%_65+_WAG<10', 'any_65+_WAG<15', 'all_65+_WAG<15', 'min_65+_WAG<15', 'max_65+_WAG<15', 'count_65+_WAG<15', 'sum_65+_WAG<15', 'mean_65+_WAG<15', '%_65+_WAG<15', 'any_65+_WAG<20', 'all_65+_WAG<20', 'min_65+_WAG<20', 'max_65+_WAG<20', 'count_65+_WAG<20', 'sum_65+_WAG<20', 'mean_65+_WAG<20', '%_65+_WAG<20', 'any_65+_WAG<25', 'all_65+_WAG<25', 'min_65+_WAG<25', 'max_65+_WAG<25', 'count_65+_WAG<25', 'sum_65+_WAG<25', 'mean_65+_WAG<25', '%_65+_WAG<25', 'any_65+_WAG<30', 'all_65+_WAG<30', 'min_65+_WAG<30', 'max_65+_WAG<30', 'count_65+_WAG<30', 'sum_65+_WAG<30', 'mean_65+_WAG<30', '%_65+_WAG<30', 'any_65+_WAG<35', 'all_65+_WAG<35', 'min_65+_WAG<35', 'max_65+_WAG<35', 'count_65+_WAG<35', 'sum_65+_WAG<35', 'mean_65+_WAG<35', '%_65+_WAG<35', 'any_65+_WAG<40', 'all_65+_WAG<40', 'min_65+_WAG<40', 'max_65+_WAG<40', 'count_65+_WAG<40', 'sum_65+_WAG<40', 'mean_65+_WAG<40', '%_65+_WAG<40', 'any_65+_WAG<45', 'all_65+_WAG<45', 'min_65+_WAG<45', 'max_65+_WAG<45', 'count_65+_WAG<45', 'sum_65+_WAG<45', 'mean_65+_WAG<45', '%_65+_WAG<45', 'any_65+_WAG<50', 'all_65+_WAG<50', 'min_65+_WAG<50', 'max_65+_WAG<50', 'count_65+_WAG<50', 'sum_65+_WAG<50', 'mean_65+_WAG<50', '%_65+_WAG<50', 'any_65+_WAG<60', 'all_65+_WAG<60', 'min_65+_WAG<60', 'max_65+_WAG<60', 'count_65+_WAG<60', 'sum_65+_WAG<60', 'mean_65+_WAG<60', '%_65+_WAG<60', 'any_65+_WAG<70', 'all_65+_WAG<70', 'min_65+_WAG<70', 'max_65+_WAG<70', 'count_65+_WAG<70', 'sum_65+_WAG<70', 'mean_65+_WAG<70', '%_65+_WAG<70', 'any_65+_WAG<80', 'all_65+_WAG<80', 'min_65+_WAG<80', 'max_65+_WAG<80', 'count_65+_WAG<80', 'sum_65+_WAG<80', 'mean_65+_WAG<80', '%_65+_WAG<80', 'any_65+_WAG_any', 'all_65+_WAG_any', 'min_65+_WAG_any', 'max_65+_WAG_any', 'count_65+_WAG_any', 'sum_65+_WAG_any', 'mean_65+_WAG_any', '%_65+_WAG_any', 'max_18-64_WAG0', 'mean_18-64_WAG0', 'mean_18-64_WAG<10', 'mean_18-64_WAG<15', 'count_18-64_WAG<20', 'sum_18-64_WAG<20', 'mean_18-64_WAG<20', 'count_18-64_WAG<25', 'sum_18-64_WAG<25', 'mean_18-64_WAG<25', 'max_18-64_WAG<30', 'count_18-64_WAG<30', 'sum_18-64_WAG<30', 'mean_18-64_WAG<30', 'max_18-64_WAG<35', 'count_18-64_WAG<35', 'sum_18-64_WAG<35', 'mean_18-64_WAG<35', 'max_18-64_WAG<40', 'count_18-64_WAG<40', 'sum_18-64_WAG<40', 'mean_18-64_WAG<40', 'any_18-64_WAG<45', 'max_18-64_WAG<45', 'count_18-64_WAG<45', 'sum_18-64_WAG<45', 'mean_18-64_WAG<45', 'any_18-64_WAG<50', 'min_18-64_WAG<50', 'max_18-64_WAG<50', 'count_18-64_WAG<50', 'sum_18-64_WAG<50', 'mean_18-64_WAG<50', '%_18-64_WAG<50', 'count_18-64_WAG<60', 'sum_18-64_WAG<60', 'mean_18-64_WAG<60', 'count_18-64_WAG<70', 'sum_18-64_WAG<70', 'mean_18-64_WAG<70', 'max_18-64_WAG<80', 'count_18-64_WAG<80', 'sum_18-64_WAG<80', 'mean_18-64_WAG<80', 'any_18-64_WAG_any', 'all_18-64_WAG_any', 'min_18-64_WAG_any', 'max_18-64_WAG_any', 'count_18-64_WAG_any', 'sum_18-64_WAG_any', 'mean_18-64_WAG_any', '%_18-64_WAG_any', 'any_kid_WAG0', 'all_kid_WAG0', 'min_kid_WAG0', 'max_kid_WAG0', 'count_kid_WAG0', 'sum_kid_WAG0', 'mean_kid_WAG0', '%_kid_WAG0', 'any_kid_WAG<10', 'all_kid_WAG<10', 'min_kid_WAG<10', 'max_kid_WAG<10', 'count_kid_WAG<10', 'sum_kid_WAG<10', 'mean_kid_WAG<10', '%_kid_WAG<10', 'any_kid_WAG<15', 'all_kid_WAG<15', 'min_kid_WAG<15', 'max_kid_WAG<15', 'count_kid_WAG<15', 'sum_kid_WAG<15', 'mean_kid_WAG<15', '%_kid_WAG<15', 'any_kid_WAG<20', 'all_kid_WAG<20', 'min_kid_WAG<20', 'max_kid_WAG<20', 'count_kid_WAG<20', 'sum_kid_WAG<20', 'mean_kid_WAG<20', '%_kid_WAG<20', 'any_kid_WAG<25', 'all_kid_WAG<25', 'min_kid_WAG<25', 'max_kid_WAG<25', 'count_kid_WAG<25', 'sum_kid_WAG<25', 'mean_kid_WAG<25', '%_kid_WAG<25', 'any_kid_WAG<30', 'all_kid_WAG<30', 'min_kid_WAG<30', 'max_kid_WAG<30', 'count_kid_WAG<30', 'sum_kid_WAG<30', 'mean_kid_WAG<30', '%_kid_WAG<30', 'any_kid_WAG<35', 'all_kid_WAG<35', 'min_kid_WAG<35', 'max_kid_WAG<35', 'count_kid_WAG<35', 'sum_kid_WAG<35', 'mean_kid_WAG<35', '%_kid_WAG<35', 'any_kid_WAG<40', 'all_kid_WAG<40', 'min_kid_WAG<40', 'max_kid_WAG<40', 'count_kid_WAG<40', 'sum_kid_WAG<40', 'mean_kid_WAG<40', '%_kid_WAG<40', 'any_kid_WAG<45', 'all_kid_WAG<45', 'min_kid_WAG<45', 'max_kid_WAG<45', 'count_kid_WAG<45', 'sum_kid_WAG<45', 'mean_kid_WAG<45', '%_kid_WAG<45', 'any_kid_WAG<50', 'all_kid_WAG<50', 'min_kid_WAG<50', 'max_kid_WAG<50', 'count_kid_WAG<50', 'sum_kid_WAG<50', 'mean_kid_WAG<50', '%_kid_WAG<50', 'any_kid_WAG<60', 'all_kid_WAG<60', 'min_kid_WAG<60', 'max_kid_WAG<60', 'count_kid_WAG<60', 'sum_kid_WAG<60', 'mean_kid_WAG<60', '%_kid_WAG<60', 'any_kid_WAG<70', 'all_kid_WAG<70', 'min_kid_WAG<70', 'max_kid_WAG<70', 'count_kid_WAG<70', 'sum_kid_WAG<70', 'mean_kid_WAG<70', '%_kid_WAG<70', 'any_kid_WAG<80', 'all_kid_WAG<80', 'min_kid_WAG<80', 'max_kid_WAG<80', 'count_kid_WAG<80', 'sum_kid_WAG<80', 'mean_kid_WAG<80', '%_kid_WAG<80', 'any_kid_WAG_any', 'all_kid_WAG_any', 'min_kid_WAG_any', 'max_kid_WAG_any', 'count_kid_WAG_any', 'sum_kid_WAG_any', 'mean_kid_WAG_any', '%_kid_WAG_any', 'all_anyage_WAG0', 'min_anyage_WAG0', 'max_anyage_WAG0', 'count_anyage_WAG0', 'sum_anyage_WAG0', 'mean_anyage_WAG0', 'all_anyage_WAG<10', 'max_anyage_WAG<10', 'count_anyage_WAG<10', 'sum_anyage_WAG<10', 'mean_anyage_WAG<10', 'all_anyage_WAG<15', 'min_anyage_WAG<15', 'max_anyage_WAG<15', 'count_anyage_WAG<15', 'sum_anyage_WAG<15', 'mean_anyage_WAG<15', 'all_anyage_WAG<20', 'min_anyage_WAG<20', 'max_anyage_WAG<20', 'count_anyage_WAG<20', 'sum_anyage_WAG<20', 'mean_anyage_WAG<20', 'all_anyage_WAG<25', 'min_anyage_WAG<25', 'max_anyage_WAG<25', 'count_anyage_WAG<25', 'sum_anyage_WAG<25', 'mean_anyage_WAG<25', '%_anyage_WAG<25', 'all_anyage_WAG<30', 'min_anyage_WAG<30', 'max_anyage_WAG<30', 'count_anyage_WAG<30', 'sum_anyage_WAG<30', 'mean_anyage_WAG<30', '%_anyage_WAG<30', 'all_anyage_WAG<35', 'min_anyage_WAG<35', 'max_anyage_WAG<35', 'count_anyage_WAG<35', 'sum_anyage_WAG<35', 'mean_anyage_WAG<35', '%_anyage_WAG<35', 'all_anyage_WAG<40', 'min_anyage_WAG<40', 'max_anyage_WAG<40', 'count_anyage_WAG<40', 'sum_anyage_WAG<40', 'mean_anyage_WAG<40', '%_anyage_WAG<40', 'all_anyage_WAG<45', 'min_anyage_WAG<45', 'max_anyage_WAG<45', 'count_anyage_WAG<45', 'sum_anyage_WAG<45', 'mean_anyage_WAG<45', '%_anyage_WAG<45', 'all_anyage_WAG<50', 'min_anyage_WAG<50', 'max_anyage_WAG<50', 'count_anyage_WAG<50', 'sum_anyage_WAG<50', 'mean_anyage_WAG<50', '%_anyage_WAG<50', 'all_anyage_WAG<60', 'min_anyage_WAG<60', 'max_anyage_WAG<60', 'count_anyage_WAG<60', 'sum_anyage_WAG<60', 'mean_anyage_WAG<60', '%_anyage_WAG<60', 'all_anyage_WAG<70', 'min_anyage_WAG<70', 'max_anyage_WAG<70', 'count_anyage_WAG<70', 'sum_anyage_WAG<70', 'mean_anyage_WAG<70', '%_anyage_WAG<70', 'all_anyage_WAG<80', 'min_anyage_WAG<80', 'max_anyage_WAG<80', 'count_anyage_WAG<80', 'sum_anyage_WAG<80', 'mean_anyage_WAG<80', '%_anyage_WAG<80', 'min_anyage_WAG_any', 'max_anyage_WAG_any', 'count_anyage_WAG_any', 'sum_anyage_WAG_any', 'mean_anyage_WAG_any', 'max_adult_INT1q', 'sum_adult_INT1q', 'mean_adult_INT1q', 'max_adult_INT2q', 'count_adult_INT2q', 'sum_adult_INT2q', 'mean_adult_INT2q', 'min_adult_INT3q', 'max_adult_INT3q', 'count_adult_INT3q', 'sum_adult_INT3q', 'mean_adult_INT3q', 'min_adult_INT4q', 'max_adult_INT4q', 'count_adult_INT4q', 'sum_adult_INT4q', 'mean_adult_INT4q', 'min_adult_INT_any', 'max_adult_INT_any', 'count_adult_INT_any', 'sum_adult_INT_any', 'mean_adult_INT_any', 'all_65+_INT0', 'min_65+_INT0', 'max_65+_INT0', 'sum_65+_INT0', 'mean_65+_INT0', '%_65+_INT0', 'min_65+_INT1q', 'max_65+_INT1q', 'count_65+_INT1q', 'sum_65+_INT1q', 'mean_65+_INT1q', '%_65+_INT1q', 'min_65+_INT2q', 'max_65+_INT2q', 'count_65+_INT2q', 'sum_65+_INT2q', 'mean_65+_INT2q', '%_65+_INT2q', 'min_65+_INT3q', 'max_65+_INT3q', 'count_65+_INT3q', 'sum_65+_INT3q', 'mean_65+_INT3q', '%_65+_INT3q', 'min_65+_INT4q', 'max_65+_INT4q', 'count_65+_INT4q', 'sum_65+_INT4q', 'mean_65+_INT4q', '%_65+_INT4q', 'any_65+_INT_any', 'all_65+_INT_any', 'min_65+_INT_any', 'max_65+_INT_any', 'count_65+_INT_any', 'sum_65+_INT_any', 'mean_65+_INT_any', '%_65+_INT_any', 'mean_18-64_INT0', '%_18-64_INT0', 'min_18-64_INT1q', 'max_18-64_INT1q', 'sum_18-64_INT1q', 'mean_18-64_INT1q', 'min_18-64_INT2q', 'max_18-64_INT2q', 'count_18-64_INT2q', 'sum_18-64_INT2q', 'mean_18-64_INT2q', 'min_18-64_INT3q', 'max_18-64_INT3q', 'count_18-64_INT3q', 'sum_18-64_INT3q', 'mean_18-64_INT3q', 'min_18-64_INT4q', 'max_18-64_INT4q', 'count_18-64_INT4q', 'sum_18-64_INT4q', 'mean_18-64_INT4q', 'any_18-64_INT_any', 'all_18-64_INT_any', 'min_18-64_INT_any', 'max_18-64_INT_any', 'count_18-64_INT_any', 'sum_18-64_INT_any', 'mean_18-64_INT_any', '%_18-64_INT_any', 'any_kid_INT0', 'all_kid_INT0', 'min_kid_INT0', 'max_kid_INT0', 'count_kid_INT0', 'sum_kid_INT0', 'mean_kid_INT0', '%_kid_INT0', 'max_kid_INT1q', 'sum_kid_INT1q', 'mean_kid_INT1q', 'max_kid_INT2q', 'sum_kid_INT2q', 'mean_kid_INT2q', 'max_kid_INT3q', 'sum_kid_INT3q', 'mean_kid_INT3q', 'any_kid_INT_any', 'all_kid_INT_any', 'min_kid_INT_any', 'max_kid_INT_any', 'count_kid_INT_any', 'sum_kid_INT_any', 'mean_kid_INT_any', '%_kid_INT_any', 'all_anyage_INT0', 'max_anyage_INT0', 'count_anyage_INT0', 'sum_anyage_INT0', '%_anyage_INT0', 'any_anyage_INT1q', 'all_anyage_INT1q', 'min_anyage_INT1q', 'max_anyage_INT1q', 'count_anyage_INT1q', 'sum_anyage_INT1q', 'mean_anyage_INT1q', '%_anyage_INT1q', 'any_anyage_INT2q', 'all_anyage_INT2q', 'min_anyage_INT2q', 'max_anyage_INT2q', 'count_anyage_INT2q', 'sum_anyage_INT2q', 'mean_anyage_INT2q', '%_anyage_INT2q', 'any_anyage_INT3q', 'all_anyage_INT3q', 'min_anyage_INT3q', 'max_anyage_INT3q', 'count_anyage_INT3q', 'sum_anyage_INT3q', 'mean_anyage_INT3q', '%_anyage_INT3q', 'any_anyage_INT4q', 'all_anyage_INT4q', 'min_anyage_INT4q', 'max_anyage_INT4q', 'count_anyage_INT4q', 'sum_anyage_INT4q', 'mean_anyage_INT4q', '%_anyage_INT4q', 'min_anyage_INT_any', 'max_anyage_INT_any', 'count_anyage_INT_any', 'sum_anyage_INT_any', 'mean_anyage_INT_any', 'sum_adult_SEMP0', 'max_adult_SEMP1q', 'count_adult_SEMP1q', 'sum_adult_SEMP1q', 'mean_adult_SEMP1q', 'min_adult_SEMP2q', 'max_adult_SEMP2q', 'count_adult_SEMP2q', 'sum_adult_SEMP2q', 'mean_adult_SEMP2q', 'min_adult_SEMP3q', 'max_adult_SEMP3q', 'count_adult_SEMP3q', 'sum_adult_SEMP3q', 'mean_adult_SEMP3q', 'min_adult_SEMP4q', 'max_adult_SEMP4q', 'count_adult_SEMP4q', 'sum_adult_SEMP4q', 'mean_adult_SEMP4q', 'min_adult_SEMP_any', 'max_adult_SEMP_any', 'count_adult_SEMP_any', 'sum_adult_SEMP_any', 'mean_adult_SEMP_any', 'any_65+_SEMP0', 'all_65+_SEMP0', 'min_65+_SEMP0', 'max_65+_SEMP0', 'count_65+_SEMP0', 'sum_65+_SEMP0', 'mean_65+_SEMP0', '%_65+_SEMP0', 'max_65+_SEMP1q', 'sum_65+_SEMP1q', 'mean_65+_SEMP1q', 'max_65+_SEMP2q', 'sum_65+_SEMP2q', 'mean_65+_SEMP2q', 'max_65+_SEMP3q', 'sum_65+_SEMP3q', 'mean_65+_SEMP3q', 'max_65+_SEMP4q', 'sum_65+_SEMP4q', 'mean_65+_SEMP4q', 'any_65+_SEMP_any', 'all_65+_SEMP_any', 'min_65+_SEMP_any', 'max_65+_SEMP_any', 'count_65+_SEMP_any', 'sum_65+_SEMP_any', 'mean_65+_SEMP_any', '%_65+_SEMP_any', 'count_18-64_SEMP0', 'sum_18-64_SEMP0', 'mean_18-64_SEMP0', '%_18-64_SEMP0', 'min_18-64_SEMP1q', 'max_18-64_SEMP1q', 'count_18-64_SEMP1q', 'sum_18-64_SEMP1q', 'mean_18-64_SEMP1q', 'min_18-64_SEMP2q', 'max_18-64_SEMP2q', 'count_18-64_SEMP2q', 'sum_18-64_SEMP2q', 'mean_18-64_SEMP2q', 'any_18-64_SEMP3q', 'min_18-64_SEMP3q', 'max_18-64_SEMP3q', 'count_18-64_SEMP3q', 'sum_18-64_SEMP3q', 'mean_18-64_SEMP3q', 'min_18-64_SEMP4q', 'max_18-64_SEMP4q', 'count_18-64_SEMP4q', 'sum_18-64_SEMP4q', 'mean_18-64_SEMP4q', 'any_18-64_SEMP_any', 'all_18-64_SEMP_any', 'min_18-64_SEMP_any', 'max_18-64_SEMP_any', 'count_18-64_SEMP_any', 'sum_18-64_SEMP_any', 'mean_18-64_SEMP_any', '%_18-64_SEMP_any', 'any_kid_SEMP0', 'all_kid_SEMP0', 'min_kid_SEMP0', 'max_kid_SEMP0', 'count_kid_SEMP0', 'sum_kid_SEMP0', 'mean_kid_SEMP0', '%_kid_SEMP0', 'max_kid_SEMP1q', 'sum_kid_SEMP1q', 'mean_kid_SEMP1q', 'any_kid_SEMP_any', 'all_kid_SEMP_any', 'min_kid_SEMP_any', 'max_kid_SEMP_any', 'count_kid_SEMP_any', 'sum_kid_SEMP_any', 'mean_kid_SEMP_any', '%_kid_SEMP_any', 'all_anyage_SEMP0', 'max_anyage_SEMP0', 'count_anyage_SEMP0', 'sum_anyage_SEMP0', '%_anyage_SEMP0', 'any_anyage_SEMP1q', 'min_anyage_SEMP1q', 'max_anyage_SEMP1q', 'count_anyage_SEMP1q', 'sum_anyage_SEMP1q', 'mean_anyage_SEMP1q', 'any_anyage_SEMP2q', 'min_anyage_SEMP2q', 'max_anyage_SEMP2q', 'count_anyage_SEMP2q', 'sum_anyage_SEMP2q', 'mean_anyage_SEMP2q', '%_anyage_SEMP2q', 'any_anyage_SEMP3q', 'min_anyage_SEMP3q', 'max_anyage_SEMP3q', 'count_anyage_SEMP3q', 'sum_anyage_SEMP3q', 'mean_anyage_SEMP3q', 'any_anyage_SEMP4q', 'min_anyage_SEMP4q', 'max_anyage_SEMP4q', 'count_anyage_SEMP4q', 'sum_anyage_SEMP4q', 'mean_anyage_SEMP4q', '%_anyage_SEMP4q', 'min_anyage_SEMP_any', 'max_anyage_SEMP_any', 'count_anyage_SEMP_any', 'sum_anyage_SEMP_any', 'mean_anyage_SEMP_any', 'mean_adult_SSP0', 'min_adult_SSP1q', 'max_adult_SSP1q', 'count_adult_SSP1q', 'sum_adult_SSP1q', 'mean_adult_SSP1q', 'min_adult_SSP2q', 'max_adult_SSP2q', 'count_adult_SSP2q', 'sum_adult_SSP2q', 'mean_adult_SSP2q', 'min_adult_SSP3q', 'max_adult_SSP3q', 'count_adult_SSP3q', 'sum_adult_SSP3q', 'mean_adult_SSP3q', 'min_adult_SSP4q', 'max_adult_SSP4q', 'count_adult_SSP4q', 'sum_adult_SSP4q', 'mean_adult_SSP4q', 'min_adult_SSP_any', 'max_adult_SSP_any', 'count_adult_SSP_any', 'sum_adult_SSP_any', 'mean_adult_SSP_any', 'min_65+_SSP0', 'max_65+_SSP0', 'count_65+_SSP0', 'sum_65+_SSP0', 'mean_65+_SSP0', '%_65+_SSP0', 'min_65+_SSP1q', 'max_65+_SSP1q', 'count_65+_SSP1q', 'sum_65+_SSP1q', 'mean_65+_SSP1q', '%_65+_SSP1q', 'min_65+_SSP2q', 'max_65+_SSP2q', 'count_65+_SSP2q', 'sum_65+_SSP2q', 'mean_65+_SSP2q', '%_65+_SSP2q', 'any_65+_SSP3q', 'min_65+_SSP3q', 'max_65+_SSP3q', 'count_65+_SSP3q', 'sum_65+_SSP3q', 'mean_65+_SSP3q', '%_65+_SSP3q', 'any_65+_SSP4q', 'min_65+_SSP4q', 'max_65+_SSP4q', 'count_65+_SSP4q', 'sum_65+_SSP4q', 'mean_65+_SSP4q', '%_65+_SSP4q', 'any_65+_SSP_any', 'all_65+_SSP_any', 'min_65+_SSP_any', 'max_65+_SSP_any', 'count_65+_SSP_any', 'sum_65+_SSP_any', 'mean_65+_SSP_any', '%_65+_SSP_any', 'count_18-64_SSP0', 'sum_18-64_SSP0', 'mean_18-64_SSP0', '%_18-64_SSP0', 'min_18-64_SSP1q', 'max_18-64_SSP1q', 'count_18-64_SSP1q', 'sum_18-64_SSP1q', 'mean_18-64_SSP1q', 'min_18-64_SSP2q', 'max_18-64_SSP2q', 'count_18-64_SSP2q', 'sum_18-64_SSP2q', 'mean_18-64_SSP2q', 'min_18-64_SSP3q', 'max_18-64_SSP3q', 'count_18-64_SSP3q', 'sum_18-64_SSP3q', 'mean_18-64_SSP3q', 'min_18-64_SSP4q', 'max_18-64_SSP4q', 'count_18-64_SSP4q', 'sum_18-64_SSP4q', 'mean_18-64_SSP4q', 'any_18-64_SSP_any', 'all_18-64_SSP_any', 'min_18-64_SSP_any', 'max_18-64_SSP_any', 'count_18-64_SSP_any', 'sum_18-64_SSP_any', 'mean_18-64_SSP_any', '%_18-64_SSP_any', 'any_kid_SSP0', 'all_kid_SSP0', 'min_kid_SSP0', 'max_kid_SSP0', 'count_kid_SSP0', 'sum_kid_SSP0', 'mean_kid_SSP0', '%_kid_SSP0', 'max_kid_SSP1q', 'mean_kid_SSP1q', 'max_kid_SSP2q', 'sum_kid_SSP2q', 'mean_kid_SSP2q', 'max_kid_SSP3q', 'sum_kid_SSP3q', 'mean_kid_SSP3q', 'any_kid_SSP_any', 'all_kid_SSP_any', 'min_kid_SSP_any', 'max_kid_SSP_any', 'count_kid_SSP_any', 'sum_kid_SSP_any', 'mean_kid_SSP_any', '%_kid_SSP_any', 'any_anyage_SSP0', 'all_anyage_SSP0', 'max_anyage_SSP0', 'sum_anyage_SSP0', '%_anyage_SSP0', 'any_anyage_SSP1q', 'all_anyage_SSP1q', 'min_anyage_SSP1q', 'max_anyage_SSP1q', 'count_anyage_SSP1q', 'sum_anyage_SSP1q', 'mean_anyage_SSP1q', '%_anyage_SSP1q', 'any_anyage_SSP2q', 'all_anyage_SSP2q', 'min_anyage_SSP2q', 'max_anyage_SSP2q', 'count_anyage_SSP2q', 'sum_anyage_SSP2q', 'mean_anyage_SSP2q', '%_anyage_SSP2q', 'any_anyage_SSP3q', 'all_anyage_SSP3q', 'min_anyage_SSP3q', 'max_anyage_SSP3q', 'count_anyage_SSP3q', 'sum_anyage_SSP3q', 'mean_anyage_SSP3q', '%_anyage_SSP3q', 'any_anyage_SSP4q', 'all_anyage_SSP4q', 'min_anyage_SSP4q', 'max_anyage_SSP4q', 'count_anyage_SSP4q', 'sum_anyage_SSP4q', 'mean_anyage_SSP4q', '%_anyage_SSP4q', 'min_anyage_SSP_any', 'max_anyage_SSP_any', 'count_anyage_SSP_any', 'sum_anyage_SSP_any', 'mean_anyage_SSP_any', 'count_adult_SSIP0', 'min_adult_SSIP1q', 'max_adult_SSIP1q', 'count_adult_SSIP1q', 'sum_adult_SSIP1q', 'mean_adult_SSIP1q', 'max_adult_SSIP2q', 'count_adult_SSIP2q', 'sum_adult_SSIP2q', 'mean_adult_SSIP2q', 'min_adult_SSIP3q', 'max_adult_SSIP3q', 'count_adult_SSIP3q', 'sum_adult_SSIP3q', 'mean_adult_SSIP3q', 'min_adult_SSIP_any', 'max_adult_SSIP_any', 'count_adult_SSIP_any', 'sum_adult_SSIP_any', 'mean_adult_SSIP_any', 'all_65+_SSIP0', 'min_65+_SSIP0', 'max_65+_SSIP0', 'sum_65+_SSIP0', 'mean_65+_SSIP0', '%_65+_SSIP0', 'min_65+_SSIP1q', 'max_65+_SSIP1q', 'count_65+_SSIP1q', 'sum_65+_SSIP1q', 'mean_65+_SSIP1q', 'max_65+_SSIP2q', 'count_65+_SSIP2q', 'sum_65+_SSIP2q', 'mean_65+_SSIP2q', 'min_65+_SSIP3q', 'max_65+_SSIP3q', 'count_65+_SSIP3q', 'sum_65+_SSIP3q', 'mean_65+_SSIP3q', '%_65+_SSIP3q', 'any_65+_SSIP_any', 'all_65+_SSIP_any', 'min_65+_SSIP_any', 'max_65+_SSIP_any', 'count_65+_SSIP_any', 'sum_65+_SSIP_any', 'mean_65+_SSIP_any', '%_65+_SSIP_any', 'count_18-64_SSIP0', 'sum_18-64_SSIP0', 'mean_18-64_SSIP0', '%_18-64_SSIP0', 'max_18-64_SSIP1q', 'sum_18-64_SSIP1q', 'mean_18-64_SSIP1q', 'max_18-64_SSIP2q', 'sum_18-64_SSIP2q', 'mean_18-64_SSIP2q', 'min_18-64_SSIP3q', 'max_18-64_SSIP3q', 'count_18-64_SSIP3q', 'sum_18-64_SSIP3q', 'mean_18-64_SSIP3q', 'any_18-64_SSIP_any', 'all_18-64_SSIP_any', 'min_18-64_SSIP_any', 'max_18-64_SSIP_any', 'count_18-64_SSIP_any', 'sum_18-64_SSIP_any', 'mean_18-64_SSIP_any', '%_18-64_SSIP_any', 'any_kid_SSIP0', 'all_kid_SSIP0', 'min_kid_SSIP0', 'max_kid_SSIP0', 'count_kid_SSIP0', 'sum_kid_SSIP0', 'mean_kid_SSIP0', '%_kid_SSIP0', 'max_kid_SSIP1q', 'sum_kid_SSIP1q', 'mean_kid_SSIP1q', 'max_kid_SSIP2q', 'sum_kid_SSIP2q', 'mean_kid_SSIP2q', 'max_kid_SSIP3q', 'sum_kid_SSIP3q', 'mean_kid_SSIP3q', 'any_kid_SSIP_any', 'all_kid_SSIP_any', 'min_kid_SSIP_any', 'max_kid_SSIP_any', 'count_kid_SSIP_any', 'sum_kid_SSIP_any', 'mean_kid_SSIP_any', '%_kid_SSIP_any', 'any_anyage_SSIP0', 'all_anyage_SSIP0', 'max_anyage_SSIP0', 'count_anyage_SSIP0', 'sum_anyage_SSIP0', '%_anyage_SSIP0', 'any_anyage_SSIP1q', 'min_anyage_SSIP1q', 'max_anyage_SSIP1q', 'count_anyage_SSIP1q', 'sum_anyage_SSIP1q', 'mean_anyage_SSIP1q', 'any_anyage_SSIP2q', 'min_anyage_SSIP2q', 'max_anyage_SSIP2q', 'count_anyage_SSIP2q', 'sum_anyage_SSIP2q', 'mean_anyage_SSIP2q', 'any_anyage_SSIP3q', 'all_anyage_SSIP3q', 'min_anyage_SSIP3q', 'max_anyage_SSIP3q', 'count_anyage_SSIP3q', 'sum_anyage_SSIP3q', 'mean_anyage_SSIP3q', '%_anyage_SSIP3q', 'min_anyage_SSIP_any', 'max_anyage_SSIP_any', 'count_anyage_SSIP_any', 'sum_anyage_SSIP_any', 'mean_anyage_SSIP_any', 'count_adult_PA0', 'sum_adult_PA0', 'max_adult_PA1q', 'sum_adult_PA1q', 'mean_adult_PA1q', 'max_adult_PA2q', 'count_adult_PA2q', 'sum_adult_PA2q', 'mean_adult_PA2q', 'max_adult_PA3q', 'count_adult_PA3q', 'sum_adult_PA3q', 'mean_adult_PA3q', 'min_adult_PA_any', 'max_adult_PA_any', 'count_adult_PA_any', 'sum_adult_PA_any', 'mean_adult_PA_any', 'any_65+_PA0', 'all_65+_PA0', 'min_65+_PA0', 'max_65+_PA0', 'count_65+_PA0', 'sum_65+_PA0', 'mean_65+_PA0', '%_65+_PA0', 'max_65+_PA1q', 'sum_65+_PA1q', 'mean_65+_PA1q', 'max_65+_PA2q', 'sum_65+_PA2q', 'mean_65+_PA2q', 'max_65+_PA3q', 'sum_65+_PA3q', 'mean_65+_PA3q', 'any_65+_PA_any', 'all_65+_PA_any', 'min_65+_PA_any', 'max_65+_PA_any', 'count_65+_PA_any', 'sum_65+_PA_any', 'mean_65+_PA_any', '%_65+_PA_any', 'all_18-64_PA0', 'min_18-64_PA0', 'max_18-64_PA0', 'count_18-64_PA0', 'sum_18-64_PA0', 'mean_18-64_PA0', '%_18-64_PA0', 'max_18-64_PA1q', 'sum_18-64_PA1q', 'mean_18-64_PA1q', 'min_18-64_PA2q', 'max_18-64_PA2q', 'count_18-64_PA2q', 'sum_18-64_PA2q', 'mean_18-64_PA2q', 'min_18-64_PA3q', 'max_18-64_PA3q', 'count_18-64_PA3q', 'sum_18-64_PA3q', 'mean_18-64_PA3q', 'any_18-64_PA_any', 'all_18-64_PA_any', 'min_18-64_PA_any', 'max_18-64_PA_any', 'count_18-64_PA_any', 'sum_18-64_PA_any', 'mean_18-64_PA_any', '%_18-64_PA_any', 'any_kid_PA0', 'all_kid_PA0', 'min_kid_PA0', 'max_kid_PA0', 'count_kid_PA0', 'sum_kid_PA0', 'mean_kid_PA0', '%_kid_PA0', 'max_kid_PA1q', 'mean_kid_PA1q', 'max_kid_PA2q', 'sum_kid_PA2q', 'mean_kid_PA2q', 'max_kid_PA3q', 'sum_kid_PA3q', 'mean_kid_PA3q', 'any_kid_PA_any', 'all_kid_PA_any', 'min_kid_PA_any', 'max_kid_PA_any', 'count_kid_PA_any', 'sum_kid_PA_any', 'mean_kid_PA_any', '%_kid_PA_any', 'all_anyage_PA0', 'min_anyage_PA0', 'max_anyage_PA0', 'count_anyage_PA0', 'sum_anyage_PA0', 'min_anyage_PA1q', 'max_anyage_PA1q', 'count_anyage_PA1q', 'sum_anyage_PA1q', 'mean_anyage_PA1q', 'any_anyage_PA2q', 'min_anyage_PA2q', 'max_anyage_PA2q', 'count_anyage_PA2q', 'sum_anyage_PA2q', 'mean_anyage_PA2q', 'any_anyage_PA3q', 'min_anyage_PA3q', 'max_anyage_PA3q', 'count_anyage_PA3q', 'sum_anyage_PA3q', 'mean_anyage_PA3q', 'min_anyage_PA_any', 'max_anyage_PA_any', 'count_anyage_PA_any', 'sum_anyage_PA_any', 'mean_anyage_PA_any', 'min_adult_RETP1q', 'max_adult_RETP1q', 'count_adult_RETP1q', 'sum_adult_RETP1q', 'mean_adult_RETP1q', 'min_adult_RETP2q', 'max_adult_RETP2q', 'count_adult_RETP2q', 'sum_adult_RETP2q', 'mean_adult_RETP2q', 'min_adult_RETP3q', 'max_adult_RETP3q', 'count_adult_RETP3q', 'sum_adult_RETP3q', 'mean_adult_RETP3q', 'min_adult_RETP_any', 'max_adult_RETP_any', 'count_adult_RETP_any', 'sum_adult_RETP_any', 'mean_adult_RETP_any', '%_65+_RETP0', 'min_65+_RETP1q', 'max_65+_RETP1q', 'count_65+_RETP1q', 'sum_65+_RETP1q', 'mean_65+_RETP1q', '%_65+_RETP1q', 'min_65+_RETP2q', 'max_65+_RETP2q', 'count_65+_RETP2q', 'sum_65+_RETP2q', 'mean_65+_RETP2q', '%_65+_RETP2q', 'min_65+_RETP3q', 'max_65+_RETP3q', 'count_65+_RETP3q', 'sum_65+_RETP3q', 'mean_65+_RETP3q', '%_65+_RETP3q', 'any_65+_RETP_any', 'all_65+_RETP_any', 'min_65+_RETP_any', 'max_65+_RETP_any', 'count_65+_RETP_any', 'sum_65+_RETP_any', 'mean_65+_RETP_any', '%_65+_RETP_any', 'count_18-64_RETP0', '%_18-64_RETP0', 'max_18-64_RETP1q', 'count_18-64_RETP1q', 'sum_18-64_RETP1q', 'mean_18-64_RETP1q', 'max_18-64_RETP2q', 'sum_18-64_RETP2q', 'mean_18-64_RETP2q', 'min_18-64_RETP3q', 'max_18-64_RETP3q', 'count_18-64_RETP3q', 'sum_18-64_RETP3q', 'mean_18-64_RETP3q', 'any_18-64_RETP_any', 'all_18-64_RETP_any', 'min_18-64_RETP_any', 'max_18-64_RETP_any', 'count_18-64_RETP_any', 'sum_18-64_RETP_any', 'mean_18-64_RETP_any', '%_18-64_RETP_any', 'all_kid_RETP0', 'count_kid_RETP0', '%_kid_RETP0', 'max_kid_RETP1q', 'sum_kid_RETP1q', 'mean_kid_RETP1q', 'any_kid_RETP_any', 'all_kid_RETP_any', 'min_kid_RETP_any', 'max_kid_RETP_any', 'count_kid_RETP_any', 'sum_kid_RETP_any', 'mean_kid_RETP_any', '%_kid_RETP_any', 'any_anyage_RETP1q', 'all_anyage_RETP1q', 'min_anyage_RETP1q', 'max_anyage_RETP1q', 'count_anyage_RETP1q', 'sum_anyage_RETP1q', 'mean_anyage_RETP1q', '%_anyage_RETP1q', 'any_anyage_RETP2q', 'all_anyage_RETP2q', 'min_anyage_RETP2q', 'max_anyage_RETP2q', 'count_anyage_RETP2q', 'sum_anyage_RETP2q', 'mean_anyage_RETP2q', '%_anyage_RETP2q', 'any_anyage_RETP3q', 'all_anyage_RETP3q', 'min_anyage_RETP3q', 'max_anyage_RETP3q', 'count_anyage_RETP3q', 'sum_anyage_RETP3q', 'mean_anyage_RETP3q', '%_anyage_RETP3q', 'min_anyage_RETP_any', 'max_anyage_RETP_any', 'count_anyage_RETP_any', 'sum_anyage_RETP_any', 'mean_anyage_RETP_any', 'max_adult_OI1q', 'count_adult_OI1q', 'sum_adult_OI1q', 'mean_adult_OI1q', 'max_adult_OI2q', 'count_adult_OI2q', 'sum_adult_OI2q', 'mean_adult_OI2q', 'max_adult_OI3q', 'count_adult_OI3q', 'sum_adult_OI3q', 'mean_adult_OI3q', 'min_adult_OI_any', 'max_adult_OI_any', 'count_adult_OI_any', 'sum_adult_OI_any', 'mean_adult_OI_any', 'max_65+_OI1q', 'sum_65+_OI1q', 'mean_65+_OI1q', 'max_65+_OI2q', 'sum_65+_OI2q', 'mean_65+_OI2q', 'min_65+_OI3q', 'max_65+_OI3q', 'count_65+_OI3q', 'sum_65+_OI3q', 'mean_65+_OI3q', 'any_65+_OI_any', 'all_65+_OI_any', 'min_65+_OI_any', 'max_65+_OI_any', 'count_65+_OI_any', 'sum_65+_OI_any', 'mean_65+_OI_any', '%_65+_OI_any', 'max_18-64_OI1q', 'sum_18-64_OI1q', 'mean_18-64_OI1q', 'min_18-64_OI2q', 'max_18-64_OI2q', 'count_18-64_OI2q', 'sum_18-64_OI2q', 'mean_18-64_OI2q', 'min_18-64_OI3q', 'max_18-64_OI3q', 'count_18-64_OI3q', 'sum_18-64_OI3q', 'mean_18-64_OI3q', 'any_18-64_OI_any', 'all_18-64_OI_any', 'min_18-64_OI_any', 'max_18-64_OI_any', 'count_18-64_OI_any', 'sum_18-64_OI_any', 'mean_18-64_OI_any', '%_18-64_OI_any', 'max_kid_OI1q', 'sum_kid_OI1q', 'mean_kid_OI1q', 'max_kid_OI2q', 'sum_kid_OI2q', 'mean_kid_OI2q', 'max_kid_OI3q', 'sum_kid_OI3q', 'mean_kid_OI3q', 'any_kid_OI_any', 'all_kid_OI_any', 'min_kid_OI_any', 'max_kid_OI_any', 'count_kid_OI_any', 'sum_kid_OI_any', 'mean_kid_OI_any', '%_kid_OI_any', 'min_anyage_OI1q', 'max_anyage_OI1q', 'count_anyage_OI1q', 'sum_anyage_OI1q', 'mean_anyage_OI1q', 'any_anyage_OI2q', 'min_anyage_OI2q', 'max_anyage_OI2q', 'count_anyage_OI2q', 'sum_anyage_OI2q', 'mean_anyage_OI2q', 'any_anyage_OI3q', 'min_anyage_OI3q', 'max_anyage_OI3q', 'count_anyage_OI3q', 'sum_anyage_OI3q', 'mean_anyage_OI3q', '%_anyage_OI3q', 'min_anyage_OI_any', 'max_anyage_OI_any', 'count_anyage_OI_any', 'sum_anyage_OI_any', 'mean_anyage_OI_any', 'max_adult_White', 'mean_adult_White', '%_adult_White', 'all_adult_Black', 'sum_adult_Black', 'mean_adult_Black', '%_adult_Black', 'sum_adult_Asian', 'mean_adult_Asian', '%_adult_Asian', 'sum_adult_Hisp', 'mean_adult_Hisp', '%_adult_Hisp', 'max_adult_ETH_other', 'sum_adult_ETH_other', 'mean_adult_ETH_other', 'min_adult_ETH_any', 'max_adult_ETH_any', 'count_adult_ETH_any', 'sum_adult_ETH_any', 'mean_adult_ETH_any', 'all_65+_White', 'min_65+_White', 'max_65+_White', 'sum_65+_White', 'mean_65+_White', '%_65+_White', 'all_65+_Black', 'min_65+_Black', 'max_65+_Black', 'sum_65+_Black', 'mean_65+_Black', '%_65+_Black', 'all_65+_Asian', 'min_65+_Asian', 'max_65+_Asian', 'sum_65+_Asian', 'mean_65+_Asian', '%_65+_Asian', 'all_65+_Hisp', 'min_65+_Hisp', 'max_65+_Hisp', 'sum_65+_Hisp', 'mean_65+_Hisp', '%_65+_Hisp', 'max_65+_ETH_other', 'mean_65+_ETH_other', 'any_65+_ETH_any', 'all_65+_ETH_any', 'min_65+_ETH_any', 'max_65+_ETH_any', 'count_65+_ETH_any', 'sum_65+_ETH_any', 'mean_65+_ETH_any', '%_65+_ETH_any', 'max_18-64_White', 'sum_18-64_White', 'mean_18-64_White', '%_18-64_White', 'all_18-64_Black', 'max_18-64_Black', 'sum_18-64_Black', 'mean_18-64_Black', '%_18-64_Black', 'max_18-64_Asian', 'count_18-64_Asian', 'sum_18-64_Asian', 'mean_18-64_Asian', '%_18-64_Asian', 'max_18-64_Hisp', 'count_18-64_Hisp', 'sum_18-64_Hisp', 'mean_18-64_Hisp', '%_18-64_Hisp', 'any_18-64_ETH_other', 'max_18-64_ETH_other', 'count_18-64_ETH_other', 'sum_18-64_ETH_other', 'mean_18-64_ETH_other', '%_18-64_ETH_other', 'any_18-64_ETH_any', 'all_18-64_ETH_any', 'min_18-64_ETH_any', 'max_18-64_ETH_any', 'count_18-64_ETH_any', 'sum_18-64_ETH_any', 'mean_18-64_ETH_any', '%_18-64_ETH_any', 'all_kid_White', 'mean_kid_White', '%_kid_White', 'all_kid_Black', 'mean_kid_Black', '%_kid_Black', 'all_kid_Asian', 'mean_kid_Asian', '%_kid_Asian', 'all_kid_Hisp', 'mean_kid_Hisp', '%_kid_Hisp', 'mean_kid_ETH_other', '%_kid_ETH_other', 'any_kid_ETH_any', 'all_kid_ETH_any', 'min_kid_ETH_any', 'max_kid_ETH_any', 'count_kid_ETH_any', 'sum_kid_ETH_any', 'mean_kid_ETH_any', '%_kid_ETH_any', 'any_anyage_White', 'all_anyage_White', 'min_anyage_White', 'max_anyage_White', 'sum_anyage_White', 'mean_anyage_White', '%_anyage_White', 'any_anyage_Black', 'all_anyage_Black', 'max_anyage_Black', 'sum_anyage_Black', 'mean_anyage_Black', '%_anyage_Black', 'any_anyage_Asian', 'all_anyage_Asian', 'max_anyage_Asian', 'count_anyage_Asian', 'sum_anyage_Asian', 'mean_anyage_Asian', '%_anyage_Asian', 'any_anyage_Hisp', 'all_anyage_Hisp', 'max_anyage_Hisp', 'sum_anyage_Hisp', 'mean_anyage_Hisp', '%_anyage_Hisp', 'all_anyage_ETH_other', 'max_anyage_ETH_other', 'sum_anyage_ETH_other', 'mean_anyage_ETH_other', '%_anyage_ETH_other', 'min_anyage_ETH_any', 'max_anyage_ETH_any', 'count_anyage_ETH_any', 'sum_anyage_ETH_any', 'mean_anyage_ETH_any', 'max_adult_TINP0', 'sum_adult_TINP0', 'mean_adult_TINP0', 'mean_adult_TINP<10', 'mean_adult_TINP<15', 'mean_adult_TINP<20', 'mean_adult_TINP<25', 'count_adult_TINP<30', 'sum_adult_TINP<30', 'mean_adult_TINP<30', 'count_adult_TINP<35', 'sum_adult_TINP<35', 'mean_adult_TINP<35', 'count_adult_TINP<40', 'sum_adult_TINP<40', 'mean_adult_TINP<40', 'max_adult_TINP<45', 'count_adult_TINP<45', 'sum_adult_TINP<45', 'mean_adult_TINP<45', 'min_adult_TINP<50', 'max_adult_TINP<50', 'count_adult_TINP<50', 'sum_adult_TINP<50', 'mean_adult_TINP<50', 'count_adult_TINP<60', 'sum_adult_TINP<60', 'mean_adult_TINP<60', 'count_adult_TINP<70', 'sum_adult_TINP<70', 'mean_adult_TINP<70', 'count_adult_TINP<80', 'sum_adult_TINP<80', 'mean_adult_TINP<80', 'min_adult_TINP_any', 'max_adult_TINP_any', 'count_adult_TINP_any', 'sum_adult_TINP_any', 'mean_adult_TINP_any', 'min_65+_TINP0', 'max_65+_TINP0', 'count_65+_TINP0', 'sum_65+_TINP0', 'mean_65+_TINP0', '%_65+_TINP0', 'min_65+_TINP<10', 'max_65+_TINP<10', 'count_65+_TINP<10', 'sum_65+_TINP<10', 'mean_65+_TINP<10', '%_65+_TINP<10', 'min_65+_TINP<15', 'max_65+_TINP<15', 'sum_65+_TINP<15', 'mean_65+_TINP<15', '%_65+_TINP<15', 'min_65+_TINP<20', 'max_65+_TINP<20', 'sum_65+_TINP<20', 'mean_65+_TINP<20', '%_65+_TINP<20', 'min_65+_TINP<25', 'max_65+_TINP<25', 'sum_65+_TINP<25', 'mean_65+_TINP<25', '%_65+_TINP<25', 'any_65+_TINP<30', 'min_65+_TINP<30', 'max_65+_TINP<30', 'count_65+_TINP<30', 'sum_65+_TINP<30', 'mean_65+_TINP<30', '%_65+_TINP<30', 'any_65+_TINP<35', 'all_65+_TINP<35', 'min_65+_TINP<35', 'max_65+_TINP<35', 'count_65+_TINP<35', 'sum_65+_TINP<35', 'mean_65+_TINP<35', '%_65+_TINP<35', 'any_65+_TINP<40', 'all_65+_TINP<40', 'min_65+_TINP<40', 'max_65+_TINP<40', 'count_65+_TINP<40', 'sum_65+_TINP<40', 'mean_65+_TINP<40', '%_65+_TINP<40', 'any_65+_TINP<45', 'all_65+_TINP<45', 'min_65+_TINP<45', 'max_65+_TINP<45', 'count_65+_TINP<45', 'sum_65+_TINP<45', 'mean_65+_TINP<45', '%_65+_TINP<45', 'any_65+_TINP<50', 'all_65+_TINP<50', 'min_65+_TINP<50', 'max_65+_TINP<50', 'count_65+_TINP<50', 'sum_65+_TINP<50', 'mean_65+_TINP<50', '%_65+_TINP<50', 'any_65+_TINP<60', 'all_65+_TINP<60', 'min_65+_TINP<60', 'max_65+_TINP<60', 'count_65+_TINP<60', 'sum_65+_TINP<60', 'mean_65+_TINP<60', '%_65+_TINP<60', 'any_65+_TINP<70', 'all_65+_TINP<70', 'min_65+_TINP<70', 'max_65+_TINP<70', 'count_65+_TINP<70', 'sum_65+_TINP<70', 'mean_65+_TINP<70', '%_65+_TINP<70', 'any_65+_TINP<80', 'all_65+_TINP<80', 'min_65+_TINP<80', 'max_65+_TINP<80', 'count_65+_TINP<80', 'sum_65+_TINP<80', 'mean_65+_TINP<80', '%_65+_TINP<80', 'any_65+_TINP_any', 'all_65+_TINP_any', 'min_65+_TINP_any', 'max_65+_TINP_any', 'count_65+_TINP_any', 'sum_65+_TINP_any', 'mean_65+_TINP_any', '%_65+_TINP_any', 'max_18-64_TINP0', 'count_18-64_TINP0', 'sum_18-64_TINP0', 'mean_18-64_TINP0', 'max_18-64_TINP<10', 'mean_18-64_TINP<10', 'mean_18-64_TINP<15', 'count_18-64_TINP<20', 'mean_18-64_TINP<20', 'count_18-64_TINP<25', 'mean_18-64_TINP<25', 'count_18-64_TINP<30', 'sum_18-64_TINP<30', 'mean_18-64_TINP<30', 'count_18-64_TINP<35', 'sum_18-64_TINP<35', 'mean_18-64_TINP<35', 'count_18-64_TINP<40', 'sum_18-64_TINP<40', 'mean_18-64_TINP<40', 'any_18-64_TINP<45', 'max_18-64_TINP<45', 'count_18-64_TINP<45', 'sum_18-64_TINP<45', 'mean_18-64_TINP<45', '%_18-64_TINP<45', 'any_18-64_TINP<50', 'min_18-64_TINP<50', 'max_18-64_TINP<50', 'count_18-64_TINP<50', 'sum_18-64_TINP<50', 'mean_18-64_TINP<50', '%_18-64_TINP<50', 'any_18-64_TINP<60', 'all_18-64_TINP<60', 'min_18-64_TINP<60', 'max_18-64_TINP<60', 'count_18-64_TINP<60', 'sum_18-64_TINP<60', 'mean_18-64_TINP<60', '%_18-64_TINP<60', 'any_18-64_TINP<70', 'all_18-64_TINP<70', 'min_18-64_TINP<70', 'max_18-64_TINP<70', 'count_18-64_TINP<70', 'sum_18-64_TINP<70', 'mean_18-64_TINP<70', '%_18-64_TINP<70', 'any_18-64_TINP<80', 'all_18-64_TINP<80', 'min_18-64_TINP<80', 'max_18-64_TINP<80', 'count_18-64_TINP<80', 'sum_18-64_TINP<80', 'mean_18-64_TINP<80', '%_18-64_TINP<80', 'any_18-64_TINP_any', 'all_18-64_TINP_any', 'min_18-64_TINP_any', 'max_18-64_TINP_any', 'count_18-64_TINP_any', 'sum_18-64_TINP_any', 'mean_18-64_TINP_any', '%_18-64_TINP_any', 'any_kid_TINP0', 'all_kid_TINP0', 'min_kid_TINP0', 'max_kid_TINP0', 'count_kid_TINP0', 'sum_kid_TINP0', 'mean_kid_TINP0', '%_kid_TINP0', 'any_kid_TINP<10', 'all_kid_TINP<10', 'min_kid_TINP<10', 'max_kid_TINP<10', 'count_kid_TINP<10', 'sum_kid_TINP<10', 'mean_kid_TINP<10', '%_kid_TINP<10', 'any_kid_TINP<15', 'all_kid_TINP<15', 'min_kid_TINP<15', 'max_kid_TINP<15', 'count_kid_TINP<15', 'sum_kid_TINP<15', 'mean_kid_TINP<15', '%_kid_TINP<15', 'any_kid_TINP<20', 'all_kid_TINP<20', 'min_kid_TINP<20', 'max_kid_TINP<20', 'count_kid_TINP<20', 'sum_kid_TINP<20', 'mean_kid_TINP<20', '%_kid_TINP<20', 'any_kid_TINP<25', 'all_kid_TINP<25', 'min_kid_TINP<25', 'max_kid_TINP<25', 'count_kid_TINP<25', 'sum_kid_TINP<25', 'mean_kid_TINP<25', '%_kid_TINP<25', 'any_kid_TINP<30', 'all_kid_TINP<30', 'min_kid_TINP<30', 'max_kid_TINP<30', 'count_kid_TINP<30', 'sum_kid_TINP<30', 'mean_kid_TINP<30', '%_kid_TINP<30', 'any_kid_TINP<35', 'all_kid_TINP<35', 'min_kid_TINP<35', 'max_kid_TINP<35', 'count_kid_TINP<35', 'sum_kid_TINP<35', 'mean_kid_TINP<35', '%_kid_TINP<35', 'any_kid_TINP<40', 'all_kid_TINP<40', 'min_kid_TINP<40', 'max_kid_TINP<40', 'count_kid_TINP<40', 'sum_kid_TINP<40', 'mean_kid_TINP<40', '%_kid_TINP<40', 'any_kid_TINP<45', 'all_kid_TINP<45', 'min_kid_TINP<45', 'max_kid_TINP<45', 'count_kid_TINP<45', 'sum_kid_TINP<45', 'mean_kid_TINP<45', '%_kid_TINP<45', 'any_kid_TINP<50', 'all_kid_TINP<50', 'min_kid_TINP<50', 'max_kid_TINP<50', 'count_kid_TINP<50', 'sum_kid_TINP<50', 'mean_kid_TINP<50', '%_kid_TINP<50', 'any_kid_TINP<60', 'all_kid_TINP<60', 'min_kid_TINP<60', 'max_kid_TINP<60', 'count_kid_TINP<60', 'sum_kid_TINP<60', 'mean_kid_TINP<60', '%_kid_TINP<60', 'any_kid_TINP<70', 'all_kid_TINP<70', 'min_kid_TINP<70', 'max_kid_TINP<70', 'count_kid_TINP<70', 'sum_kid_TINP<70', 'mean_kid_TINP<70', '%_kid_TINP<70', 'any_kid_TINP<80', 'all_kid_TINP<80', 'min_kid_TINP<80', 'max_kid_TINP<80', 'count_kid_TINP<80', 'sum_kid_TINP<80', 'mean_kid_TINP<80', '%_kid_TINP<80', 'any_kid_TINP_any', 'all_kid_TINP_any', 'min_kid_TINP_any', 'max_kid_TINP_any', 'count_kid_TINP_any', 'sum_kid_TINP_any', 'mean_kid_TINP_any', '%_kid_TINP_any', 'all_anyage_TINP0', 'max_anyage_TINP0', 'mean_anyage_TINP0', 'all_anyage_TINP<10', 'max_anyage_TINP<10', 'sum_anyage_TINP<10', 'mean_anyage_TINP<10', 'all_anyage_TINP<15', 'max_anyage_TINP<15', 'count_anyage_TINP<15', 'sum_anyage_TINP<15', 'mean_anyage_TINP<15', 'all_anyage_TINP<20', 'max_anyage_TINP<20', 'count_anyage_TINP<20', 'sum_anyage_TINP<20', 'mean_anyage_TINP<20', 'all_anyage_TINP<25', 'max_anyage_TINP<25', 'count_anyage_TINP<25', 'sum_anyage_TINP<25', 'mean_anyage_TINP<25', 'all_anyage_TINP<30', 'max_anyage_TINP<30', 'count_anyage_TINP<30', 'sum_anyage_TINP<30', 'mean_anyage_TINP<30', '%_anyage_TINP<30', 'all_anyage_TINP<35', 'max_anyage_TINP<35', 'count_anyage_TINP<35', 'sum_anyage_TINP<35', 'mean_anyage_TINP<35', '%_anyage_TINP<35', 'all_anyage_TINP<40', 'max_anyage_TINP<40', 'count_anyage_TINP<40', 'sum_anyage_TINP<40', 'mean_anyage_TINP<40', '%_anyage_TINP<40', 'all_anyage_TINP<45', 'min_anyage_TINP<45', 'max_anyage_TINP<45', 'count_anyage_TINP<45', 'sum_anyage_TINP<45', 'mean_anyage_TINP<45', '%_anyage_TINP<45', 'all_anyage_TINP<50', 'min_anyage_TINP<50', 'max_anyage_TINP<50', 'count_anyage_TINP<50', 'sum_anyage_TINP<50', 'mean_anyage_TINP<50', '%_anyage_TINP<50', 'all_anyage_TINP<60', 'max_anyage_TINP<60', 'count_anyage_TINP<60', 'sum_anyage_TINP<60', 'mean_anyage_TINP<60', '%_anyage_TINP<60', 'all_anyage_TINP<70', 'max_anyage_TINP<70', 'count_anyage_TINP<70', 'sum_anyage_TINP<70', 'mean_anyage_TINP<70', '%_anyage_TINP<70', 'all_anyage_TINP<80', 'min_anyage_TINP<80', 'max_anyage_TINP<80', 'count_anyage_TINP<80', 'sum_anyage_TINP<80', 'mean_anyage_TINP<80', '%_anyage_TINP<80', 'min_anyage_TINP_any', 'max_anyage_TINP_any', 'count_anyage_TINP_any', 'sum_anyage_TINP_any', 'mean_anyage_TINP_any', 'MSP_2_1.0', 'HousingStatus_7.0', 'HousingStatus_8.0']\n"
     ]
    }
   ],
   "source": [
    "def id_cols_to_drop(df, threshold):\n",
    "    \"\"\"\n",
    "    Identifies columns to drop from a dataframe due to high correlation.\n",
    "    Input: the dataframe of interest and the correlation coefficient threshold.\n",
    "    Output: a list of the columns to drop.  Prints elapsed time to the screen because this takes a long time for a large\n",
    "    dataframe.\n",
    "    \"\"\"\n",
    "\n",
    "    time_0 = time.time()\n",
    "        \n",
    "    # Create correlation matrix\n",
    "    corr_matrix = df.corr().abs()\n",
    "\n",
    "    # Select upper triangle of correlation matrix\n",
    "    upper = corr_matrix.where(np.triu(np.ones(corr_matrix.shape), k=1).astype(np.bool))\n",
    "\n",
    "    # Find index of feature columns with correlation greater than 0.95\n",
    "    to_drop = [column for column in upper.columns if any(upper[column] > threshold)]\n",
    "    tt = time.time() - time_0\n",
    "    print('Done. Took ' + str(tt) + 'seconds.')\n",
    "\n",
    "    return(to_drop)\n",
    "    \n",
    "#tester_copy = tester.copy()\n",
    "#print(len(tester_copy.columns))\n",
    "# to_drop = id_cols_to_drop(tester_copy, 0.95)\n",
    "to_drop = ['SCHL_19', 'WAGP_adj_15', 'SSP_adj_20', 'SSIP_adj_14', 'SSIP_adj_20', 'PA_adj_14', 'PA_adj_16', 'PA_adj_17', 'PA_adj_18', 'PA_adj_19', 'PA_adj_20', 'TINP_3', 'TINP_10', 'TINP_11', 'TINP_12', 'TINP_13', 'TINP_14', 'TINP_15', 'TINP_16', 'TINP_17', 'TINP_18', 'TINP_19', 'TINP_20', 'all_65+_age', 'min_65+_age', 'max_65+_age', 'sum_65+_age', 'mean_65+_age', '%_65+_age', 'all_18-64_age', 'mean_18-64_age', '%_18-64_age', 'all_kid_age', 'mean_kid_age', '%_kid_age', 'max_anyage_age', 'sum_anyage_age', 'max_adult_non-cit', 'sum_adult_non-cit', 'mean_adult_non-cit', 'any_adult_citizen', 'all_adult_citizen', 'mean_adult_citizen', '%_adult_citizen', 'max_adult_naturalized_cit', 'sum_adult_naturalized_cit', 'mean_adult_naturalized_cit', 'min_adult_any_CIT', 'max_adult_any_CIT', 'count_adult_any_CIT', 'sum_adult_any_CIT', 'mean_adult_any_CIT', 'min_65+_non-cit', 'max_65+_non-cit', 'count_65+_non-cit', 'sum_65+_non-cit', 'mean_65+_non-cit', '%_65+_non-cit', 'all_65+_citizen', 'min_65+_citizen', 'max_65+_citizen', 'sum_65+_citizen', 'mean_65+_citizen', '%_65+_citizen', 'min_65+_naturalized_cit', 'max_65+_naturalized_cit', 'sum_65+_naturalized_cit', 'mean_65+_naturalized_cit', '%_65+_naturalized_cit', 'any_65+_any_CIT', 'all_65+_any_CIT', 'min_65+_any_CIT', 'max_65+_any_CIT', 'count_65+_any_CIT', 'sum_65+_any_CIT', 'mean_65+_any_CIT', '%_65+_any_CIT', 'max_18-64_non-cit', 'count_18-64_non-cit', 'sum_18-64_non-cit', 'mean_18-64_non-cit', 'mean_18-64_citizen', '%_18-64_citizen', 'min_18-64_naturalized_cit', 'max_18-64_naturalized_cit', 'sum_18-64_naturalized_cit', 'mean_18-64_naturalized_cit', 'any_18-64_any_CIT', 'all_18-64_any_CIT', 'min_18-64_any_CIT', 'max_18-64_any_CIT', 'count_18-64_any_CIT', 'sum_18-64_any_CIT', 'mean_18-64_any_CIT', '%_18-64_any_CIT', 'max_kid_non-cit', 'mean_kid_non-cit', 'any_kid_citizen', 'all_kid_citizen', 'min_kid_citizen', 'max_kid_citizen', 'count_kid_citizen', 'sum_kid_citizen', 'mean_kid_citizen', '%_kid_citizen', 'max_kid_naturalized_cit', 'mean_kid_naturalized_cit', 'any_kid_any_CIT', 'all_kid_any_CIT', 'min_kid_any_CIT', 'max_kid_any_CIT', 'count_kid_any_CIT', 'sum_kid_any_CIT', 'mean_kid_any_CIT', '%_kid_any_CIT', 'any_anyage_non-cit', 'min_anyage_non-cit', 'max_anyage_non-cit', 'count_anyage_non-cit', 'sum_anyage_non-cit', 'mean_anyage_non-cit', '%_anyage_non-cit', 'any_anyage_citizen', 'all_anyage_citizen', 'max_anyage_citizen', 'sum_anyage_citizen', 'mean_anyage_citizen', '%_anyage_citizen', 'any_anyage_naturalized_cit', 'min_anyage_naturalized_cit', 'max_anyage_naturalized_cit', 'count_anyage_naturalized_cit', 'sum_anyage_naturalized_cit', 'mean_anyage_naturalized_cit', '%_anyage_naturalized_cit', 'min_anyage_any_CIT', 'max_anyage_any_CIT', 'count_anyage_any_CIT', 'sum_anyage_any_CIT', 'mean_anyage_any_CIT', 'max_adult_college', 'mean_adult_college', 'mean_adult_HS', 'any_adult_no_diploma', 'all_adult_no_diploma', 'max_adult_no_diploma', 'mean_adult_no_diploma', '%_adult_no_diploma', 'max_adult_diploma_no_bachelors', 'mean_adult_diploma_no_bachelors', 'min_adult_any_SCHL', 'max_adult_any_SCHL', 'count_adult_any_SCHL', 'sum_adult_any_SCHL', 'mean_adult_any_SCHL', 'min_65+_college', 'max_65+_college', 'sum_65+_college', 'mean_65+_college', '%_65+_college', 'min_65+_HS', 'max_65+_HS', 'sum_65+_HS', 'mean_65+_HS', '%_65+_HS', 'min_65+_no_diploma', 'max_65+_no_diploma', 'sum_65+_no_diploma', 'mean_65+_no_diploma', '%_65+_no_diploma', 'min_65+_diploma_no_bachelors', 'max_65+_diploma_no_bachelors', 'count_65+_diploma_no_bachelors', 'sum_65+_diploma_no_bachelors', 'mean_65+_diploma_no_bachelors', '%_65+_diploma_no_bachelors', 'any_65+_any_SCHL', 'all_65+_any_SCHL', 'min_65+_any_SCHL', 'max_65+_any_SCHL', 'count_65+_any_SCHL', 'sum_65+_any_SCHL', 'mean_65+_any_SCHL', '%_65+_any_SCHL', 'max_18-64_college', 'mean_18-64_college', 'mean_18-64_HS', 'max_18-64_no_diploma', 'sum_18-64_no_diploma', 'mean_18-64_no_diploma', 'max_18-64_diploma_no_bachelors', 'mean_18-64_diploma_no_bachelors', 'any_18-64_any_SCHL', 'all_18-64_any_SCHL', 'min_18-64_any_SCHL', 'max_18-64_any_SCHL', 'count_18-64_any_SCHL', 'sum_18-64_any_SCHL', 'mean_18-64_any_SCHL', '%_18-64_any_SCHL', 'max_kid_HS', 'sum_kid_HS', 'mean_kid_HS', 'any_kid_no_diploma', 'all_kid_no_diploma', 'min_kid_no_diploma', 'max_kid_no_diploma', 'count_kid_no_diploma', 'sum_kid_no_diploma', 'mean_kid_no_diploma', '%_kid_no_diploma', 'min_kid_diploma_no_bachelors', 'max_kid_diploma_no_bachelors', 'sum_kid_diploma_no_bachelors', 'mean_kid_diploma_no_bachelors', 'any_kid_any_SCHL', 'all_kid_any_SCHL', 'min_kid_any_SCHL', 'max_kid_any_SCHL', 'count_kid_any_SCHL', 'sum_kid_any_SCHL', 'mean_kid_any_SCHL', '%_kid_any_SCHL', 'any_anyage_college', 'min_anyage_college', 'max_anyage_college', 'count_anyage_college', 'sum_anyage_college', 'mean_anyage_college', '%_anyage_college', 'any_anyage_HS', 'min_anyage_HS', 'max_anyage_HS', 'count_anyage_HS', 'sum_anyage_HS', 'mean_anyage_HS', 'any_anyage_no_diploma', 'all_anyage_no_diploma', 'max_anyage_no_diploma', 'sum_anyage_no_diploma', 'mean_anyage_no_diploma', '%_anyage_no_diploma', 'any_anyage_diploma_no_bachelors', 'min_anyage_diploma_no_bachelors', 'max_anyage_diploma_no_bachelors', 'count_anyage_diploma_no_bachelors', 'sum_anyage_diploma_no_bachelors', 'mean_anyage_diploma_no_bachelors', '%_anyage_diploma_no_bachelors', 'min_anyage_any_SCHL', 'max_anyage_any_SCHL', 'count_anyage_any_SCHL', 'sum_anyage_any_SCHL', 'mean_anyage_any_SCHL', 'mean_adult_male', 'any_adult_female', 'all_adult_female', 'mean_adult_female', '%_adult_female', 'min_adult_any_SEX', 'max_adult_any_SEX', 'count_adult_any_SEX', 'sum_adult_any_SEX', 'mean_adult_any_SEX', 'min_65+_male', 'max_65+_male', 'count_65+_male', 'sum_65+_male', 'mean_65+_male', 'min_65+_female', 'max_65+_female', 'count_65+_female', 'sum_65+_female', 'mean_65+_female', '%_65+_female', 'any_65+_any_SEX', 'all_65+_any_SEX', 'min_65+_any_SEX', 'max_65+_any_SEX', 'count_65+_any_SEX', 'sum_65+_any_SEX', 'mean_65+_any_SEX', '%_65+_any_SEX', 'mean_18-64_male', 'mean_18-64_female', 'any_18-64_any_SEX', 'all_18-64_any_SEX', 'min_18-64_any_SEX', 'max_18-64_any_SEX', 'count_18-64_any_SEX', 'sum_18-64_any_SEX', 'mean_18-64_any_SEX', '%_18-64_any_SEX', 'mean_kid_male', 'mean_kid_female', 'any_kid_any_SEX', 'all_kid_any_SEX', 'min_kid_any_SEX', 'max_kid_any_SEX', 'count_kid_any_SEX', 'sum_kid_any_SEX', 'mean_kid_any_SEX', '%_kid_any_SEX', 'all_anyage_male', 'max_anyage_male', 'sum_anyage_male', 'mean_anyage_male', '%_anyage_male', 'any_anyage_female', 'all_anyage_female', 'max_anyage_female', 'sum_anyage_female', 'mean_anyage_female', '%_anyage_female', 'min_anyage_any_SEX', 'max_anyage_any_SEX', 'count_anyage_any_SEX', 'sum_anyage_any_SEX', 'mean_anyage_any_SEX', 'min_adult_ENG_no', 'max_adult_ENG_no', 'sum_adult_ENG_no', 'mean_adult_ENG_no', 'max_adult_ENG_nvw', 'sum_adult_ENG_nvw', 'mean_adult_ENG_nvw', 'max_adult_ENG_well', 'mean_adult_ENG_well', 'max_adult_ENG_vw', 'mean_adult_ENG_vw', 'mean_adult_ENG_only', '%_adult_ENG_only', 'min_adult_ENG_any', 'max_adult_ENG_any', 'count_adult_ENG_any', 'sum_adult_ENG_any', 'mean_adult_ENG_any', 'min_65+_ENG_no', 'max_65+_ENG_no', 'count_65+_ENG_no', 'sum_65+_ENG_no', 'mean_65+_ENG_no', '%_65+_ENG_no', 'min_65+_ENG_nvw', 'max_65+_ENG_nvw', 'count_65+_ENG_nvw', 'sum_65+_ENG_nvw', 'mean_65+_ENG_nvw', '%_65+_ENG_nvw', 'min_65+_ENG_well', 'max_65+_ENG_well', 'count_65+_ENG_well', 'sum_65+_ENG_well', 'mean_65+_ENG_well', '%_65+_ENG_well', 'min_65+_ENG_vw', 'max_65+_ENG_vw', 'sum_65+_ENG_vw', 'mean_65+_ENG_vw', '%_65+_ENG_vw', 'all_65+_ENG_only', 'min_65+_ENG_only', 'max_65+_ENG_only', 'sum_65+_ENG_only', 'mean_65+_ENG_only', '%_65+_ENG_only', 'any_65+_ENG_any', 'all_65+_ENG_any', 'min_65+_ENG_any', 'max_65+_ENG_any', 'count_65+_ENG_any', 'sum_65+_ENG_any', 'mean_65+_ENG_any', '%_65+_ENG_any', 'min_18-64_ENG_no', 'max_18-64_ENG_no', 'sum_18-64_ENG_no', 'mean_18-64_ENG_no', 'min_18-64_ENG_nvw', 'max_18-64_ENG_nvw', 'sum_18-64_ENG_nvw', 'mean_18-64_ENG_nvw', 'min_18-64_ENG_well', 'max_18-64_ENG_well', 'sum_18-64_ENG_well', 'mean_18-64_ENG_well', 'max_18-64_ENG_vw', 'sum_18-64_ENG_vw', 'mean_18-64_ENG_vw', 'sum_18-64_ENG_only', 'mean_18-64_ENG_only', '%_18-64_ENG_only', 'any_18-64_ENG_any', 'all_18-64_ENG_any', 'min_18-64_ENG_any', 'max_18-64_ENG_any', 'count_18-64_ENG_any', 'sum_18-64_ENG_any', 'mean_18-64_ENG_any', '%_18-64_ENG_any', 'max_kid_ENG_no', 'mean_kid_ENG_no', 'max_kid_ENG_nvw', 'mean_kid_ENG_nvw', 'max_kid_ENG_well', 'sum_kid_ENG_well', 'mean_kid_ENG_well', 'max_kid_ENG_vw', 'sum_kid_ENG_vw', 'mean_kid_ENG_vw', '%_kid_ENG_vw', 'max_kid_ENG_only', 'sum_kid_ENG_only', 'mean_kid_ENG_only', '%_kid_ENG_only', 'any_kid_ENG_any', 'all_kid_ENG_any', 'min_kid_ENG_any', 'max_kid_ENG_any', 'count_kid_ENG_any', 'sum_kid_ENG_any', 'mean_kid_ENG_any', '%_kid_ENG_any', 'any_anyage_ENG_no', 'all_anyage_ENG_no', 'min_anyage_ENG_no', 'max_anyage_ENG_no', 'count_anyage_ENG_no', 'sum_anyage_ENG_no', 'mean_anyage_ENG_no', '%_anyage_ENG_no', 'any_anyage_ENG_nvw', 'min_anyage_ENG_nvw', 'max_anyage_ENG_nvw', 'count_anyage_ENG_nvw', 'sum_anyage_ENG_nvw', 'mean_anyage_ENG_nvw', '%_anyage_ENG_nvw', 'any_anyage_ENG_well', 'min_anyage_ENG_well', 'max_anyage_ENG_well', 'sum_anyage_ENG_well', 'mean_anyage_ENG_well', '%_anyage_ENG_well', 'min_anyage_ENG_vw', 'max_anyage_ENG_vw', 'sum_anyage_ENG_vw', 'mean_anyage_ENG_vw', '%_anyage_ENG_vw', 'any_anyage_ENG_only', 'max_anyage_ENG_only', 'sum_anyage_ENG_only', 'mean_anyage_ENG_only', '%_anyage_ENG_only', 'min_anyage_ENG_any', 'max_anyage_ENG_any', 'count_anyage_ENG_any', 'sum_anyage_ENG_any', 'mean_anyage_ENG_any', 'max_adult_married', 'sum_adult_married', 'mean_adult_married', 'min_adult_widowed', 'max_adult_widowed', 'count_adult_widowed', 'sum_adult_widowed', 'mean_adult_widowed', 'min_adult_sep/divorced', 'max_adult_sep/divorced', 'count_adult_sep/divorced', 'sum_adult_sep/divorced', 'mean_adult_sep/divorced', 'max_adult_not_married', 'mean_adult_not_married', 'min_adult_any_MSP', 'max_adult_any_MSP', 'count_adult_any_MSP', 'sum_adult_any_MSP', 'mean_adult_any_MSP', 'all_65+_married', 'min_65+_married', 'max_65+_married', 'count_65+_married', 'sum_65+_married', 'mean_65+_married', '%_65+_married', 'all_65+_widowed', 'min_65+_widowed', 'max_65+_widowed', 'count_65+_widowed', 'sum_65+_widowed', 'mean_65+_widowed', '%_65+_widowed', 'all_65+_sep/divorced', 'min_65+_sep/divorced', 'max_65+_sep/divorced', 'count_65+_sep/divorced', 'sum_65+_sep/divorced', 'mean_65+_sep/divorced', '%_65+_sep/divorced', 'all_65+_not_married', 'min_65+_not_married', 'max_65+_not_married', 'count_65+_not_married', 'sum_65+_not_married', 'mean_65+_not_married', '%_65+_not_married', 'any_65+_any_MSP', 'all_65+_any_MSP', 'min_65+_any_MSP', 'max_65+_any_MSP', 'count_65+_any_MSP', 'sum_65+_any_MSP', 'mean_65+_any_MSP', '%_65+_any_MSP', 'min_18-64_married', 'max_18-64_married', 'sum_18-64_married', 'mean_18-64_married', '%_18-64_married', 'min_18-64_widowed', 'max_18-64_widowed', 'count_18-64_widowed', 'sum_18-64_widowed', 'mean_18-64_widowed', 'min_18-64_sep/divorced', 'max_18-64_sep/divorced', 'count_18-64_sep/divorced', 'sum_18-64_sep/divorced', 'mean_18-64_sep/divorced', 'max_18-64_not_married', 'count_18-64_not_married', 'mean_18-64_not_married', 'any_18-64_any_MSP', 'all_18-64_any_MSP', 'min_18-64_any_MSP', 'max_18-64_any_MSP', 'count_18-64_any_MSP', 'sum_18-64_any_MSP', 'mean_18-64_any_MSP', '%_18-64_any_MSP', 'max_kid_married', 'sum_kid_married', 'mean_kid_married', 'max_kid_sep/divorced', 'sum_kid_sep/divorced', 'mean_kid_sep/divorced', 'min_kid_not_married', 'max_kid_not_married', 'count_kid_not_married', 'sum_kid_not_married', 'mean_kid_not_married', 'any_kid_any_MSP', 'all_kid_any_MSP', 'min_kid_any_MSP', 'max_kid_any_MSP', 'count_kid_any_MSP', 'sum_kid_any_MSP', 'mean_kid_any_MSP', '%_kid_any_MSP', 'any_anyage_married', 'min_anyage_married', 'max_anyage_married', 'count_anyage_married', 'sum_anyage_married', 'mean_anyage_married', 'any_anyage_widowed', 'all_anyage_widowed', 'min_anyage_widowed', 'max_anyage_widowed', 'count_anyage_widowed', 'sum_anyage_widowed', 'mean_anyage_widowed', '%_anyage_widowed', 'any_anyage_sep/divorced', 'min_anyage_sep/divorced', 'max_anyage_sep/divorced', 'count_anyage_sep/divorced', 'sum_anyage_sep/divorced', 'mean_anyage_sep/divorced', '%_anyage_sep/divorced', 'min_anyage_not_married', 'max_anyage_not_married', 'sum_anyage_not_married', 'mean_anyage_not_married', '%_anyage_not_married', 'min_anyage_any_MSP', 'max_anyage_any_MSP', 'count_anyage_any_MSP', 'sum_anyage_any_MSP', 'mean_anyage_any_MSP', 'max_adult_no_work', 'mean_adult_no_work', 'max_adult_<14WKW', 'count_adult_<14WKW', 'sum_adult_<14WKW', 'mean_adult_<14WKW', 'max_adult_14-26WKW', 'count_adult_14-26WKW', 'sum_adult_14-26WKW', 'mean_adult_14-26WKW', 'max_adult_27-39WKW', 'count_adult_27-39WKW', 'sum_adult_27-39WKW', 'mean_adult_27-39WKW', 'max_adult_40-47WKW', 'count_adult_40-47WKW', 'sum_adult_40-47WKW', 'mean_adult_40-47WKW', 'max_adult_48-49WKW', 'count_adult_48-49WKW', 'sum_adult_48-49WKW', 'mean_adult_48-49WKW', 'mean_adult_50-52WKW', 'mean_adult_>40WKW', 'any_adult_nonzero_WKW', 'all_adult_nonzero_WKW', 'mean_adult_nonzero_WKW', '%_adult_nonzero_WKW', 'min_adult_any_WKW', 'max_adult_any_WKW', 'count_adult_any_WKW', 'sum_adult_any_WKW', 'mean_adult_any_WKW', 'min_65+_no_work', 'max_65+_no_work', 'sum_65+_no_work', 'mean_65+_no_work', '%_65+_no_work', 'max_65+_<14WKW', 'sum_65+_<14WKW', 'mean_65+_<14WKW', 'max_65+_14-26WKW', 'sum_65+_14-26WKW', 'mean_65+_14-26WKW', 'max_65+_27-39WKW', 'sum_65+_27-39WKW', 'mean_65+_27-39WKW', 'max_65+_40-47WKW', 'sum_65+_40-47WKW', 'mean_65+_40-47WKW', 'max_65+_48-49WKW', 'sum_65+_48-49WKW', 'mean_65+_48-49WKW', 'min_65+_50-52WKW', 'max_65+_50-52WKW', 'count_65+_50-52WKW', 'sum_65+_50-52WKW', 'mean_65+_50-52WKW', '%_65+_50-52WKW', 'min_65+_>40WKW', 'max_65+_>40WKW', 'count_65+_>40WKW', 'sum_65+_>40WKW', 'mean_65+_>40WKW', '%_65+_>40WKW', 'min_65+_nonzero_WKW', 'max_65+_nonzero_WKW', 'count_65+_nonzero_WKW', 'sum_65+_nonzero_WKW', 'mean_65+_nonzero_WKW', '%_65+_nonzero_WKW', 'any_65+_any_WKW', 'all_65+_any_WKW', 'min_65+_any_WKW', 'max_65+_any_WKW', 'count_65+_any_WKW', 'sum_65+_any_WKW', 'mean_65+_any_WKW', '%_65+_any_WKW', 'max_18-64_no_work', 'mean_18-64_no_work', 'max_18-64_<14WKW', 'count_18-64_<14WKW', 'sum_18-64_<14WKW', 'mean_18-64_<14WKW', 'any_18-64_14-26WKW', 'max_18-64_14-26WKW', 'count_18-64_14-26WKW', 'sum_18-64_14-26WKW', 'mean_18-64_14-26WKW', 'any_18-64_27-39WKW', 'max_18-64_27-39WKW', 'count_18-64_27-39WKW', 'sum_18-64_27-39WKW', 'mean_18-64_27-39WKW', 'any_18-64_40-47WKW', 'max_18-64_40-47WKW', 'count_18-64_40-47WKW', 'sum_18-64_40-47WKW', 'mean_18-64_40-47WKW', 'any_18-64_48-49WKW', 'min_18-64_48-49WKW', 'max_18-64_48-49WKW', 'count_18-64_48-49WKW', 'sum_18-64_48-49WKW', 'mean_18-64_48-49WKW', '%_18-64_48-49WKW', 'count_18-64_50-52WKW', 'mean_18-64_50-52WKW', 'count_18-64_>40WKW', 'mean_18-64_>40WKW', 'count_18-64_nonzero_WKW', 'mean_18-64_nonzero_WKW', 'any_18-64_any_WKW', 'all_18-64_any_WKW', 'min_18-64_any_WKW', 'max_18-64_any_WKW', 'count_18-64_any_WKW', 'sum_18-64_any_WKW', 'mean_18-64_any_WKW', '%_18-64_any_WKW', 'any_kid_no_work', 'all_kid_no_work', 'min_kid_no_work', 'max_kid_no_work', 'count_kid_no_work', 'sum_kid_no_work', 'mean_kid_no_work', '%_kid_no_work', 'max_kid_<14WKW', 'sum_kid_<14WKW', 'mean_kid_<14WKW', 'max_kid_14-26WKW', 'sum_kid_14-26WKW', 'mean_kid_14-26WKW', 'max_kid_27-39WKW', 'sum_kid_27-39WKW', 'mean_kid_27-39WKW', 'max_kid_40-47WKW', 'sum_kid_40-47WKW', 'mean_kid_40-47WKW', 'max_kid_50-52WKW', 'sum_kid_50-52WKW', 'mean_kid_50-52WKW', 'max_kid_>40WKW', 'sum_kid_>40WKW', 'mean_kid_>40WKW', 'max_kid_nonzero_WKW', 'sum_kid_nonzero_WKW', 'mean_kid_nonzero_WKW', 'any_kid_any_WKW', 'all_kid_any_WKW', 'min_kid_any_WKW', 'max_kid_any_WKW', 'count_kid_any_WKW', 'sum_kid_any_WKW', 'mean_kid_any_WKW', '%_kid_any_WKW', 'all_anyage_no_work', 'max_anyage_no_work', 'sum_anyage_no_work', 'mean_anyage_no_work', 'any_anyage_<14WKW', 'min_anyage_<14WKW', 'max_anyage_<14WKW', 'count_anyage_<14WKW', 'sum_anyage_<14WKW', 'mean_anyage_<14WKW', '%_anyage_<14WKW', 'any_anyage_14-26WKW', 'all_anyage_14-26WKW', 'min_anyage_14-26WKW', 'max_anyage_14-26WKW', 'count_anyage_14-26WKW', 'sum_anyage_14-26WKW', 'mean_anyage_14-26WKW', '%_anyage_14-26WKW', 'any_anyage_27-39WKW', 'min_anyage_27-39WKW', 'max_anyage_27-39WKW', 'count_anyage_27-39WKW', 'sum_anyage_27-39WKW', 'mean_anyage_27-39WKW', '%_anyage_27-39WKW', 'any_anyage_40-47WKW', 'min_anyage_40-47WKW', 'max_anyage_40-47WKW', 'count_anyage_40-47WKW', 'sum_anyage_40-47WKW', 'mean_anyage_40-47WKW', '%_anyage_40-47WKW', 'any_anyage_48-49WKW', 'min_anyage_48-49WKW', 'max_anyage_48-49WKW', 'count_anyage_48-49WKW', 'sum_anyage_48-49WKW', 'mean_anyage_48-49WKW', '%_anyage_48-49WKW', 'any_anyage_50-52WKW', 'min_anyage_50-52WKW', 'max_anyage_50-52WKW', 'count_anyage_50-52WKW', 'sum_anyage_50-52WKW', 'mean_anyage_50-52WKW', 'any_anyage_>40WKW', 'min_anyage_>40WKW', 'max_anyage_>40WKW', 'count_anyage_>40WKW', 'sum_anyage_>40WKW', 'mean_anyage_>40WKW', 'any_anyage_nonzero_WKW', 'all_anyage_nonzero_WKW', 'min_anyage_nonzero_WKW', 'max_anyage_nonzero_WKW', 'count_anyage_nonzero_WKW', 'sum_anyage_nonzero_WKW', 'mean_anyage_nonzero_WKW', '%_anyage_nonzero_WKW', 'min_anyage_any_WKW', 'max_anyage_any_WKW', 'count_anyage_any_WKW', 'sum_anyage_any_WKW', 'mean_anyage_any_WKW', 'any_adult_no_work_hrs', 'all_adult_no_work_hrs', 'min_adult_no_work_hrs', 'max_adult_no_work_hrs', 'count_adult_no_work_hrs', 'sum_adult_no_work_hrs', 'mean_adult_no_work_hrs', '%_adult_no_work_hrs', 'any_adult_<10_work_hrs', 'all_adult_<10_work_hrs', 'min_adult_<10_work_hrs', 'max_adult_<10_work_hrs', 'count_adult_<10_work_hrs', 'sum_adult_<10_work_hrs', 'mean_adult_<10_work_hrs', '%_adult_<10_work_hrs', 'any_adult_<15_work_hrs', 'all_adult_<15_work_hrs', 'min_adult_<15_work_hrs', 'max_adult_<15_work_hrs', 'count_adult_<15_work_hrs', 'sum_adult_<15_work_hrs', 'mean_adult_<15_work_hrs', '%_adult_<15_work_hrs', 'any_adult_<20_work_hrs', 'all_adult_<20_work_hrs', 'min_adult_<20_work_hrs', 'max_adult_<20_work_hrs', 'count_adult_<20_work_hrs', 'sum_adult_<20_work_hrs', 'mean_adult_<20_work_hrs', '%_adult_<20_work_hrs', 'sum_adult_<30_work_hrs', 'mean_adult_<30_work_hrs', 'mean_adult_<40_work_hrs', 'any_adult_50_plus_work_hrs', 'all_adult_50_plus_work_hrs', 'max_adult_50_plus_work_hrs', 'sum_adult_50_plus_work_hrs', 'mean_adult_50_plus_work_hrs', '%_adult_50_plus_work_hrs', 'any_adult_40_plus_work_hrs', 'all_adult_40_plus_work_hrs', 'max_adult_40_plus_work_hrs', 'mean_adult_40_plus_work_hrs', '%_adult_40_plus_work_hrs', 'min_adult_any_WKHP', 'max_adult_any_WKHP', 'count_adult_any_WKHP', 'sum_adult_any_WKHP', 'mean_adult_any_WKHP', 'any_65+_no_work_hrs', 'all_65+_no_work_hrs', 'min_65+_no_work_hrs', 'max_65+_no_work_hrs', 'count_65+_no_work_hrs', 'sum_65+_no_work_hrs', 'mean_65+_no_work_hrs', '%_65+_no_work_hrs', 'any_65+_<10_work_hrs', 'all_65+_<10_work_hrs', 'min_65+_<10_work_hrs', 'max_65+_<10_work_hrs', 'count_65+_<10_work_hrs', 'sum_65+_<10_work_hrs', 'mean_65+_<10_work_hrs', '%_65+_<10_work_hrs', 'any_65+_<15_work_hrs', 'all_65+_<15_work_hrs', 'min_65+_<15_work_hrs', 'max_65+_<15_work_hrs', 'count_65+_<15_work_hrs', 'sum_65+_<15_work_hrs', 'mean_65+_<15_work_hrs', '%_65+_<15_work_hrs', 'any_65+_<20_work_hrs', 'all_65+_<20_work_hrs', 'min_65+_<20_work_hrs', 'max_65+_<20_work_hrs', 'count_65+_<20_work_hrs', 'sum_65+_<20_work_hrs', 'mean_65+_<20_work_hrs', '%_65+_<20_work_hrs', 'any_65+_<30_work_hrs', 'all_65+_<30_work_hrs', 'min_65+_<30_work_hrs', 'max_65+_<30_work_hrs', 'count_65+_<30_work_hrs', 'sum_65+_<30_work_hrs', 'mean_65+_<30_work_hrs', '%_65+_<30_work_hrs', 'any_65+_<40_work_hrs', 'all_65+_<40_work_hrs', 'min_65+_<40_work_hrs', 'max_65+_<40_work_hrs', 'count_65+_<40_work_hrs', 'sum_65+_<40_work_hrs', 'mean_65+_<40_work_hrs', '%_65+_<40_work_hrs', 'any_65+_<50_work_hrs', 'all_65+_<50_work_hrs', 'min_65+_<50_work_hrs', 'max_65+_<50_work_hrs', 'count_65+_<50_work_hrs', 'sum_65+_<50_work_hrs', 'mean_65+_<50_work_hrs', '%_65+_<50_work_hrs', 'max_65+_50_plus_work_hrs', 'sum_65+_50_plus_work_hrs', 'mean_65+_50_plus_work_hrs', 'min_65+_40_plus_work_hrs', 'max_65+_40_plus_work_hrs', 'count_65+_40_plus_work_hrs', 'sum_65+_40_plus_work_hrs', 'mean_65+_40_plus_work_hrs', '%_65+_40_plus_work_hrs', 'any_65+_any_WKHP', 'all_65+_any_WKHP', 'min_65+_any_WKHP', 'max_65+_any_WKHP', 'count_65+_any_WKHP', 'sum_65+_any_WKHP', 'mean_65+_any_WKHP', '%_65+_any_WKHP', 'any_18-64_no_work_hrs', 'all_18-64_no_work_hrs', 'min_18-64_no_work_hrs', 'max_18-64_no_work_hrs', 'count_18-64_no_work_hrs', 'sum_18-64_no_work_hrs', 'mean_18-64_no_work_hrs', '%_18-64_no_work_hrs', 'any_18-64_<10_work_hrs', 'all_18-64_<10_work_hrs', 'min_18-64_<10_work_hrs', 'max_18-64_<10_work_hrs', 'count_18-64_<10_work_hrs', 'sum_18-64_<10_work_hrs', 'mean_18-64_<10_work_hrs', '%_18-64_<10_work_hrs', 'any_18-64_<15_work_hrs', 'all_18-64_<15_work_hrs', 'min_18-64_<15_work_hrs', 'max_18-64_<15_work_hrs', 'count_18-64_<15_work_hrs', 'sum_18-64_<15_work_hrs', 'mean_18-64_<15_work_hrs', '%_18-64_<15_work_hrs', 'any_18-64_<20_work_hrs', 'all_18-64_<20_work_hrs', 'min_18-64_<20_work_hrs', 'max_18-64_<20_work_hrs', 'count_18-64_<20_work_hrs', 'sum_18-64_<20_work_hrs', 'mean_18-64_<20_work_hrs', '%_18-64_<20_work_hrs', 'mean_18-64_<30_work_hrs', 'mean_18-64_<40_work_hrs', 'mean_18-64_<50_work_hrs', '%_18-64_<50_work_hrs', 'any_18-64_50_plus_work_hrs', 'all_18-64_50_plus_work_hrs', 'min_18-64_50_plus_work_hrs', 'max_18-64_50_plus_work_hrs', 'count_18-64_50_plus_work_hrs', 'sum_18-64_50_plus_work_hrs', 'mean_18-64_50_plus_work_hrs', '%_18-64_50_plus_work_hrs', 'max_18-64_40_plus_work_hrs', 'count_18-64_40_plus_work_hrs', 'mean_18-64_40_plus_work_hrs', 'any_18-64_any_WKHP', 'all_18-64_any_WKHP', 'min_18-64_any_WKHP', 'max_18-64_any_WKHP', 'count_18-64_any_WKHP', 'sum_18-64_any_WKHP', 'mean_18-64_any_WKHP', '%_18-64_any_WKHP', 'any_kid_no_work_hrs', 'all_kid_no_work_hrs', 'min_kid_no_work_hrs', 'max_kid_no_work_hrs', 'count_kid_no_work_hrs', 'sum_kid_no_work_hrs', 'mean_kid_no_work_hrs', '%_kid_no_work_hrs', 'any_kid_<10_work_hrs', 'all_kid_<10_work_hrs', 'min_kid_<10_work_hrs', 'max_kid_<10_work_hrs', 'count_kid_<10_work_hrs', 'sum_kid_<10_work_hrs', 'mean_kid_<10_work_hrs', '%_kid_<10_work_hrs', 'any_kid_<15_work_hrs', 'all_kid_<15_work_hrs', 'min_kid_<15_work_hrs', 'max_kid_<15_work_hrs', 'count_kid_<15_work_hrs', 'sum_kid_<15_work_hrs', 'mean_kid_<15_work_hrs', '%_kid_<15_work_hrs', 'any_kid_<20_work_hrs', 'all_kid_<20_work_hrs', 'min_kid_<20_work_hrs', 'max_kid_<20_work_hrs', 'count_kid_<20_work_hrs', 'sum_kid_<20_work_hrs', 'mean_kid_<20_work_hrs', '%_kid_<20_work_hrs', 'any_kid_<30_work_hrs', 'all_kid_<30_work_hrs', 'min_kid_<30_work_hrs', 'max_kid_<30_work_hrs', 'count_kid_<30_work_hrs', 'sum_kid_<30_work_hrs', 'mean_kid_<30_work_hrs', '%_kid_<30_work_hrs', 'any_kid_<40_work_hrs', 'all_kid_<40_work_hrs', 'min_kid_<40_work_hrs', 'max_kid_<40_work_hrs', 'count_kid_<40_work_hrs', 'sum_kid_<40_work_hrs', 'mean_kid_<40_work_hrs', '%_kid_<40_work_hrs', 'any_kid_<50_work_hrs', 'all_kid_<50_work_hrs', 'min_kid_<50_work_hrs', 'max_kid_<50_work_hrs', 'count_kid_<50_work_hrs', 'sum_kid_<50_work_hrs', 'mean_kid_<50_work_hrs', '%_kid_<50_work_hrs', 'max_kid_40_plus_work_hrs', 'sum_kid_40_plus_work_hrs', 'mean_kid_40_plus_work_hrs', 'any_kid_any_WKHP', 'all_kid_any_WKHP', 'min_kid_any_WKHP', 'max_kid_any_WKHP', 'count_kid_any_WKHP', 'sum_kid_any_WKHP', 'mean_kid_any_WKHP', '%_kid_any_WKHP', 'any_anyage_no_work_hrs', 'all_anyage_no_work_hrs', 'min_anyage_no_work_hrs', 'max_anyage_no_work_hrs', 'count_anyage_no_work_hrs', 'sum_anyage_no_work_hrs', 'mean_anyage_no_work_hrs', '%_anyage_no_work_hrs', 'any_anyage_<10_work_hrs', 'all_anyage_<10_work_hrs', 'min_anyage_<10_work_hrs', 'max_anyage_<10_work_hrs', 'count_anyage_<10_work_hrs', 'sum_anyage_<10_work_hrs', 'mean_anyage_<10_work_hrs', '%_anyage_<10_work_hrs', 'any_anyage_<15_work_hrs', 'all_anyage_<15_work_hrs', 'min_anyage_<15_work_hrs', 'max_anyage_<15_work_hrs', 'count_anyage_<15_work_hrs', 'sum_anyage_<15_work_hrs', 'mean_anyage_<15_work_hrs', '%_anyage_<15_work_hrs', 'any_anyage_<20_work_hrs', 'all_anyage_<20_work_hrs', 'min_anyage_<20_work_hrs', 'max_anyage_<20_work_hrs', 'count_anyage_<20_work_hrs', 'sum_anyage_<20_work_hrs', 'mean_anyage_<20_work_hrs', '%_anyage_<20_work_hrs', 'all_anyage_<30_work_hrs', 'min_anyage_<30_work_hrs', 'max_anyage_<30_work_hrs', 'count_anyage_<30_work_hrs', 'sum_anyage_<30_work_hrs', 'mean_anyage_<30_work_hrs', 'all_anyage_<40_work_hrs', 'max_anyage_<40_work_hrs', 'sum_anyage_<40_work_hrs', 'mean_anyage_<40_work_hrs', '%_anyage_<40_work_hrs', 'any_anyage_<50_work_hrs', 'all_anyage_<50_work_hrs', 'max_anyage_<50_work_hrs', 'count_anyage_<50_work_hrs', 'sum_anyage_<50_work_hrs', 'mean_anyage_<50_work_hrs', '%_anyage_<50_work_hrs', 'any_anyage_50_plus_work_hrs', 'all_anyage_50_plus_work_hrs', 'min_anyage_50_plus_work_hrs', 'max_anyage_50_plus_work_hrs', 'count_anyage_50_plus_work_hrs', 'sum_anyage_50_plus_work_hrs', 'mean_anyage_50_plus_work_hrs', '%_anyage_50_plus_work_hrs', 'any_anyage_40_plus_work_hrs', 'all_anyage_40_plus_work_hrs', 'min_anyage_40_plus_work_hrs', 'max_anyage_40_plus_work_hrs', 'count_anyage_40_plus_work_hrs', 'sum_anyage_40_plus_work_hrs', 'mean_anyage_40_plus_work_hrs', '%_anyage_40_plus_work_hrs', 'min_anyage_any_WKHP', 'max_anyage_any_WKHP', 'count_anyage_any_WKHP', 'sum_anyage_any_WKHP', 'mean_anyage_any_WKHP', 'max_adult_DIS', 'sum_adult_DIS', 'mean_adult_DIS', 'any_adult_not_DIS', 'all_adult_not_DIS', 'mean_adult_not_DIS', '%_adult_not_DIS', 'min_adult_any_DIS', 'max_adult_any_DIS', 'count_adult_any_DIS', 'sum_adult_any_DIS', 'mean_adult_any_DIS', 'min_65+_DIS', 'max_65+_DIS', 'count_65+_DIS', 'sum_65+_DIS', 'mean_65+_DIS', '%_65+_DIS', 'min_65+_not_DIS', 'max_65+_not_DIS', 'sum_65+_not_DIS', 'mean_65+_not_DIS', '%_65+_not_DIS', 'any_65+_any_DIS', 'all_65+_any_DIS', 'min_65+_any_DIS', 'max_65+_any_DIS', 'count_65+_any_DIS', 'sum_65+_any_DIS', 'mean_65+_any_DIS', '%_65+_any_DIS', 'min_18-64_DIS', 'max_18-64_DIS', 'sum_18-64_DIS', 'mean_18-64_DIS', 'mean_18-64_not_DIS', '%_18-64_not_DIS', 'any_18-64_any_DIS', 'all_18-64_any_DIS', 'min_18-64_any_DIS', 'max_18-64_any_DIS', 'count_18-64_any_DIS', 'sum_18-64_any_DIS', 'mean_18-64_any_DIS', '%_18-64_any_DIS', 'max_kid_DIS', 'mean_kid_DIS', 'any_kid_not_DIS', 'all_kid_not_DIS', 'min_kid_not_DIS', 'max_kid_not_DIS', 'count_kid_not_DIS', 'sum_kid_not_DIS', 'mean_kid_not_DIS', '%_kid_not_DIS', 'any_kid_any_DIS', 'all_kid_any_DIS', 'min_kid_any_DIS', 'max_kid_any_DIS', 'count_kid_any_DIS', 'sum_kid_any_DIS', 'mean_kid_any_DIS', '%_kid_any_DIS', 'any_anyage_DIS', 'all_anyage_DIS', 'min_anyage_DIS', 'max_anyage_DIS', 'count_anyage_DIS', 'sum_anyage_DIS', 'mean_anyage_DIS', '%_anyage_DIS', 'any_anyage_not_DIS', 'all_anyage_not_DIS', 'max_anyage_not_DIS', 'sum_anyage_not_DIS', '%_anyage_not_DIS', 'min_anyage_any_DIS', 'max_anyage_any_DIS', 'count_anyage_any_DIS', 'sum_anyage_any_DIS', 'mean_anyage_any_DIS', 'all_adult_NP1', 'max_adult_NP1', 'count_adult_NP1', 'sum_adult_NP1', 'mean_adult_NP1', '%_adult_NP1', 'all_adult_NP2', 'max_adult_NP2', 'count_adult_NP2', 'sum_adult_NP2', 'mean_adult_NP2', '%_adult_NP2', 'all_adult_NP3', 'count_adult_NP3', 'sum_adult_NP3', 'mean_adult_NP3', '%_adult_NP3', 'all_adult_NP4', 'max_adult_NP4', 'sum_adult_NP4', 'mean_adult_NP4', '%_adult_NP4', 'all_adult_NP5', 'max_adult_NP5', 'sum_adult_NP5', 'mean_adult_NP5', '%_adult_NP5', 'all_adult_NP>5', 'sum_adult_NP>5', 'mean_adult_NP>5', '%_adult_NP>5', 'all_adult_NP>6', 'max_adult_NP>6', 'sum_adult_NP>6', 'mean_adult_NP>6', '%_adult_NP>6', 'all_adult_NP>8', 'max_adult_NP>8', 'sum_adult_NP>8', 'mean_adult_NP>8', '%_adult_NP>8', 'sum_adult_NP>10', 'mean_adult_NP>10', 'sum_adult_NP>12', 'mean_adult_NP>12', 'min_adult_anyNP', 'max_adult_anyNP', 'count_adult_anyNP', 'sum_adult_anyNP', 'mean_adult_anyNP', 'all_65+_NP1', 'min_65+_NP1', 'max_65+_NP1', 'count_65+_NP1', 'sum_65+_NP1', 'mean_65+_NP1', '%_65+_NP1', 'all_65+_NP2', 'min_65+_NP2', 'max_65+_NP2', 'sum_65+_NP2', 'mean_65+_NP2', '%_65+_NP2', 'all_65+_NP3', 'min_65+_NP3', 'max_65+_NP3', 'sum_65+_NP3', 'mean_65+_NP3', '%_65+_NP3', 'all_65+_NP4', 'min_65+_NP4', 'max_65+_NP4', 'sum_65+_NP4', 'mean_65+_NP4', '%_65+_NP4', 'all_65+_NP5', 'min_65+_NP5', 'max_65+_NP5', 'sum_65+_NP5', 'mean_65+_NP5', '%_65+_NP5', 'all_65+_NP>5', 'min_65+_NP>5', 'max_65+_NP>5', 'sum_65+_NP>5', 'mean_65+_NP>5', '%_65+_NP>5', 'max_65+_NP>6', 'sum_65+_NP>6', 'mean_65+_NP>6', 'max_65+_NP>8', 'mean_65+_NP>8', 'max_65+_NP>10', 'mean_65+_NP>10', 'max_65+_NP>12', 'sum_65+_NP>12', 'mean_65+_NP>12', 'any_65+_anyNP', 'all_65+_anyNP', 'min_65+_anyNP', 'max_65+_anyNP', 'count_65+_anyNP', 'sum_65+_anyNP', 'mean_65+_anyNP', '%_65+_anyNP', 'all_18-64_NP1', 'min_18-64_NP1', 'max_18-64_NP1', 'count_18-64_NP1', 'sum_18-64_NP1', 'mean_18-64_NP1', '%_18-64_NP1', 'all_18-64_NP2', 'max_18-64_NP2', 'sum_18-64_NP2', 'mean_18-64_NP2', '%_18-64_NP2', 'any_18-64_NP3', 'all_18-64_NP3', 'min_18-64_NP3', 'max_18-64_NP3', 'sum_18-64_NP3', 'mean_18-64_NP3', '%_18-64_NP3', 'any_18-64_NP4', 'all_18-64_NP4', 'min_18-64_NP4', 'max_18-64_NP4', 'count_18-64_NP4', 'sum_18-64_NP4', 'mean_18-64_NP4', '%_18-64_NP4', 'any_18-64_NP5', 'all_18-64_NP5', 'min_18-64_NP5', 'max_18-64_NP5', 'count_18-64_NP5', 'sum_18-64_NP5', 'mean_18-64_NP5', '%_18-64_NP5', 'any_18-64_NP>5', 'all_18-64_NP>5', 'max_18-64_NP>5', 'count_18-64_NP>5', 'sum_18-64_NP>5', 'mean_18-64_NP>5', '%_18-64_NP>5', 'any_18-64_NP>6', 'all_18-64_NP>6', 'min_18-64_NP>6', 'max_18-64_NP>6', 'count_18-64_NP>6', 'sum_18-64_NP>6', 'mean_18-64_NP>6', '%_18-64_NP>6', 'max_18-64_NP>8', 'count_18-64_NP>8', 'sum_18-64_NP>8', 'mean_18-64_NP>8', 'min_18-64_NP>10', 'max_18-64_NP>10', 'count_18-64_NP>10', 'sum_18-64_NP>10', 'mean_18-64_NP>10', 'min_18-64_NP>12', 'max_18-64_NP>12', 'count_18-64_NP>12', 'sum_18-64_NP>12', 'mean_18-64_NP>12', 'any_18-64_anyNP', 'all_18-64_anyNP', 'min_18-64_anyNP', 'max_18-64_anyNP', 'count_18-64_anyNP', 'sum_18-64_anyNP', 'mean_18-64_anyNP', '%_18-64_anyNP', 'max_kid_NP1', 'sum_kid_NP1', 'mean_kid_NP1', 'all_kid_NP2', 'max_kid_NP2', 'count_kid_NP2', 'sum_kid_NP2', 'mean_kid_NP2', '%_kid_NP2', 'max_kid_NP3', 'count_kid_NP3', 'sum_kid_NP3', 'mean_kid_NP3', '%_kid_NP3', 'all_kid_NP4', 'count_kid_NP4', 'sum_kid_NP4', 'mean_kid_NP4', '%_kid_NP4', 'all_kid_NP5', 'mean_kid_NP5', '%_kid_NP5', 'all_kid_NP>5', 'mean_kid_NP>5', '%_kid_NP>5', 'all_kid_NP>6', 'mean_kid_NP>6', '%_kid_NP>6', 'sum_kid_NP>8', 'mean_kid_NP>8', 'mean_kid_NP>10', 'sum_kid_NP>12', 'mean_kid_NP>12', 'any_kid_anyNP', 'all_kid_anyNP', 'min_kid_anyNP', 'max_kid_anyNP', 'count_kid_anyNP', 'sum_kid_anyNP', 'mean_kid_anyNP', '%_kid_anyNP', 'any_anyage_NP1', 'all_anyage_NP1', 'min_anyage_NP1', 'max_anyage_NP1', 'count_anyage_NP1', 'sum_anyage_NP1', 'mean_anyage_NP1', '%_anyage_NP1', 'any_anyage_NP2', 'all_anyage_NP2', 'min_anyage_NP2', 'max_anyage_NP2', 'count_anyage_NP2', 'sum_anyage_NP2', 'mean_anyage_NP2', '%_anyage_NP2', 'any_anyage_NP3', 'all_anyage_NP3', 'max_anyage_NP3', 'count_anyage_NP3', 'sum_anyage_NP3', 'mean_anyage_NP3', '%_anyage_NP3', 'any_anyage_NP4', 'all_anyage_NP4', 'max_anyage_NP4', 'count_anyage_NP4', 'sum_anyage_NP4', 'mean_anyage_NP4', '%_anyage_NP4', 'any_anyage_NP5', 'all_anyage_NP5', 'max_anyage_NP5', 'sum_anyage_NP5', 'mean_anyage_NP5', '%_anyage_NP5', 'any_anyage_NP>5', 'all_anyage_NP>5', 'max_anyage_NP>5', 'sum_anyage_NP>5', 'mean_anyage_NP>5', '%_anyage_NP>5', 'any_anyage_NP>6', 'all_anyage_NP>6', 'max_anyage_NP>6', 'sum_anyage_NP>6', 'mean_anyage_NP>6', '%_anyage_NP>6', 'any_anyage_NP>8', 'all_anyage_NP>8', 'max_anyage_NP>8', 'sum_anyage_NP>8', 'mean_anyage_NP>8', '%_anyage_NP>8', 'max_anyage_NP>10', 'sum_anyage_NP>10', 'mean_anyage_NP>10', 'min_anyage_NP>12', 'max_anyage_NP>12', 'count_anyage_NP>12', 'sum_anyage_NP>12', 'mean_anyage_NP>12', 'min_anyage_anyNP', 'max_anyage_anyNP', 'count_anyage_anyNP', 'sum_anyage_anyNP', 'mean_anyage_anyNP', 'count_adult_work_trans', 'all_65+_work_trans', 'count_65+_work_trans', 'sum_65+_work_trans', 'mean_65+_work_trans', '%_65+_work_trans', 'all_18-64_work_trans', 'count_18-64_work_trans', 'sum_18-64_work_trans', '%_18-64_work_trans', 'all_kid_work_trans', 'count_kid_work_trans', 'sum_kid_work_trans', '%_kid_work_trans', 'any_anyage_work_trans', 'max_anyage_work_trans', 'count_anyage_work_trans', 'sum_anyage_work_trans', 'mean_anyage_work_trans', 'max_adult_WAG0', 'sum_adult_WAG0', 'mean_adult_WAG0', 'sum_adult_WAG<10', 'mean_adult_WAG<10', 'min_adult_WAG<15', 'max_adult_WAG<15', 'sum_adult_WAG<15', 'mean_adult_WAG<15', 'min_adult_WAG<20', 'max_adult_WAG<20', 'count_adult_WAG<20', 'sum_adult_WAG<20', 'mean_adult_WAG<20', 'min_adult_WAG<25', 'max_adult_WAG<25', 'count_adult_WAG<25', 'sum_adult_WAG<25', 'mean_adult_WAG<25', 'min_adult_WAG<30', 'max_adult_WAG<30', 'count_adult_WAG<30', 'sum_adult_WAG<30', 'mean_adult_WAG<30', 'min_adult_WAG<35', 'max_adult_WAG<35', 'count_adult_WAG<35', 'sum_adult_WAG<35', 'mean_adult_WAG<35', 'min_adult_WAG<40', 'max_adult_WAG<40', 'count_adult_WAG<40', 'sum_adult_WAG<40', 'mean_adult_WAG<40', 'min_adult_WAG<45', 'max_adult_WAG<45', 'count_adult_WAG<45', 'sum_adult_WAG<45', 'mean_adult_WAG<45', 'min_adult_WAG<50', 'max_adult_WAG<50', 'count_adult_WAG<50', 'sum_adult_WAG<50', 'mean_adult_WAG<50', 'max_adult_WAG<60', 'count_adult_WAG<60', 'sum_adult_WAG<60', 'mean_adult_WAG<60', 'max_adult_WAG<70', 'count_adult_WAG<70', 'sum_adult_WAG<70', 'mean_adult_WAG<70', 'min_adult_WAG<80', 'max_adult_WAG<80', 'count_adult_WAG<80', 'sum_adult_WAG<80', 'mean_adult_WAG<80', 'min_adult_WAG_any', 'max_adult_WAG_any', 'count_adult_WAG_any', 'sum_adult_WAG_any', 'mean_adult_WAG_any', 'any_65+_WAG0', 'all_65+_WAG0', 'min_65+_WAG0', 'max_65+_WAG0', 'count_65+_WAG0', 'sum_65+_WAG0', 'mean_65+_WAG0', '%_65+_WAG0', 'any_65+_WAG<10', 'all_65+_WAG<10', 'min_65+_WAG<10', 'max_65+_WAG<10', 'count_65+_WAG<10', 'sum_65+_WAG<10', 'mean_65+_WAG<10', '%_65+_WAG<10', 'any_65+_WAG<15', 'all_65+_WAG<15', 'min_65+_WAG<15', 'max_65+_WAG<15', 'count_65+_WAG<15', 'sum_65+_WAG<15', 'mean_65+_WAG<15', '%_65+_WAG<15', 'any_65+_WAG<20', 'all_65+_WAG<20', 'min_65+_WAG<20', 'max_65+_WAG<20', 'count_65+_WAG<20', 'sum_65+_WAG<20', 'mean_65+_WAG<20', '%_65+_WAG<20', 'any_65+_WAG<25', 'all_65+_WAG<25', 'min_65+_WAG<25', 'max_65+_WAG<25', 'count_65+_WAG<25', 'sum_65+_WAG<25', 'mean_65+_WAG<25', '%_65+_WAG<25', 'any_65+_WAG<30', 'all_65+_WAG<30', 'min_65+_WAG<30', 'max_65+_WAG<30', 'count_65+_WAG<30', 'sum_65+_WAG<30', 'mean_65+_WAG<30', '%_65+_WAG<30', 'any_65+_WAG<35', 'all_65+_WAG<35', 'min_65+_WAG<35', 'max_65+_WAG<35', 'count_65+_WAG<35', 'sum_65+_WAG<35', 'mean_65+_WAG<35', '%_65+_WAG<35', 'any_65+_WAG<40', 'all_65+_WAG<40', 'min_65+_WAG<40', 'max_65+_WAG<40', 'count_65+_WAG<40', 'sum_65+_WAG<40', 'mean_65+_WAG<40', '%_65+_WAG<40', 'any_65+_WAG<45', 'all_65+_WAG<45', 'min_65+_WAG<45', 'max_65+_WAG<45', 'count_65+_WAG<45', 'sum_65+_WAG<45', 'mean_65+_WAG<45', '%_65+_WAG<45', 'any_65+_WAG<50', 'all_65+_WAG<50', 'min_65+_WAG<50', 'max_65+_WAG<50', 'count_65+_WAG<50', 'sum_65+_WAG<50', 'mean_65+_WAG<50', '%_65+_WAG<50', 'any_65+_WAG<60', 'all_65+_WAG<60', 'min_65+_WAG<60', 'max_65+_WAG<60', 'count_65+_WAG<60', 'sum_65+_WAG<60', 'mean_65+_WAG<60', '%_65+_WAG<60', 'any_65+_WAG<70', 'all_65+_WAG<70', 'min_65+_WAG<70', 'max_65+_WAG<70', 'count_65+_WAG<70', 'sum_65+_WAG<70', 'mean_65+_WAG<70', '%_65+_WAG<70', 'any_65+_WAG<80', 'all_65+_WAG<80', 'min_65+_WAG<80', 'max_65+_WAG<80', 'count_65+_WAG<80', 'sum_65+_WAG<80', 'mean_65+_WAG<80', '%_65+_WAG<80', 'any_65+_WAG_any', 'all_65+_WAG_any', 'min_65+_WAG_any', 'max_65+_WAG_any', 'count_65+_WAG_any', 'sum_65+_WAG_any', 'mean_65+_WAG_any', '%_65+_WAG_any', 'max_18-64_WAG0', 'mean_18-64_WAG0', 'mean_18-64_WAG<10', 'mean_18-64_WAG<15', 'count_18-64_WAG<20', 'sum_18-64_WAG<20', 'mean_18-64_WAG<20', 'count_18-64_WAG<25', 'sum_18-64_WAG<25', 'mean_18-64_WAG<25', 'max_18-64_WAG<30', 'count_18-64_WAG<30', 'sum_18-64_WAG<30', 'mean_18-64_WAG<30', 'max_18-64_WAG<35', 'count_18-64_WAG<35', 'sum_18-64_WAG<35', 'mean_18-64_WAG<35', 'max_18-64_WAG<40', 'count_18-64_WAG<40', 'sum_18-64_WAG<40', 'mean_18-64_WAG<40', 'any_18-64_WAG<45', 'max_18-64_WAG<45', 'count_18-64_WAG<45', 'sum_18-64_WAG<45', 'mean_18-64_WAG<45', 'any_18-64_WAG<50', 'min_18-64_WAG<50', 'max_18-64_WAG<50', 'count_18-64_WAG<50', 'sum_18-64_WAG<50', 'mean_18-64_WAG<50', '%_18-64_WAG<50', 'count_18-64_WAG<60', 'sum_18-64_WAG<60', 'mean_18-64_WAG<60', 'count_18-64_WAG<70', 'sum_18-64_WAG<70', 'mean_18-64_WAG<70', 'max_18-64_WAG<80', 'count_18-64_WAG<80', 'sum_18-64_WAG<80', 'mean_18-64_WAG<80', 'any_18-64_WAG_any', 'all_18-64_WAG_any', 'min_18-64_WAG_any', 'max_18-64_WAG_any', 'count_18-64_WAG_any', 'sum_18-64_WAG_any', 'mean_18-64_WAG_any', '%_18-64_WAG_any', 'any_kid_WAG0', 'all_kid_WAG0', 'min_kid_WAG0', 'max_kid_WAG0', 'count_kid_WAG0', 'sum_kid_WAG0', 'mean_kid_WAG0', '%_kid_WAG0', 'any_kid_WAG<10', 'all_kid_WAG<10', 'min_kid_WAG<10', 'max_kid_WAG<10', 'count_kid_WAG<10', 'sum_kid_WAG<10', 'mean_kid_WAG<10', '%_kid_WAG<10', 'any_kid_WAG<15', 'all_kid_WAG<15', 'min_kid_WAG<15', 'max_kid_WAG<15', 'count_kid_WAG<15', 'sum_kid_WAG<15', 'mean_kid_WAG<15', '%_kid_WAG<15', 'any_kid_WAG<20', 'all_kid_WAG<20', 'min_kid_WAG<20', 'max_kid_WAG<20', 'count_kid_WAG<20', 'sum_kid_WAG<20', 'mean_kid_WAG<20', '%_kid_WAG<20', 'any_kid_WAG<25', 'all_kid_WAG<25', 'min_kid_WAG<25', 'max_kid_WAG<25', 'count_kid_WAG<25', 'sum_kid_WAG<25', 'mean_kid_WAG<25', '%_kid_WAG<25', 'any_kid_WAG<30', 'all_kid_WAG<30', 'min_kid_WAG<30', 'max_kid_WAG<30', 'count_kid_WAG<30', 'sum_kid_WAG<30', 'mean_kid_WAG<30', '%_kid_WAG<30', 'any_kid_WAG<35', 'all_kid_WAG<35', 'min_kid_WAG<35', 'max_kid_WAG<35', 'count_kid_WAG<35', 'sum_kid_WAG<35', 'mean_kid_WAG<35', '%_kid_WAG<35', 'any_kid_WAG<40', 'all_kid_WAG<40', 'min_kid_WAG<40', 'max_kid_WAG<40', 'count_kid_WAG<40', 'sum_kid_WAG<40', 'mean_kid_WAG<40', '%_kid_WAG<40', 'any_kid_WAG<45', 'all_kid_WAG<45', 'min_kid_WAG<45', 'max_kid_WAG<45', 'count_kid_WAG<45', 'sum_kid_WAG<45', 'mean_kid_WAG<45', '%_kid_WAG<45', 'any_kid_WAG<50', 'all_kid_WAG<50', 'min_kid_WAG<50', 'max_kid_WAG<50', 'count_kid_WAG<50', 'sum_kid_WAG<50', 'mean_kid_WAG<50', '%_kid_WAG<50', 'any_kid_WAG<60', 'all_kid_WAG<60', 'min_kid_WAG<60', 'max_kid_WAG<60', 'count_kid_WAG<60', 'sum_kid_WAG<60', 'mean_kid_WAG<60', '%_kid_WAG<60', 'any_kid_WAG<70', 'all_kid_WAG<70', 'min_kid_WAG<70', 'max_kid_WAG<70', 'count_kid_WAG<70', 'sum_kid_WAG<70', 'mean_kid_WAG<70', '%_kid_WAG<70', 'any_kid_WAG<80', 'all_kid_WAG<80', 'min_kid_WAG<80', 'max_kid_WAG<80', 'count_kid_WAG<80', 'sum_kid_WAG<80', 'mean_kid_WAG<80', '%_kid_WAG<80', 'any_kid_WAG_any', 'all_kid_WAG_any', 'min_kid_WAG_any', 'max_kid_WAG_any', 'count_kid_WAG_any', 'sum_kid_WAG_any', 'mean_kid_WAG_any', '%_kid_WAG_any', 'all_anyage_WAG0', 'min_anyage_WAG0', 'max_anyage_WAG0', 'count_anyage_WAG0', 'sum_anyage_WAG0', 'mean_anyage_WAG0', 'all_anyage_WAG<10', 'max_anyage_WAG<10', 'count_anyage_WAG<10', 'sum_anyage_WAG<10', 'mean_anyage_WAG<10', 'all_anyage_WAG<15', 'min_anyage_WAG<15', 'max_anyage_WAG<15', 'count_anyage_WAG<15', 'sum_anyage_WAG<15', 'mean_anyage_WAG<15', 'all_anyage_WAG<20', 'min_anyage_WAG<20', 'max_anyage_WAG<20', 'count_anyage_WAG<20', 'sum_anyage_WAG<20', 'mean_anyage_WAG<20', 'all_anyage_WAG<25', 'min_anyage_WAG<25', 'max_anyage_WAG<25', 'count_anyage_WAG<25', 'sum_anyage_WAG<25', 'mean_anyage_WAG<25', '%_anyage_WAG<25', 'all_anyage_WAG<30', 'min_anyage_WAG<30', 'max_anyage_WAG<30', 'count_anyage_WAG<30', 'sum_anyage_WAG<30', 'mean_anyage_WAG<30', '%_anyage_WAG<30', 'all_anyage_WAG<35', 'min_anyage_WAG<35', 'max_anyage_WAG<35', 'count_anyage_WAG<35', 'sum_anyage_WAG<35', 'mean_anyage_WAG<35', '%_anyage_WAG<35', 'all_anyage_WAG<40', 'min_anyage_WAG<40', 'max_anyage_WAG<40', 'count_anyage_WAG<40', 'sum_anyage_WAG<40', 'mean_anyage_WAG<40', '%_anyage_WAG<40', 'all_anyage_WAG<45', 'min_anyage_WAG<45', 'max_anyage_WAG<45', 'count_anyage_WAG<45', 'sum_anyage_WAG<45', 'mean_anyage_WAG<45', '%_anyage_WAG<45', 'all_anyage_WAG<50', 'min_anyage_WAG<50', 'max_anyage_WAG<50', 'count_anyage_WAG<50', 'sum_anyage_WAG<50', 'mean_anyage_WAG<50', '%_anyage_WAG<50', 'all_anyage_WAG<60', 'min_anyage_WAG<60', 'max_anyage_WAG<60', 'count_anyage_WAG<60', 'sum_anyage_WAG<60', 'mean_anyage_WAG<60', '%_anyage_WAG<60', 'all_anyage_WAG<70', 'min_anyage_WAG<70', 'max_anyage_WAG<70', 'count_anyage_WAG<70', 'sum_anyage_WAG<70', 'mean_anyage_WAG<70', '%_anyage_WAG<70', 'all_anyage_WAG<80', 'min_anyage_WAG<80', 'max_anyage_WAG<80', 'count_anyage_WAG<80', 'sum_anyage_WAG<80', 'mean_anyage_WAG<80', '%_anyage_WAG<80', 'min_anyage_WAG_any', 'max_anyage_WAG_any', 'count_anyage_WAG_any', 'sum_anyage_WAG_any', 'mean_anyage_WAG_any', 'max_adult_INT1q', 'sum_adult_INT1q', 'mean_adult_INT1q', 'max_adult_INT2q', 'count_adult_INT2q', 'sum_adult_INT2q', 'mean_adult_INT2q', 'min_adult_INT3q', 'max_adult_INT3q', 'count_adult_INT3q', 'sum_adult_INT3q', 'mean_adult_INT3q', 'min_adult_INT4q', 'max_adult_INT4q', 'count_adult_INT4q', 'sum_adult_INT4q', 'mean_adult_INT4q', 'min_adult_INT_any', 'max_adult_INT_any', 'count_adult_INT_any', 'sum_adult_INT_any', 'mean_adult_INT_any', 'all_65+_INT0', 'min_65+_INT0', 'max_65+_INT0', 'sum_65+_INT0', 'mean_65+_INT0', '%_65+_INT0', 'min_65+_INT1q', 'max_65+_INT1q', 'count_65+_INT1q', 'sum_65+_INT1q', 'mean_65+_INT1q', '%_65+_INT1q', 'min_65+_INT2q', 'max_65+_INT2q', 'count_65+_INT2q', 'sum_65+_INT2q', 'mean_65+_INT2q', '%_65+_INT2q', 'min_65+_INT3q', 'max_65+_INT3q', 'count_65+_INT3q', 'sum_65+_INT3q', 'mean_65+_INT3q', '%_65+_INT3q', 'min_65+_INT4q', 'max_65+_INT4q', 'count_65+_INT4q', 'sum_65+_INT4q', 'mean_65+_INT4q', '%_65+_INT4q', 'any_65+_INT_any', 'all_65+_INT_any', 'min_65+_INT_any', 'max_65+_INT_any', 'count_65+_INT_any', 'sum_65+_INT_any', 'mean_65+_INT_any', '%_65+_INT_any', 'mean_18-64_INT0', '%_18-64_INT0', 'min_18-64_INT1q', 'max_18-64_INT1q', 'sum_18-64_INT1q', 'mean_18-64_INT1q', 'min_18-64_INT2q', 'max_18-64_INT2q', 'count_18-64_INT2q', 'sum_18-64_INT2q', 'mean_18-64_INT2q', 'min_18-64_INT3q', 'max_18-64_INT3q', 'count_18-64_INT3q', 'sum_18-64_INT3q', 'mean_18-64_INT3q', 'min_18-64_INT4q', 'max_18-64_INT4q', 'count_18-64_INT4q', 'sum_18-64_INT4q', 'mean_18-64_INT4q', 'any_18-64_INT_any', 'all_18-64_INT_any', 'min_18-64_INT_any', 'max_18-64_INT_any', 'count_18-64_INT_any', 'sum_18-64_INT_any', 'mean_18-64_INT_any', '%_18-64_INT_any', 'any_kid_INT0', 'all_kid_INT0', 'min_kid_INT0', 'max_kid_INT0', 'count_kid_INT0', 'sum_kid_INT0', 'mean_kid_INT0', '%_kid_INT0', 'max_kid_INT1q', 'sum_kid_INT1q', 'mean_kid_INT1q', 'max_kid_INT2q', 'sum_kid_INT2q', 'mean_kid_INT2q', 'max_kid_INT3q', 'sum_kid_INT3q', 'mean_kid_INT3q', 'any_kid_INT_any', 'all_kid_INT_any', 'min_kid_INT_any', 'max_kid_INT_any', 'count_kid_INT_any', 'sum_kid_INT_any', 'mean_kid_INT_any', '%_kid_INT_any', 'all_anyage_INT0', 'max_anyage_INT0', 'count_anyage_INT0', 'sum_anyage_INT0', '%_anyage_INT0', 'any_anyage_INT1q', 'all_anyage_INT1q', 'min_anyage_INT1q', 'max_anyage_INT1q', 'count_anyage_INT1q', 'sum_anyage_INT1q', 'mean_anyage_INT1q', '%_anyage_INT1q', 'any_anyage_INT2q', 'all_anyage_INT2q', 'min_anyage_INT2q', 'max_anyage_INT2q', 'count_anyage_INT2q', 'sum_anyage_INT2q', 'mean_anyage_INT2q', '%_anyage_INT2q', 'any_anyage_INT3q', 'all_anyage_INT3q', 'min_anyage_INT3q', 'max_anyage_INT3q', 'count_anyage_INT3q', 'sum_anyage_INT3q', 'mean_anyage_INT3q', '%_anyage_INT3q', 'any_anyage_INT4q', 'all_anyage_INT4q', 'min_anyage_INT4q', 'max_anyage_INT4q', 'count_anyage_INT4q', 'sum_anyage_INT4q', 'mean_anyage_INT4q', '%_anyage_INT4q', 'min_anyage_INT_any', 'max_anyage_INT_any', 'count_anyage_INT_any', 'sum_anyage_INT_any', 'mean_anyage_INT_any', 'sum_adult_SEMP0', 'max_adult_SEMP1q', 'count_adult_SEMP1q', 'sum_adult_SEMP1q', 'mean_adult_SEMP1q', 'min_adult_SEMP2q', 'max_adult_SEMP2q', 'count_adult_SEMP2q', 'sum_adult_SEMP2q', 'mean_adult_SEMP2q', 'min_adult_SEMP3q', 'max_adult_SEMP3q', 'count_adult_SEMP3q', 'sum_adult_SEMP3q', 'mean_adult_SEMP3q', 'min_adult_SEMP4q', 'max_adult_SEMP4q', 'count_adult_SEMP4q', 'sum_adult_SEMP4q', 'mean_adult_SEMP4q', 'min_adult_SEMP_any', 'max_adult_SEMP_any', 'count_adult_SEMP_any', 'sum_adult_SEMP_any', 'mean_adult_SEMP_any', 'any_65+_SEMP0', 'all_65+_SEMP0', 'min_65+_SEMP0', 'max_65+_SEMP0', 'count_65+_SEMP0', 'sum_65+_SEMP0', 'mean_65+_SEMP0', '%_65+_SEMP0', 'max_65+_SEMP1q', 'sum_65+_SEMP1q', 'mean_65+_SEMP1q', 'max_65+_SEMP2q', 'sum_65+_SEMP2q', 'mean_65+_SEMP2q', 'max_65+_SEMP3q', 'sum_65+_SEMP3q', 'mean_65+_SEMP3q', 'max_65+_SEMP4q', 'sum_65+_SEMP4q', 'mean_65+_SEMP4q', 'any_65+_SEMP_any', 'all_65+_SEMP_any', 'min_65+_SEMP_any', 'max_65+_SEMP_any', 'count_65+_SEMP_any', 'sum_65+_SEMP_any', 'mean_65+_SEMP_any', '%_65+_SEMP_any', 'count_18-64_SEMP0', 'sum_18-64_SEMP0', 'mean_18-64_SEMP0', '%_18-64_SEMP0', 'min_18-64_SEMP1q', 'max_18-64_SEMP1q', 'count_18-64_SEMP1q', 'sum_18-64_SEMP1q', 'mean_18-64_SEMP1q', 'min_18-64_SEMP2q', 'max_18-64_SEMP2q', 'count_18-64_SEMP2q', 'sum_18-64_SEMP2q', 'mean_18-64_SEMP2q', 'any_18-64_SEMP3q', 'min_18-64_SEMP3q', 'max_18-64_SEMP3q', 'count_18-64_SEMP3q', 'sum_18-64_SEMP3q', 'mean_18-64_SEMP3q', 'min_18-64_SEMP4q', 'max_18-64_SEMP4q', 'count_18-64_SEMP4q', 'sum_18-64_SEMP4q', 'mean_18-64_SEMP4q', 'any_18-64_SEMP_any', 'all_18-64_SEMP_any', 'min_18-64_SEMP_any', 'max_18-64_SEMP_any', 'count_18-64_SEMP_any', 'sum_18-64_SEMP_any', 'mean_18-64_SEMP_any', '%_18-64_SEMP_any', 'any_kid_SEMP0', 'all_kid_SEMP0', 'min_kid_SEMP0', 'max_kid_SEMP0', 'count_kid_SEMP0', 'sum_kid_SEMP0', 'mean_kid_SEMP0', '%_kid_SEMP0', 'max_kid_SEMP1q', 'sum_kid_SEMP1q', 'mean_kid_SEMP1q', 'any_kid_SEMP_any', 'all_kid_SEMP_any', 'min_kid_SEMP_any', 'max_kid_SEMP_any', 'count_kid_SEMP_any', 'sum_kid_SEMP_any', 'mean_kid_SEMP_any', '%_kid_SEMP_any', 'all_anyage_SEMP0', 'max_anyage_SEMP0', 'count_anyage_SEMP0', 'sum_anyage_SEMP0', '%_anyage_SEMP0', 'any_anyage_SEMP1q', 'min_anyage_SEMP1q', 'max_anyage_SEMP1q', 'count_anyage_SEMP1q', 'sum_anyage_SEMP1q', 'mean_anyage_SEMP1q', 'any_anyage_SEMP2q', 'min_anyage_SEMP2q', 'max_anyage_SEMP2q', 'count_anyage_SEMP2q', 'sum_anyage_SEMP2q', 'mean_anyage_SEMP2q', '%_anyage_SEMP2q', 'any_anyage_SEMP3q', 'min_anyage_SEMP3q', 'max_anyage_SEMP3q', 'count_anyage_SEMP3q', 'sum_anyage_SEMP3q', 'mean_anyage_SEMP3q', 'any_anyage_SEMP4q', 'min_anyage_SEMP4q', 'max_anyage_SEMP4q', 'count_anyage_SEMP4q', 'sum_anyage_SEMP4q', 'mean_anyage_SEMP4q', '%_anyage_SEMP4q', 'min_anyage_SEMP_any', 'max_anyage_SEMP_any', 'count_anyage_SEMP_any', 'sum_anyage_SEMP_any', 'mean_anyage_SEMP_any', 'mean_adult_SSP0', 'min_adult_SSP1q', 'max_adult_SSP1q', 'count_adult_SSP1q', 'sum_adult_SSP1q', 'mean_adult_SSP1q', 'min_adult_SSP2q', 'max_adult_SSP2q', 'count_adult_SSP2q', 'sum_adult_SSP2q', 'mean_adult_SSP2q', 'min_adult_SSP3q', 'max_adult_SSP3q', 'count_adult_SSP3q', 'sum_adult_SSP3q', 'mean_adult_SSP3q', 'min_adult_SSP4q', 'max_adult_SSP4q', 'count_adult_SSP4q', 'sum_adult_SSP4q', 'mean_adult_SSP4q', 'min_adult_SSP_any', 'max_adult_SSP_any', 'count_adult_SSP_any', 'sum_adult_SSP_any', 'mean_adult_SSP_any', 'min_65+_SSP0', 'max_65+_SSP0', 'count_65+_SSP0', 'sum_65+_SSP0', 'mean_65+_SSP0', '%_65+_SSP0', 'min_65+_SSP1q', 'max_65+_SSP1q', 'count_65+_SSP1q', 'sum_65+_SSP1q', 'mean_65+_SSP1q', '%_65+_SSP1q', 'min_65+_SSP2q', 'max_65+_SSP2q', 'count_65+_SSP2q', 'sum_65+_SSP2q', 'mean_65+_SSP2q', '%_65+_SSP2q', 'any_65+_SSP3q', 'min_65+_SSP3q', 'max_65+_SSP3q', 'count_65+_SSP3q', 'sum_65+_SSP3q', 'mean_65+_SSP3q', '%_65+_SSP3q', 'any_65+_SSP4q', 'min_65+_SSP4q', 'max_65+_SSP4q', 'count_65+_SSP4q', 'sum_65+_SSP4q', 'mean_65+_SSP4q', '%_65+_SSP4q', 'any_65+_SSP_any', 'all_65+_SSP_any', 'min_65+_SSP_any', 'max_65+_SSP_any', 'count_65+_SSP_any', 'sum_65+_SSP_any', 'mean_65+_SSP_any', '%_65+_SSP_any', 'count_18-64_SSP0', 'sum_18-64_SSP0', 'mean_18-64_SSP0', '%_18-64_SSP0', 'min_18-64_SSP1q', 'max_18-64_SSP1q', 'count_18-64_SSP1q', 'sum_18-64_SSP1q', 'mean_18-64_SSP1q', 'min_18-64_SSP2q', 'max_18-64_SSP2q', 'count_18-64_SSP2q', 'sum_18-64_SSP2q', 'mean_18-64_SSP2q', 'min_18-64_SSP3q', 'max_18-64_SSP3q', 'count_18-64_SSP3q', 'sum_18-64_SSP3q', 'mean_18-64_SSP3q', 'min_18-64_SSP4q', 'max_18-64_SSP4q', 'count_18-64_SSP4q', 'sum_18-64_SSP4q', 'mean_18-64_SSP4q', 'any_18-64_SSP_any', 'all_18-64_SSP_any', 'min_18-64_SSP_any', 'max_18-64_SSP_any', 'count_18-64_SSP_any', 'sum_18-64_SSP_any', 'mean_18-64_SSP_any', '%_18-64_SSP_any', 'any_kid_SSP0', 'all_kid_SSP0', 'min_kid_SSP0', 'max_kid_SSP0', 'count_kid_SSP0', 'sum_kid_SSP0', 'mean_kid_SSP0', '%_kid_SSP0', 'max_kid_SSP1q', 'mean_kid_SSP1q', 'max_kid_SSP2q', 'sum_kid_SSP2q', 'mean_kid_SSP2q', 'max_kid_SSP3q', 'sum_kid_SSP3q', 'mean_kid_SSP3q', 'any_kid_SSP_any', 'all_kid_SSP_any', 'min_kid_SSP_any', 'max_kid_SSP_any', 'count_kid_SSP_any', 'sum_kid_SSP_any', 'mean_kid_SSP_any', '%_kid_SSP_any', 'any_anyage_SSP0', 'all_anyage_SSP0', 'max_anyage_SSP0', 'sum_anyage_SSP0', '%_anyage_SSP0', 'any_anyage_SSP1q', 'all_anyage_SSP1q', 'min_anyage_SSP1q', 'max_anyage_SSP1q', 'count_anyage_SSP1q', 'sum_anyage_SSP1q', 'mean_anyage_SSP1q', '%_anyage_SSP1q', 'any_anyage_SSP2q', 'all_anyage_SSP2q', 'min_anyage_SSP2q', 'max_anyage_SSP2q', 'count_anyage_SSP2q', 'sum_anyage_SSP2q', 'mean_anyage_SSP2q', '%_anyage_SSP2q', 'any_anyage_SSP3q', 'all_anyage_SSP3q', 'min_anyage_SSP3q', 'max_anyage_SSP3q', 'count_anyage_SSP3q', 'sum_anyage_SSP3q', 'mean_anyage_SSP3q', '%_anyage_SSP3q', 'any_anyage_SSP4q', 'all_anyage_SSP4q', 'min_anyage_SSP4q', 'max_anyage_SSP4q', 'count_anyage_SSP4q', 'sum_anyage_SSP4q', 'mean_anyage_SSP4q', '%_anyage_SSP4q', 'min_anyage_SSP_any', 'max_anyage_SSP_any', 'count_anyage_SSP_any', 'sum_anyage_SSP_any', 'mean_anyage_SSP_any', 'count_adult_SSIP0', 'min_adult_SSIP1q', 'max_adult_SSIP1q', 'count_adult_SSIP1q', 'sum_adult_SSIP1q', 'mean_adult_SSIP1q', 'max_adult_SSIP2q', 'count_adult_SSIP2q', 'sum_adult_SSIP2q', 'mean_adult_SSIP2q', 'min_adult_SSIP3q', 'max_adult_SSIP3q', 'count_adult_SSIP3q', 'sum_adult_SSIP3q', 'mean_adult_SSIP3q', 'min_adult_SSIP_any', 'max_adult_SSIP_any', 'count_adult_SSIP_any', 'sum_adult_SSIP_any', 'mean_adult_SSIP_any', 'all_65+_SSIP0', 'min_65+_SSIP0', 'max_65+_SSIP0', 'sum_65+_SSIP0', 'mean_65+_SSIP0', '%_65+_SSIP0', 'min_65+_SSIP1q', 'max_65+_SSIP1q', 'count_65+_SSIP1q', 'sum_65+_SSIP1q', 'mean_65+_SSIP1q', 'max_65+_SSIP2q', 'count_65+_SSIP2q', 'sum_65+_SSIP2q', 'mean_65+_SSIP2q', 'min_65+_SSIP3q', 'max_65+_SSIP3q', 'count_65+_SSIP3q', 'sum_65+_SSIP3q', 'mean_65+_SSIP3q', '%_65+_SSIP3q', 'any_65+_SSIP_any', 'all_65+_SSIP_any', 'min_65+_SSIP_any', 'max_65+_SSIP_any', 'count_65+_SSIP_any', 'sum_65+_SSIP_any', 'mean_65+_SSIP_any', '%_65+_SSIP_any', 'count_18-64_SSIP0', 'sum_18-64_SSIP0', 'mean_18-64_SSIP0', '%_18-64_SSIP0', 'max_18-64_SSIP1q', 'sum_18-64_SSIP1q', 'mean_18-64_SSIP1q', 'max_18-64_SSIP2q', 'sum_18-64_SSIP2q', 'mean_18-64_SSIP2q', 'min_18-64_SSIP3q', 'max_18-64_SSIP3q', 'count_18-64_SSIP3q', 'sum_18-64_SSIP3q', 'mean_18-64_SSIP3q', 'any_18-64_SSIP_any', 'all_18-64_SSIP_any', 'min_18-64_SSIP_any', 'max_18-64_SSIP_any', 'count_18-64_SSIP_any', 'sum_18-64_SSIP_any', 'mean_18-64_SSIP_any', '%_18-64_SSIP_any', 'any_kid_SSIP0', 'all_kid_SSIP0', 'min_kid_SSIP0', 'max_kid_SSIP0', 'count_kid_SSIP0', 'sum_kid_SSIP0', 'mean_kid_SSIP0', '%_kid_SSIP0', 'max_kid_SSIP1q', 'sum_kid_SSIP1q', 'mean_kid_SSIP1q', 'max_kid_SSIP2q', 'sum_kid_SSIP2q', 'mean_kid_SSIP2q', 'max_kid_SSIP3q', 'sum_kid_SSIP3q', 'mean_kid_SSIP3q', 'any_kid_SSIP_any', 'all_kid_SSIP_any', 'min_kid_SSIP_any', 'max_kid_SSIP_any', 'count_kid_SSIP_any', 'sum_kid_SSIP_any', 'mean_kid_SSIP_any', '%_kid_SSIP_any', 'any_anyage_SSIP0', 'all_anyage_SSIP0', 'max_anyage_SSIP0', 'count_anyage_SSIP0', 'sum_anyage_SSIP0', '%_anyage_SSIP0', 'any_anyage_SSIP1q', 'min_anyage_SSIP1q', 'max_anyage_SSIP1q', 'count_anyage_SSIP1q', 'sum_anyage_SSIP1q', 'mean_anyage_SSIP1q', 'any_anyage_SSIP2q', 'min_anyage_SSIP2q', 'max_anyage_SSIP2q', 'count_anyage_SSIP2q', 'sum_anyage_SSIP2q', 'mean_anyage_SSIP2q', 'any_anyage_SSIP3q', 'all_anyage_SSIP3q', 'min_anyage_SSIP3q', 'max_anyage_SSIP3q', 'count_anyage_SSIP3q', 'sum_anyage_SSIP3q', 'mean_anyage_SSIP3q', '%_anyage_SSIP3q', 'min_anyage_SSIP_any', 'max_anyage_SSIP_any', 'count_anyage_SSIP_any', 'sum_anyage_SSIP_any', 'mean_anyage_SSIP_any', 'count_adult_PA0', 'sum_adult_PA0', 'max_adult_PA1q', 'sum_adult_PA1q', 'mean_adult_PA1q', 'max_adult_PA2q', 'count_adult_PA2q', 'sum_adult_PA2q', 'mean_adult_PA2q', 'max_adult_PA3q', 'count_adult_PA3q', 'sum_adult_PA3q', 'mean_adult_PA3q', 'min_adult_PA_any', 'max_adult_PA_any', 'count_adult_PA_any', 'sum_adult_PA_any', 'mean_adult_PA_any', 'any_65+_PA0', 'all_65+_PA0', 'min_65+_PA0', 'max_65+_PA0', 'count_65+_PA0', 'sum_65+_PA0', 'mean_65+_PA0', '%_65+_PA0', 'max_65+_PA1q', 'sum_65+_PA1q', 'mean_65+_PA1q', 'max_65+_PA2q', 'sum_65+_PA2q', 'mean_65+_PA2q', 'max_65+_PA3q', 'sum_65+_PA3q', 'mean_65+_PA3q', 'any_65+_PA_any', 'all_65+_PA_any', 'min_65+_PA_any', 'max_65+_PA_any', 'count_65+_PA_any', 'sum_65+_PA_any', 'mean_65+_PA_any', '%_65+_PA_any', 'all_18-64_PA0', 'min_18-64_PA0', 'max_18-64_PA0', 'count_18-64_PA0', 'sum_18-64_PA0', 'mean_18-64_PA0', '%_18-64_PA0', 'max_18-64_PA1q', 'sum_18-64_PA1q', 'mean_18-64_PA1q', 'min_18-64_PA2q', 'max_18-64_PA2q', 'count_18-64_PA2q', 'sum_18-64_PA2q', 'mean_18-64_PA2q', 'min_18-64_PA3q', 'max_18-64_PA3q', 'count_18-64_PA3q', 'sum_18-64_PA3q', 'mean_18-64_PA3q', 'any_18-64_PA_any', 'all_18-64_PA_any', 'min_18-64_PA_any', 'max_18-64_PA_any', 'count_18-64_PA_any', 'sum_18-64_PA_any', 'mean_18-64_PA_any', '%_18-64_PA_any', 'any_kid_PA0', 'all_kid_PA0', 'min_kid_PA0', 'max_kid_PA0', 'count_kid_PA0', 'sum_kid_PA0', 'mean_kid_PA0', '%_kid_PA0', 'max_kid_PA1q', 'mean_kid_PA1q', 'max_kid_PA2q', 'sum_kid_PA2q', 'mean_kid_PA2q', 'max_kid_PA3q', 'sum_kid_PA3q', 'mean_kid_PA3q', 'any_kid_PA_any', 'all_kid_PA_any', 'min_kid_PA_any', 'max_kid_PA_any', 'count_kid_PA_any', 'sum_kid_PA_any', 'mean_kid_PA_any', '%_kid_PA_any', 'all_anyage_PA0', 'min_anyage_PA0', 'max_anyage_PA0', 'count_anyage_PA0', 'sum_anyage_PA0', 'min_anyage_PA1q', 'max_anyage_PA1q', 'count_anyage_PA1q', 'sum_anyage_PA1q', 'mean_anyage_PA1q', 'any_anyage_PA2q', 'min_anyage_PA2q', 'max_anyage_PA2q', 'count_anyage_PA2q', 'sum_anyage_PA2q', 'mean_anyage_PA2q', 'any_anyage_PA3q', 'min_anyage_PA3q', 'max_anyage_PA3q', 'count_anyage_PA3q', 'sum_anyage_PA3q', 'mean_anyage_PA3q', 'min_anyage_PA_any', 'max_anyage_PA_any', 'count_anyage_PA_any', 'sum_anyage_PA_any', 'mean_anyage_PA_any', 'min_adult_RETP1q', 'max_adult_RETP1q', 'count_adult_RETP1q', 'sum_adult_RETP1q', 'mean_adult_RETP1q', 'min_adult_RETP2q', 'max_adult_RETP2q', 'count_adult_RETP2q', 'sum_adult_RETP2q', 'mean_adult_RETP2q', 'min_adult_RETP3q', 'max_adult_RETP3q', 'count_adult_RETP3q', 'sum_adult_RETP3q', 'mean_adult_RETP3q', 'min_adult_RETP_any', 'max_adult_RETP_any', 'count_adult_RETP_any', 'sum_adult_RETP_any', 'mean_adult_RETP_any', '%_65+_RETP0', 'min_65+_RETP1q', 'max_65+_RETP1q', 'count_65+_RETP1q', 'sum_65+_RETP1q', 'mean_65+_RETP1q', '%_65+_RETP1q', 'min_65+_RETP2q', 'max_65+_RETP2q', 'count_65+_RETP2q', 'sum_65+_RETP2q', 'mean_65+_RETP2q', '%_65+_RETP2q', 'min_65+_RETP3q', 'max_65+_RETP3q', 'count_65+_RETP3q', 'sum_65+_RETP3q', 'mean_65+_RETP3q', '%_65+_RETP3q', 'any_65+_RETP_any', 'all_65+_RETP_any', 'min_65+_RETP_any', 'max_65+_RETP_any', 'count_65+_RETP_any', 'sum_65+_RETP_any', 'mean_65+_RETP_any', '%_65+_RETP_any', 'count_18-64_RETP0', '%_18-64_RETP0', 'max_18-64_RETP1q', 'count_18-64_RETP1q', 'sum_18-64_RETP1q', 'mean_18-64_RETP1q', 'max_18-64_RETP2q', 'sum_18-64_RETP2q', 'mean_18-64_RETP2q', 'min_18-64_RETP3q', 'max_18-64_RETP3q', 'count_18-64_RETP3q', 'sum_18-64_RETP3q', 'mean_18-64_RETP3q', 'any_18-64_RETP_any', 'all_18-64_RETP_any', 'min_18-64_RETP_any', 'max_18-64_RETP_any', 'count_18-64_RETP_any', 'sum_18-64_RETP_any', 'mean_18-64_RETP_any', '%_18-64_RETP_any', 'all_kid_RETP0', 'count_kid_RETP0', '%_kid_RETP0', 'max_kid_RETP1q', 'sum_kid_RETP1q', 'mean_kid_RETP1q', 'any_kid_RETP_any', 'all_kid_RETP_any', 'min_kid_RETP_any', 'max_kid_RETP_any', 'count_kid_RETP_any', 'sum_kid_RETP_any', 'mean_kid_RETP_any', '%_kid_RETP_any', 'any_anyage_RETP1q', 'all_anyage_RETP1q', 'min_anyage_RETP1q', 'max_anyage_RETP1q', 'count_anyage_RETP1q', 'sum_anyage_RETP1q', 'mean_anyage_RETP1q', '%_anyage_RETP1q', 'any_anyage_RETP2q', 'all_anyage_RETP2q', 'min_anyage_RETP2q', 'max_anyage_RETP2q', 'count_anyage_RETP2q', 'sum_anyage_RETP2q', 'mean_anyage_RETP2q', '%_anyage_RETP2q', 'any_anyage_RETP3q', 'all_anyage_RETP3q', 'min_anyage_RETP3q', 'max_anyage_RETP3q', 'count_anyage_RETP3q', 'sum_anyage_RETP3q', 'mean_anyage_RETP3q', '%_anyage_RETP3q', 'min_anyage_RETP_any', 'max_anyage_RETP_any', 'count_anyage_RETP_any', 'sum_anyage_RETP_any', 'mean_anyage_RETP_any', 'max_adult_OI1q', 'count_adult_OI1q', 'sum_adult_OI1q', 'mean_adult_OI1q', 'max_adult_OI2q', 'count_adult_OI2q', 'sum_adult_OI2q', 'mean_adult_OI2q', 'max_adult_OI3q', 'count_adult_OI3q', 'sum_adult_OI3q', 'mean_adult_OI3q', 'min_adult_OI_any', 'max_adult_OI_any', 'count_adult_OI_any', 'sum_adult_OI_any', 'mean_adult_OI_any', 'max_65+_OI1q', 'sum_65+_OI1q', 'mean_65+_OI1q', 'max_65+_OI2q', 'sum_65+_OI2q', 'mean_65+_OI2q', 'min_65+_OI3q', 'max_65+_OI3q', 'count_65+_OI3q', 'sum_65+_OI3q', 'mean_65+_OI3q', 'any_65+_OI_any', 'all_65+_OI_any', 'min_65+_OI_any', 'max_65+_OI_any', 'count_65+_OI_any', 'sum_65+_OI_any', 'mean_65+_OI_any', '%_65+_OI_any', 'max_18-64_OI1q', 'sum_18-64_OI1q', 'mean_18-64_OI1q', 'min_18-64_OI2q', 'max_18-64_OI2q', 'count_18-64_OI2q', 'sum_18-64_OI2q', 'mean_18-64_OI2q', 'min_18-64_OI3q', 'max_18-64_OI3q', 'count_18-64_OI3q', 'sum_18-64_OI3q', 'mean_18-64_OI3q', 'any_18-64_OI_any', 'all_18-64_OI_any', 'min_18-64_OI_any', 'max_18-64_OI_any', 'count_18-64_OI_any', 'sum_18-64_OI_any', 'mean_18-64_OI_any', '%_18-64_OI_any', 'max_kid_OI1q', 'sum_kid_OI1q', 'mean_kid_OI1q', 'max_kid_OI2q', 'sum_kid_OI2q', 'mean_kid_OI2q', 'max_kid_OI3q', 'sum_kid_OI3q', 'mean_kid_OI3q', 'any_kid_OI_any', 'all_kid_OI_any', 'min_kid_OI_any', 'max_kid_OI_any', 'count_kid_OI_any', 'sum_kid_OI_any', 'mean_kid_OI_any', '%_kid_OI_any', 'min_anyage_OI1q', 'max_anyage_OI1q', 'count_anyage_OI1q', 'sum_anyage_OI1q', 'mean_anyage_OI1q', 'any_anyage_OI2q', 'min_anyage_OI2q', 'max_anyage_OI2q', 'count_anyage_OI2q', 'sum_anyage_OI2q', 'mean_anyage_OI2q', 'any_anyage_OI3q', 'min_anyage_OI3q', 'max_anyage_OI3q', 'count_anyage_OI3q', 'sum_anyage_OI3q', 'mean_anyage_OI3q', '%_anyage_OI3q', 'min_anyage_OI_any', 'max_anyage_OI_any', 'count_anyage_OI_any', 'sum_anyage_OI_any', 'mean_anyage_OI_any', 'max_adult_White', 'mean_adult_White', '%_adult_White', 'all_adult_Black', 'sum_adult_Black', 'mean_adult_Black', '%_adult_Black', 'sum_adult_Asian', 'mean_adult_Asian', '%_adult_Asian', 'sum_adult_Hisp', 'mean_adult_Hisp', '%_adult_Hisp', 'max_adult_ETH_other', 'sum_adult_ETH_other', 'mean_adult_ETH_other', 'min_adult_ETH_any', 'max_adult_ETH_any', 'count_adult_ETH_any', 'sum_adult_ETH_any', 'mean_adult_ETH_any', 'all_65+_White', 'min_65+_White', 'max_65+_White', 'sum_65+_White', 'mean_65+_White', '%_65+_White', 'all_65+_Black', 'min_65+_Black', 'max_65+_Black', 'sum_65+_Black', 'mean_65+_Black', '%_65+_Black', 'all_65+_Asian', 'min_65+_Asian', 'max_65+_Asian', 'sum_65+_Asian', 'mean_65+_Asian', '%_65+_Asian', 'all_65+_Hisp', 'min_65+_Hisp', 'max_65+_Hisp', 'sum_65+_Hisp', 'mean_65+_Hisp', '%_65+_Hisp', 'max_65+_ETH_other', 'mean_65+_ETH_other', 'any_65+_ETH_any', 'all_65+_ETH_any', 'min_65+_ETH_any', 'max_65+_ETH_any', 'count_65+_ETH_any', 'sum_65+_ETH_any', 'mean_65+_ETH_any', '%_65+_ETH_any', 'max_18-64_White', 'sum_18-64_White', 'mean_18-64_White', '%_18-64_White', 'all_18-64_Black', 'max_18-64_Black', 'sum_18-64_Black', 'mean_18-64_Black', '%_18-64_Black', 'max_18-64_Asian', 'count_18-64_Asian', 'sum_18-64_Asian', 'mean_18-64_Asian', '%_18-64_Asian', 'max_18-64_Hisp', 'count_18-64_Hisp', 'sum_18-64_Hisp', 'mean_18-64_Hisp', '%_18-64_Hisp', 'any_18-64_ETH_other', 'max_18-64_ETH_other', 'count_18-64_ETH_other', 'sum_18-64_ETH_other', 'mean_18-64_ETH_other', '%_18-64_ETH_other', 'any_18-64_ETH_any', 'all_18-64_ETH_any', 'min_18-64_ETH_any', 'max_18-64_ETH_any', 'count_18-64_ETH_any', 'sum_18-64_ETH_any', 'mean_18-64_ETH_any', '%_18-64_ETH_any', 'all_kid_White', 'mean_kid_White', '%_kid_White', 'all_kid_Black', 'mean_kid_Black', '%_kid_Black', 'all_kid_Asian', 'mean_kid_Asian', '%_kid_Asian', 'all_kid_Hisp', 'mean_kid_Hisp', '%_kid_Hisp', 'mean_kid_ETH_other', '%_kid_ETH_other', 'any_kid_ETH_any', 'all_kid_ETH_any', 'min_kid_ETH_any', 'max_kid_ETH_any', 'count_kid_ETH_any', 'sum_kid_ETH_any', 'mean_kid_ETH_any', '%_kid_ETH_any', 'any_anyage_White', 'all_anyage_White', 'min_anyage_White', 'max_anyage_White', 'sum_anyage_White', 'mean_anyage_White', '%_anyage_White', 'any_anyage_Black', 'all_anyage_Black', 'max_anyage_Black', 'sum_anyage_Black', 'mean_anyage_Black', '%_anyage_Black', 'any_anyage_Asian', 'all_anyage_Asian', 'max_anyage_Asian', 'count_anyage_Asian', 'sum_anyage_Asian', 'mean_anyage_Asian', '%_anyage_Asian', 'any_anyage_Hisp', 'all_anyage_Hisp', 'max_anyage_Hisp', 'sum_anyage_Hisp', 'mean_anyage_Hisp', '%_anyage_Hisp', 'all_anyage_ETH_other', 'max_anyage_ETH_other', 'sum_anyage_ETH_other', 'mean_anyage_ETH_other', '%_anyage_ETH_other', 'min_anyage_ETH_any', 'max_anyage_ETH_any', 'count_anyage_ETH_any', 'sum_anyage_ETH_any', 'mean_anyage_ETH_any', 'max_adult_TINP0', 'sum_adult_TINP0', 'mean_adult_TINP0', 'mean_adult_TINP<10', 'mean_adult_TINP<15', 'mean_adult_TINP<20', 'mean_adult_TINP<25', 'count_adult_TINP<30', 'sum_adult_TINP<30', 'mean_adult_TINP<30', 'count_adult_TINP<35', 'sum_adult_TINP<35', 'mean_adult_TINP<35', 'count_adult_TINP<40', 'sum_adult_TINP<40', 'mean_adult_TINP<40', 'max_adult_TINP<45', 'count_adult_TINP<45', 'sum_adult_TINP<45', 'mean_adult_TINP<45', 'min_adult_TINP<50', 'max_adult_TINP<50', 'count_adult_TINP<50', 'sum_adult_TINP<50', 'mean_adult_TINP<50', 'count_adult_TINP<60', 'sum_adult_TINP<60', 'mean_adult_TINP<60', 'count_adult_TINP<70', 'sum_adult_TINP<70', 'mean_adult_TINP<70', 'count_adult_TINP<80', 'sum_adult_TINP<80', 'mean_adult_TINP<80', 'min_adult_TINP_any', 'max_adult_TINP_any', 'count_adult_TINP_any', 'sum_adult_TINP_any', 'mean_adult_TINP_any', 'min_65+_TINP0', 'max_65+_TINP0', 'count_65+_TINP0', 'sum_65+_TINP0', 'mean_65+_TINP0', '%_65+_TINP0', 'min_65+_TINP<10', 'max_65+_TINP<10', 'count_65+_TINP<10', 'sum_65+_TINP<10', 'mean_65+_TINP<10', '%_65+_TINP<10', 'min_65+_TINP<15', 'max_65+_TINP<15', 'sum_65+_TINP<15', 'mean_65+_TINP<15', '%_65+_TINP<15', 'min_65+_TINP<20', 'max_65+_TINP<20', 'sum_65+_TINP<20', 'mean_65+_TINP<20', '%_65+_TINP<20', 'min_65+_TINP<25', 'max_65+_TINP<25', 'sum_65+_TINP<25', 'mean_65+_TINP<25', '%_65+_TINP<25', 'any_65+_TINP<30', 'min_65+_TINP<30', 'max_65+_TINP<30', 'count_65+_TINP<30', 'sum_65+_TINP<30', 'mean_65+_TINP<30', '%_65+_TINP<30', 'any_65+_TINP<35', 'all_65+_TINP<35', 'min_65+_TINP<35', 'max_65+_TINP<35', 'count_65+_TINP<35', 'sum_65+_TINP<35', 'mean_65+_TINP<35', '%_65+_TINP<35', 'any_65+_TINP<40', 'all_65+_TINP<40', 'min_65+_TINP<40', 'max_65+_TINP<40', 'count_65+_TINP<40', 'sum_65+_TINP<40', 'mean_65+_TINP<40', '%_65+_TINP<40', 'any_65+_TINP<45', 'all_65+_TINP<45', 'min_65+_TINP<45', 'max_65+_TINP<45', 'count_65+_TINP<45', 'sum_65+_TINP<45', 'mean_65+_TINP<45', '%_65+_TINP<45', 'any_65+_TINP<50', 'all_65+_TINP<50', 'min_65+_TINP<50', 'max_65+_TINP<50', 'count_65+_TINP<50', 'sum_65+_TINP<50', 'mean_65+_TINP<50', '%_65+_TINP<50', 'any_65+_TINP<60', 'all_65+_TINP<60', 'min_65+_TINP<60', 'max_65+_TINP<60', 'count_65+_TINP<60', 'sum_65+_TINP<60', 'mean_65+_TINP<60', '%_65+_TINP<60', 'any_65+_TINP<70', 'all_65+_TINP<70', 'min_65+_TINP<70', 'max_65+_TINP<70', 'count_65+_TINP<70', 'sum_65+_TINP<70', 'mean_65+_TINP<70', '%_65+_TINP<70', 'any_65+_TINP<80', 'all_65+_TINP<80', 'min_65+_TINP<80', 'max_65+_TINP<80', 'count_65+_TINP<80', 'sum_65+_TINP<80', 'mean_65+_TINP<80', '%_65+_TINP<80', 'any_65+_TINP_any', 'all_65+_TINP_any', 'min_65+_TINP_any', 'max_65+_TINP_any', 'count_65+_TINP_any', 'sum_65+_TINP_any', 'mean_65+_TINP_any', '%_65+_TINP_any', 'max_18-64_TINP0', 'count_18-64_TINP0', 'sum_18-64_TINP0', 'mean_18-64_TINP0', 'max_18-64_TINP<10', 'mean_18-64_TINP<10', 'mean_18-64_TINP<15', 'count_18-64_TINP<20', 'mean_18-64_TINP<20', 'count_18-64_TINP<25', 'mean_18-64_TINP<25', 'count_18-64_TINP<30', 'sum_18-64_TINP<30', 'mean_18-64_TINP<30', 'count_18-64_TINP<35', 'sum_18-64_TINP<35', 'mean_18-64_TINP<35', 'count_18-64_TINP<40', 'sum_18-64_TINP<40', 'mean_18-64_TINP<40', 'any_18-64_TINP<45', 'max_18-64_TINP<45', 'count_18-64_TINP<45', 'sum_18-64_TINP<45', 'mean_18-64_TINP<45', '%_18-64_TINP<45', 'any_18-64_TINP<50', 'min_18-64_TINP<50', 'max_18-64_TINP<50', 'count_18-64_TINP<50', 'sum_18-64_TINP<50', 'mean_18-64_TINP<50', '%_18-64_TINP<50', 'any_18-64_TINP<60', 'all_18-64_TINP<60', 'min_18-64_TINP<60', 'max_18-64_TINP<60', 'count_18-64_TINP<60', 'sum_18-64_TINP<60', 'mean_18-64_TINP<60', '%_18-64_TINP<60', 'any_18-64_TINP<70', 'all_18-64_TINP<70', 'min_18-64_TINP<70', 'max_18-64_TINP<70', 'count_18-64_TINP<70', 'sum_18-64_TINP<70', 'mean_18-64_TINP<70', '%_18-64_TINP<70', 'any_18-64_TINP<80', 'all_18-64_TINP<80', 'min_18-64_TINP<80', 'max_18-64_TINP<80', 'count_18-64_TINP<80', 'sum_18-64_TINP<80', 'mean_18-64_TINP<80', '%_18-64_TINP<80', 'any_18-64_TINP_any', 'all_18-64_TINP_any', 'min_18-64_TINP_any', 'max_18-64_TINP_any', 'count_18-64_TINP_any', 'sum_18-64_TINP_any', 'mean_18-64_TINP_any', '%_18-64_TINP_any', 'any_kid_TINP0', 'all_kid_TINP0', 'min_kid_TINP0', 'max_kid_TINP0', 'count_kid_TINP0', 'sum_kid_TINP0', 'mean_kid_TINP0', '%_kid_TINP0', 'any_kid_TINP<10', 'all_kid_TINP<10', 'min_kid_TINP<10', 'max_kid_TINP<10', 'count_kid_TINP<10', 'sum_kid_TINP<10', 'mean_kid_TINP<10', '%_kid_TINP<10', 'any_kid_TINP<15', 'all_kid_TINP<15', 'min_kid_TINP<15', 'max_kid_TINP<15', 'count_kid_TINP<15', 'sum_kid_TINP<15', 'mean_kid_TINP<15', '%_kid_TINP<15', 'any_kid_TINP<20', 'all_kid_TINP<20', 'min_kid_TINP<20', 'max_kid_TINP<20', 'count_kid_TINP<20', 'sum_kid_TINP<20', 'mean_kid_TINP<20', '%_kid_TINP<20', 'any_kid_TINP<25', 'all_kid_TINP<25', 'min_kid_TINP<25', 'max_kid_TINP<25', 'count_kid_TINP<25', 'sum_kid_TINP<25', 'mean_kid_TINP<25', '%_kid_TINP<25', 'any_kid_TINP<30', 'all_kid_TINP<30', 'min_kid_TINP<30', 'max_kid_TINP<30', 'count_kid_TINP<30', 'sum_kid_TINP<30', 'mean_kid_TINP<30', '%_kid_TINP<30', 'any_kid_TINP<35', 'all_kid_TINP<35', 'min_kid_TINP<35', 'max_kid_TINP<35', 'count_kid_TINP<35', 'sum_kid_TINP<35', 'mean_kid_TINP<35', '%_kid_TINP<35', 'any_kid_TINP<40', 'all_kid_TINP<40', 'min_kid_TINP<40', 'max_kid_TINP<40', 'count_kid_TINP<40', 'sum_kid_TINP<40', 'mean_kid_TINP<40', '%_kid_TINP<40', 'any_kid_TINP<45', 'all_kid_TINP<45', 'min_kid_TINP<45', 'max_kid_TINP<45', 'count_kid_TINP<45', 'sum_kid_TINP<45', 'mean_kid_TINP<45', '%_kid_TINP<45', 'any_kid_TINP<50', 'all_kid_TINP<50', 'min_kid_TINP<50', 'max_kid_TINP<50', 'count_kid_TINP<50', 'sum_kid_TINP<50', 'mean_kid_TINP<50', '%_kid_TINP<50', 'any_kid_TINP<60', 'all_kid_TINP<60', 'min_kid_TINP<60', 'max_kid_TINP<60', 'count_kid_TINP<60', 'sum_kid_TINP<60', 'mean_kid_TINP<60', '%_kid_TINP<60', 'any_kid_TINP<70', 'all_kid_TINP<70', 'min_kid_TINP<70', 'max_kid_TINP<70', 'count_kid_TINP<70', 'sum_kid_TINP<70', 'mean_kid_TINP<70', '%_kid_TINP<70', 'any_kid_TINP<80', 'all_kid_TINP<80', 'min_kid_TINP<80', 'max_kid_TINP<80', 'count_kid_TINP<80', 'sum_kid_TINP<80', 'mean_kid_TINP<80', '%_kid_TINP<80', 'any_kid_TINP_any', 'all_kid_TINP_any', 'min_kid_TINP_any', 'max_kid_TINP_any', 'count_kid_TINP_any', 'sum_kid_TINP_any', 'mean_kid_TINP_any', '%_kid_TINP_any', 'all_anyage_TINP0', 'max_anyage_TINP0', 'mean_anyage_TINP0', 'all_anyage_TINP<10', 'max_anyage_TINP<10', 'sum_anyage_TINP<10', 'mean_anyage_TINP<10', 'all_anyage_TINP<15', 'max_anyage_TINP<15', 'count_anyage_TINP<15', 'sum_anyage_TINP<15', 'mean_anyage_TINP<15', 'all_anyage_TINP<20', 'max_anyage_TINP<20', 'count_anyage_TINP<20', 'sum_anyage_TINP<20', 'mean_anyage_TINP<20', 'all_anyage_TINP<25', 'max_anyage_TINP<25', 'count_anyage_TINP<25', 'sum_anyage_TINP<25', 'mean_anyage_TINP<25', 'all_anyage_TINP<30', 'max_anyage_TINP<30', 'count_anyage_TINP<30', 'sum_anyage_TINP<30', 'mean_anyage_TINP<30', '%_anyage_TINP<30', 'all_anyage_TINP<35', 'max_anyage_TINP<35', 'count_anyage_TINP<35', 'sum_anyage_TINP<35', 'mean_anyage_TINP<35', '%_anyage_TINP<35', 'all_anyage_TINP<40', 'max_anyage_TINP<40', 'count_anyage_TINP<40', 'sum_anyage_TINP<40', 'mean_anyage_TINP<40', '%_anyage_TINP<40', 'all_anyage_TINP<45', 'min_anyage_TINP<45', 'max_anyage_TINP<45', 'count_anyage_TINP<45', 'sum_anyage_TINP<45', 'mean_anyage_TINP<45', '%_anyage_TINP<45', 'all_anyage_TINP<50', 'min_anyage_TINP<50', 'max_anyage_TINP<50', 'count_anyage_TINP<50', 'sum_anyage_TINP<50', 'mean_anyage_TINP<50', '%_anyage_TINP<50', 'all_anyage_TINP<60', 'max_anyage_TINP<60', 'count_anyage_TINP<60', 'sum_anyage_TINP<60', 'mean_anyage_TINP<60', '%_anyage_TINP<60', 'all_anyage_TINP<70', 'max_anyage_TINP<70', 'count_anyage_TINP<70', 'sum_anyage_TINP<70', 'mean_anyage_TINP<70', '%_anyage_TINP<70', 'all_anyage_TINP<80', 'min_anyage_TINP<80', 'max_anyage_TINP<80', 'count_anyage_TINP<80', 'sum_anyage_TINP<80', 'mean_anyage_TINP<80', '%_anyage_TINP<80', 'min_anyage_TINP_any', 'max_anyage_TINP_any', 'count_anyage_TINP_any', 'sum_anyage_TINP_any', 'mean_anyage_TINP_any', 'MSP_2_1.0', 'HousingStatus_7.0', 'HousingStatus_8.0']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3406"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(to_drop)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Modeling with Random Forest Classifier\n",
    "In some initial modeling review (see appendix), the RandomForestClassifier was found to be a good choice of model, and\n",
    "it comes with the added advantage that we can review its feature_importances_ to see what's driving the model. \n",
    "Grid search for n_estimators and max_features (details in appendix) showed that n_estimators=1000 and \n",
    "max_features='auto' had good performance.\n",
    "\n",
    "Because our data is imbalanced (poverty is ~20% of the population), we'll consider the accuracy as well as the balanced\n",
    "accuracy and geometric mean, two metrics that give a better appreciation for classification on imbalanced data.\n",
    "\n",
    "Below the results show that we achieve nearly 93% overall accuracy (and 88% geometric mean) using the Random \n",
    "Forest.  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1554\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/ubuntu/.local/lib/python3.5/site-packages/imblearn/pipeline.py:197: UserWarning: Persisting input arguments took 0.63s to run.\n",
      "If this happens often in your code, it can cause performance problems \n",
      "(results will be correct in all cases). \n",
      "The reason for this is probably some large input arguments for a wrapped\n",
      " function (e.g. large strings).\n",
      "THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an\n",
      " example so that they can fix the problem.\n",
      "  **fit_params_steps[name])\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Took: 103.06s to fit \n",
      "\n",
      "Accuracy: 0.9287041730021963\n",
      "Balanced accuracy: 0.8877352697992946\n",
      "Geometric mean: 0.8849946175662557\n",
      "Confusion matrix:\n",
      "[[4499  200]\n",
      " [ 222  998]]\n",
      "\n",
      "Classification report:\n",
      "                   pre       rec       spe        f1       geo       iba       sup\n",
      "\n",
      "        0.0       0.95      0.96      0.82      0.96      0.88      0.79      4699\n",
      "        1.0       0.83      0.82      0.96      0.83      0.88      0.77      1220\n",
      "\n",
      "avg / total       0.93      0.93      0.85      0.93      0.88      0.79      5919\n",
      "\n",
      "n_estimators: 1000\n",
      "Training accuracy: 1.0\n"
     ]
    }
   ],
   "source": [
    "dropped = tester_copy.drop(to_drop, axis='columns') \n",
    "\n",
    "# Pull off 'NYCgov_Pov_Stat' for our target variable\n",
    "y = dropped['NYCgov_Pov_Stat']\n",
    "y.replace({2:0}, inplace=True) # Original coding is 1 in pov, 2 not in pov\n",
    "X = dropped.drop('NYCgov_Pov_Stat', axis='columns')\n",
    "\n",
    "# Get train and test - be sure to stratify since this is imbalanced data (poverty ~20% of the set)\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, stratify=y, random_state=42)\n",
    "\n",
    "scaler = Normalizer()\n",
    "classifier = RandomForestClassifier(n_estimators=1000, n_jobs=-1, max_features='auto', random_state=42, oob_score=True)\n",
    "cachedir = tempfile.mkdtemp(dir='/mnt/ssd/tmp')\n",
    "\n",
    "rf_pipeline = imbPipeline(steps=[('scaler', scaler), ('clf', classifier)], memory=cachedir)\n",
    "\n",
    "t0 = time.time()\n",
    "rf_pipeline.fit(X_train, y_train)\n",
    "\n",
    "time_to_fit = time.time() - t0\n",
    "print('Took: ' + '{:4.2f}'.format(time_to_fit) + 's to fit ')\n",
    "\n",
    "predictions = rf_pipeline.predict(X_test)\n",
    "\n",
    "print('\\nAccuracy: ' + str(rf_pipeline.score(X_test, y_test)))\n",
    "print('Balanced accuracy: ' + str(balanced_accuracy_score(y_test, predictions)))\n",
    "print('Geometric mean: ' + str(geometric_mean_score(y_test, predictions)))\n",
    "print('Confusion matrix:\\n' + str(confusion_matrix(y_test, predictions)))\n",
    "print('\\nClassification report:\\n' + str(classification_report_imbalanced(y_test, predictions)))\n",
    "print('n_estimators: ' + str(rf_pipeline.named_steps['clf'].n_estimators))\n",
    "print('Features: ' + str(len(dropped.columns)))\n",
    "\n",
    "# Save the model\n",
    "dump(rf_pipeline, 'data/rf_pipeline.joblib') \n",
    "# rf_pipeline = load('data/rf_pipeline.joblib')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Feature Importance with Random Forest Classifier\n",
    "What features are driving the model? Below we see the most important of the 1,554 features in the model, as a DataFrame and then in a chart. Remember that \n",
    "we're predicting the poverty of a household ('poverty unit'), rather than an individual.  'TINP' means total income for\n",
    "a single individual in the household, and 'WAG' means total wages for a person in the household.\n",
    "\n",
    "We see that the top 15 features are all related to total income and wages. While that's not shocking, let's dig deeper.\n",
    "1. The most-predictive levels of personal income or wages are \\\\$20,000, \\\\$25,000, and \\\\$15,000. At first glance this may seem\n",
    "odd since only 4 households with someone earning over \\\\$70,000 are in poverty.  But keep in mind that only 20% of the \n",
    "population is in poverty, so the most useful predictors are those that predict poverty, not the *absence* of poverty.\n",
    "2. Note that a wage of \\\\$70,000 is the fifteenth-most-important predictor; it is useful, just not as useful as those\n",
    "that help predict poverty.\n",
    "\n",
    "So the message here is clear, if not entirely surprising: the most effective way to get out of poverty is to make more money. Especially if you're not making that much money.\n",
    "\n",
    "A number of other points here:\n",
    "1. Total income obviously includes wages, but also includes items like investment income, self-employment income, and\n",
    "retirement income. In particular, those with low-wage jobs but other skills and interests can bolster their total \n",
    "income by taking a side job (if not already doing so).  \n",
    "2. Those in the workforce that have the means to do so can prevent being in poverty later by investing enough\n",
    "for retirement.\n",
    "3. The data available does not include hourly wage information - while hours worked per week and total annual wages \n",
    "are included, weeks worked per year are only presented in broad buckets. The impact of hourly wages only appears\n",
    "indirectly in the model."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Importance</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>any_anyage_TINP&lt;20</th>\n",
       "      <td>0.017795</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>any_adult_TINP&lt;20</th>\n",
       "      <td>0.016623</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>any_anyage_WAG&lt;20</th>\n",
       "      <td>0.015029</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>%_anyage_TINP&lt;20</th>\n",
       "      <td>0.014029</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>any_anyage_TINP&lt;25</th>\n",
       "      <td>0.013671</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>%_anyage_TINP&lt;25</th>\n",
       "      <td>0.013292</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>%_anyage_TINP&lt;15</th>\n",
       "      <td>0.011896</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>all_adult_WAG&lt;20</th>\n",
       "      <td>0.011588</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>any_anyage_WAG&lt;40</th>\n",
       "      <td>0.010976</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>%_anyage_WAG&lt;20</th>\n",
       "      <td>0.010910</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>any_anyage_TINP&lt;15</th>\n",
       "      <td>0.010596</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>any_anyage_TINP&lt;35</th>\n",
       "      <td>0.010238</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>%_adult_TINP&lt;25</th>\n",
       "      <td>0.010182</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>%_adult_TINP&lt;20</th>\n",
       "      <td>0.010066</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>any_anyage_WAG&lt;70</th>\n",
       "      <td>0.009464</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                    Importance\n",
       "any_anyage_TINP<20    0.017795\n",
       "any_adult_TINP<20     0.016623\n",
       "any_anyage_WAG<20     0.015029\n",
       "%_anyage_TINP<20      0.014029\n",
       "any_anyage_TINP<25    0.013671\n",
       "%_anyage_TINP<25      0.013292\n",
       "%_anyage_TINP<15      0.011896\n",
       "all_adult_WAG<20      0.011588\n",
       "any_anyage_WAG<40     0.010976\n",
       "%_anyage_WAG<20       0.010910\n",
       "any_anyage_TINP<15    0.010596\n",
       "any_anyage_TINP<35    0.010238\n",
       "%_adult_TINP<25       0.010182\n",
       "%_adult_TINP<20       0.010066\n",
       "any_anyage_WAG<70     0.009464"
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Get feature importances and sort\n",
    "rf_imps = list(zip(rf_pipeline.named_steps['clf'].feature_importances_, X_train.columns))\n",
    "rf_imps = sorted(rf_imps, key=lambda tup: tup[0], reverse=True)\n",
    "\n",
    "# Put them into a DataFrame for easy manipulation\n",
    "data_rf = [tup[0] for tup in rf_imps]\n",
    "index_rf = [tup[1] for tup in rf_imps]\n",
    "test_imps = pd.DataFrame(data=data_rf, index=index_rf, columns=['Importance'])\n",
    "\n",
    "test_imps.head(15)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot importance of key features\n",
    "fig, ax = plt.subplots(figsize=(10,4))\n",
    "test_imps.head(15).plot(kind='bar', ax=ax, legend=None)\n",
    "ax.set_title('Feature Importance for Key Features')\n",
    "ax.set_xlabel('Feature')\n",
    "ax.set_ylabel('Model Importance');"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "What about factors that are not strictly financial?  Specifically, things that people may have more control over, like \n",
    "education levels?\n",
    "\n",
    "Below are the DataFrame and a chart of the key non-financial factors. We see a couple of things:\n",
    "1. The relative importance to the model of these factors is much lower than the top-rated wage-related features. The\n",
    "top-rated overall feature is roughly 15x more important to the model than the top feature below.\n",
    "2. With that out of the way, the educational attainment of the head of the household ('SCHL_1') is the most important feature on \n",
    "this list. Focusing on improving educational opportunities, and tailoring them to communities of need, could improve\n",
    "poverty rates. For individual households with little opportunity to improve their wages in their current role, \n",
    "education would be the most powerful non-financial way to improve their poverty status.\n",
    "3. Disability status is important, with a variation on disability status of household members appearing in 8 of the 15 \n",
    "most-important features listed below (any feature with 'DIS' in the name). While there's little or nothing that a household can do about their disability \n",
    "status, this suggests an opportunity for local governments in focusing poverty efforts.\n",
    "4. Citizenship and English-speaking ability of the head of the household ('CIT_1' and 'ENG_1')rank highly on this list. While citizenship may be more difficult to change,\n",
    "English-speaking ability can be improved at little cost over time; and local governments can focus efforts and programs\n",
    "to communities with poor English skills and non-citizens.\n",
    "5. Total work hours for the poverty unit ('TotalWorkHrs_PU') is also an important factor, as we saw in EDA (the poverty rate \n",
    "among households with less than the equivalent of one 20 hours/week job is over 40%). Local governments can identify\n",
    "households under this threshold and target specific programs (e.g. childcare or older-adult care) to enable households\n",
    "to gain more work hours."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Importance</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>SCHL_1</th>\n",
       "      <td>0.001205</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max_18-64_not_DIS</th>\n",
       "      <td>0.001204</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>count_anyage_not_DIS</th>\n",
       "      <td>0.000991</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>CIT_1</th>\n",
       "      <td>0.000942</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>count_adult_not_DIS</th>\n",
       "      <td>0.000909</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ENG_1</th>\n",
       "      <td>0.000908</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean_anyage_not_DIS</th>\n",
       "      <td>0.000892</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>TotalWorkHrs_PU</th>\n",
       "      <td>0.000865</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>any_18-64_not_DIS</th>\n",
       "      <td>0.000859</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>sum_18-64_not_DIS</th>\n",
       "      <td>0.000855</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>count_18-64_not_DIS</th>\n",
       "      <td>0.000802</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>AGEP_1</th>\n",
       "      <td>0.000790</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>sum_adult_not_DIS</th>\n",
       "      <td>0.000787</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Boro_1_4.0</th>\n",
       "      <td>0.000746</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max_18-64_nonzero_WKW</th>\n",
       "      <td>0.000733</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                       Importance\n",
       "SCHL_1                   0.001205\n",
       "max_18-64_not_DIS        0.001204\n",
       "count_anyage_not_DIS     0.000991\n",
       "CIT_1                    0.000942\n",
       "count_adult_not_DIS      0.000909\n",
       "ENG_1                    0.000908\n",
       "mean_anyage_not_DIS      0.000892\n",
       "TotalWorkHrs_PU          0.000865\n",
       "any_18-64_not_DIS        0.000859\n",
       "sum_18-64_not_DIS        0.000855\n",
       "count_18-64_not_DIS      0.000802\n",
       "AGEP_1                   0.000790\n",
       "sum_adult_not_DIS        0.000787\n",
       "Boro_1_4.0               0.000746\n",
       "max_18-64_nonzero_WKW    0.000733"
      ]
     },
     "execution_count": 104,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "non_fin_vars = ['AGEP', 'CIT', 'SCH', 'SCHG', 'SCHL', 'SEX', 'ESR', 'LANX', 'ENG', 'MSP', 'MAR', 'WKW', 'WKHP', \n",
    "                    'DIS', 'TEN', 'HHT', 'JWTR', 'Povunit_Rel', 'FamType_PU', 'Ethnicity', \n",
    "                    'TotalWorkHrs_PU', 'Boro', 'EducAttain', 'CitizenStatus', 'AgeCateg', 'FTPTWork']\n",
    "check_non_fin = lambda string: any (v in string for v in non_fin_vars)\n",
    "non_fins = test_imps.T[[x for x in test_imps.T.columns if check_non_fin(x)]].T.head(15)\n",
    "non_fins"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot importance of key features\n",
    "fig, ax = plt.subplots(figsize=(10,4))\n",
    "non_fins.plot(kind='bar', ax=ax, legend=None)\n",
    "ax.set_title('Feature Importance for Key \"Non-Financial\" Features')\n",
    "ax.set_xlabel('Feature')\n",
    "ax.set_ylabel('Model Importance');"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### LIME with Random Forest Classifier\n",
    "Below we see a couple of examples of data points, and why they were classified as they were. For the first point, the\n",
    "household is not in poverty; looking at the chart below, we can see why.\n",
    "\n",
    "Our variables that end in _1, _2, _3, etc. indicate person 1 in the household, person 2 in the household, etc.\n",
    "\n",
    "Interestingly, this household has no wages for person 1, 2, or 3, which would suggest the household is in poverty (see \n",
    "the green bars to the right of the chart); but the first person is either self-employed or independently wealthy, as \n",
    "they have a total income of over \\\\$67,000 despite no wages (red bar).  Thus, they are correctly identified as not in\n",
    "poverty."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.0"
      ]
     },
     "execution_count": 110,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#y_test[7] # 0 means not in poverty\n",
    "predictions[7] # 0 means not in poverty"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/ubuntu/.local/lib/python3.5/site-packages/sklearn/utils/validation.py:595: DataConversionWarning: Data with input dtype object was converted to float64 by StandardScaler.\n",
      "  warnings.warn(msg, DataConversionWarning)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Took 72.62681746482849 s\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 720x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "time_0 = time.time()\n",
    "\n",
    "# Specify the prediction function for use with LIME\n",
    "predict_fn = lambda x: rf_pipeline.predict_proba(x)\n",
    "\n",
    "explainer = lime.lime_tabular.LimeTabularExplainer(X_train.values, feature_names = X_train.columns, \n",
    "                                                   class_names = ['Not Poverty', 'Poverty'])\n",
    "\n",
    "np.random.seed(42)\n",
    "i = 7\n",
    "exp = explainer.explain_instance(X_test.values[i], predict_fn, num_features=5)\n",
    "exp.as_pyplot_figure()\n",
    "\n",
    "time_took = time.time() - time_0\n",
    "print('Took ' + str(time_took) + ' s')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Here's an example of a household in poverty.  As we can see below, there's no wages for person 1, 2, or 3; no income for\n",
    "person 2; and person 1 has less than \\\\$10,000 in total income.  This is a household in poverty."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 127,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.0"
      ]
     },
     "execution_count": 127,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#y_test[1657] # 1 means in poverty\n",
    "predictions[1657] # 1 means in poverty"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 128,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Took 37.33846688270569 s\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "time_0 = time.time()\n",
    "\n",
    "# Since predict_fn and explainer were calculated above, commenting them out here\n",
    "#predict_fn = lambda x: rf_pipeline.predict_proba(x)\n",
    "#explainer = lime.lime_tabular.LimeTabularExplainer(X_train.values, feature_names = X_train.columns, class_names = ['Not Poverty', 'Poverty'])\n",
    "\n",
    "np.random.seed(42)\n",
    "i = 1657\n",
    "exp = explainer.explain_instance(X_test.values[i], predict_fn, num_features=5)\n",
    "exp.as_pyplot_figure()\n",
    "\n",
    "time_took = time.time() - time_0\n",
    "print('Took ' + str(time_took) + ' s')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Modeling with Balanced Random Forest Classifier\n",
    "Because our data is unbalanced (~20% of the sample is in poverty), our model will have a harder time identifying \n",
    "households that are in poverty. We can achieve better accuracy on households in poverty by using a Balanced Random \n",
    "Forest Classifier, at the expense of some overall accuracy.\n",
    "\n",
    "Below we see with a Balanced Random Forest Classifier, we get a total accuracy of about 90% (worse than the almost 93% \n",
    "with the Random Forest Classifier), but balanced accuracy and geometric mean of 91% (compared to about 88% above)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 129,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/ubuntu/.local/lib/python3.5/site-packages/imblearn/pipeline.py:197: UserWarning: Persisting input arguments took 0.64s to run.\n",
      "If this happens often in your code, it can cause performance problems \n",
      "(results will be correct in all cases). \n",
      "The reason for this is probably some large input arguments for a wrapped\n",
      " function (e.g. large strings).\n",
      "THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an\n",
      " example so that they can fix the problem.\n",
      "  **fit_params_steps[name])\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Took: 86.54s to fit \n",
      "\n",
      "Accuracy: 0.8986315255955398\n",
      "Balanced accuracy: 0.9124890541761589\n",
      "Geometric mean: 0.9121844230829197\n",
      "Confusion matrix:\n",
      "[[4177  522]\n",
      " [  78 1142]]\n",
      "\n",
      "Classification report:\n",
      "                   pre       rec       spe        f1       geo       iba       sup\n",
      "\n",
      "        0.0       0.98      0.89      0.94      0.93      0.91      0.83      4699\n",
      "        1.0       0.69      0.94      0.89      0.79      0.91      0.84      1220\n",
      "\n",
      "avg / total       0.92      0.90      0.93      0.90      0.91      0.83      5919\n",
      "\n",
      "OOB score: 0.9254096975840513\n",
      "n_estimators: 1000\n",
      "Features: 1554\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "['data/rf_pipeline.joblib']"
      ]
     },
     "execution_count": 129,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Pull off 'NYCgov_Pov_Stat' for our target variable\n",
    "y = dropped['NYCgov_Pov_Stat']\n",
    "#y.replace({1: 'Pov', 2:'Not Pov'}, inplace=True)\n",
    "y.replace({2:0}, inplace=True) # Original coding is 1 in pov, 2 not in pov\n",
    "X = dropped.drop('NYCgov_Pov_Stat', axis='columns')\n",
    "\n",
    "# Get train and test - be sure to stratify since this is imbalanced data (poverty ~20% of the set)\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, stratify=y, random_state=42)\n",
    "\n",
    "scaler = Normalizer()\n",
    "classifier = BalancedRandomForestClassifier(n_estimators=1000, n_jobs=-1, max_features='auto', oob_score=True,\n",
    "                                            random_state=42)\n",
    "cachedir = tempfile.mkdtemp(dir='/mnt/ssd/tmp')\n",
    "\n",
    "# Create empty dictionaries to hold results\n",
    "results_1000_estimators = {}\n",
    "\n",
    "brf_pipeline = imbPipeline(steps=[('scaler', scaler), ('clf', classifier)],  memory=cachedir)\n",
    "\n",
    "t0 = time.time()\n",
    "brf_pipeline.fit(X_train, y_train)\n",
    "\n",
    "time_to_fit = time.time() - t0\n",
    "print('Took: ' + '{:4.2f}'.format(time_to_fit) + 's to fit ')\n",
    "\n",
    "predictions = brf_pipeline.predict(X_test)\n",
    "\n",
    "print('\\nAccuracy: ' + str(brf_pipeline.score(X_test, y_test)))\n",
    "print('Balanced accuracy: ' + str(balanced_accuracy_score(y_test, predictions)))\n",
    "print('Geometric mean: ' + str(geometric_mean_score(y_test, predictions)))\n",
    "print('Confusion matrix:\\n' + str(confusion_matrix(y_test, predictions)))\n",
    "print('\\nClassification report:\\n' + str(classification_report_imbalanced(y_test, predictions)))\n",
    "print('OOB score: ' + str(brf_pipeline.named_steps['clf'].oob_score_))\n",
    "print('n_estimators: ' + str(brf_pipeline.named_steps['clf'].n_estimators))\n",
    "print('Features: ' + str(len(dropped.columns)))\n",
    "\n",
    "# Save the model\n",
    "dump(brf_pipeline, 'data/brf_pipeline.joblib') \n",
    "# brf_pipeline = load('data/brf_pipeline.joblib')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Feature Importance with Balanced Random Forest Classifier\n",
    "Does this model show us any differences in the importance of features? On the whole, there's nothing earth-shattering.\n",
    "Instead of a wage of \\\\$70,000 being in the top-15 as above, it's a wage of \\\\$80,000, and it's actually the 11th most \n",
    "important in this model."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Importance</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>any_anyage_TINP&lt;20</th>\n",
       "      <td>0.021380</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>%_adult_TINP&lt;20</th>\n",
       "      <td>0.019254</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>count_adult_TINP&lt;20</th>\n",
       "      <td>0.018400</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>%_anyage_TINP&lt;20</th>\n",
       "      <td>0.016419</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>any_anyage_TINP&lt;25</th>\n",
       "      <td>0.015935</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>%_adult_TINP&lt;25</th>\n",
       "      <td>0.015337</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>any_anyage_TINP&lt;30</th>\n",
       "      <td>0.015120</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>any_adult_TINP&lt;20</th>\n",
       "      <td>0.015058</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>any_anyage_WAG&lt;25</th>\n",
       "      <td>0.014472</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>%_anyage_TINP&lt;25</th>\n",
       "      <td>0.014061</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>any_anyage_WAG&lt;80</th>\n",
       "      <td>0.011892</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>any_anyage_WAG&lt;45</th>\n",
       "      <td>0.011803</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>count_adult_TINP&lt;25</th>\n",
       "      <td>0.011493</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>any_anyage_TINP&lt;35</th>\n",
       "      <td>0.011421</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>any_adult_TINP&lt;25</th>\n",
       "      <td>0.011246</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                     Importance\n",
       "any_anyage_TINP<20     0.021380\n",
       "%_adult_TINP<20        0.019254\n",
       "count_adult_TINP<20    0.018400\n",
       "%_anyage_TINP<20       0.016419\n",
       "any_anyage_TINP<25     0.015935\n",
       "%_adult_TINP<25        0.015337\n",
       "any_anyage_TINP<30     0.015120\n",
       "any_adult_TINP<20      0.015058\n",
       "any_anyage_WAG<25      0.014472\n",
       "%_anyage_TINP<25       0.014061\n",
       "any_anyage_WAG<80      0.011892\n",
       "any_anyage_WAG<45      0.011803\n",
       "count_adult_TINP<25    0.011493\n",
       "any_anyage_TINP<35     0.011421\n",
       "any_adult_TINP<25      0.011246"
      ]
     },
     "execution_count": 132,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Get feature importances and sort\n",
    "brf_imps = list(zip(brf_pipeline.named_steps['clf'].feature_importances_, X_train.columns))\n",
    "brf_imps = sorted(brf_imps, key=lambda tup: tup[0], reverse=True)\n",
    "\n",
    "# Put them into a DataFrame for easy manipulation\n",
    "data_brf = [tup[0] for tup in brf_imps]\n",
    "index_brf = [tup[1] for tup in brf_imps]\n",
    "brf_imps = pd.DataFrame(data=data_brf, index=index_brf, columns=['Importance'])\n",
    "\n",
    "brf_imps.head(15)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 151,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 720x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot importance of key features\n",
    "fig, ax = plt.subplots(figsize=(10,4))\n",
    "brf_imps.head(15).plot(kind='bar', ax=ax, legend=None)\n",
    "ax.set_title('Feature Importance for Key Features - Balanced Random Forest Classifier')\n",
    "ax.set_xlabel('Feature')\n",
    "ax.set_ylabel('Model Importance');"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "What about non-financial measures? Since this model is more sensitive to those in poverty, it's interesting to see how \n",
    "it differs there.\n",
    "\n",
    "First of all, the most important feature overall is about 20 times more important than the most important non-financial\n",
    "feature (it was a factor of 15x in our random forest).  As for the features themselves:\n",
    "1. Disability status is still a huge factor here, with the top and 5 of the top 15 features being disability-related.\n",
    "2. Educational attainment of the head of the household ('SCHL_1') is the second-most important on this list.\n",
    "3. Work hours is actually much more important in this model, with 7 of the top 15 non-financial features being related\n",
    "to work hours ('TotalWorkHrs_PU' and the various features with 'WKW' in their names).\n",
    "4. Again, English-speaking ability and citizenship status of the head of the household are among the most important non-\n",
    "financial factors in poverty status."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 133,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Importance</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count_anyage_not_DIS</th>\n",
       "      <td>0.001015</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>SCHL_1</th>\n",
       "      <td>0.000776</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>TotalWorkHrs_PU</th>\n",
       "      <td>0.000735</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min_adult_&gt;40WKW</th>\n",
       "      <td>0.000688</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min_18-64_nonzero_WKW</th>\n",
       "      <td>0.000611</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ENG_1</th>\n",
       "      <td>0.000599</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min_adult_nonzero_WKW</th>\n",
       "      <td>0.000598</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max_adult_&gt;40WKW</th>\n",
       "      <td>0.000596</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>any_18-64_not_DIS</th>\n",
       "      <td>0.000594</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max_adult_nonzero_WKW</th>\n",
       "      <td>0.000592</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>count_18-64_not_DIS</th>\n",
       "      <td>0.000583</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean_anyage_not_DIS</th>\n",
       "      <td>0.000582</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>CIT_1</th>\n",
       "      <td>0.000578</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min_adult_50-52WKW</th>\n",
       "      <td>0.000567</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max_18-64_not_DIS</th>\n",
       "      <td>0.000562</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                       Importance\n",
       "count_anyage_not_DIS     0.001015\n",
       "SCHL_1                   0.000776\n",
       "TotalWorkHrs_PU          0.000735\n",
       "min_adult_>40WKW         0.000688\n",
       "min_18-64_nonzero_WKW    0.000611\n",
       "ENG_1                    0.000599\n",
       "min_adult_nonzero_WKW    0.000598\n",
       "max_adult_>40WKW         0.000596\n",
       "any_18-64_not_DIS        0.000594\n",
       "max_adult_nonzero_WKW    0.000592\n",
       "count_18-64_not_DIS      0.000583\n",
       "mean_anyage_not_DIS      0.000582\n",
       "CIT_1                    0.000578\n",
       "min_adult_50-52WKW       0.000567\n",
       "max_18-64_not_DIS        0.000562"
      ]
     },
     "execution_count": 133,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "non_fins_brf = brf_imps.T[[x for x in brf_imps.T.columns if check_non_fin(x)]].T.head(15)\n",
    "non_fins_brf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 153,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot importance of key features\n",
    "fig, ax = plt.subplots(figsize=(10,4))\n",
    "non_fins_brf.plot(kind='bar', ax=ax, legend=None)\n",
    "ax.set_title('Feature Importance for Key \"Non-Financial\" Features - Balanced Random Forest Classifier')\n",
    "ax.set_xlabel('Feature')\n",
    "ax.set_ylabel('Model Importance');"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### LIME with Balanced Random Forest Classifier\n",
    "Below we see a couple of examples of data points, and why they were classified as they were. For the first point, the household is not in poverty; looking at the chart below, we can see why.\n",
    "\n",
    "Our variables that end in _1, _2, _3, etc. indicate person 1 in the household, person 2 in the household, etc.\n",
    "\n",
    "This household has no wages for person 2 or 3, and no total income for person 2.  Since person 1 has wages less than\n",
    "\\\\$14,000 and total income less than \\\\$10,000, the model correctly predicts poverty."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 138,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.0"
      ]
     },
     "execution_count": 138,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#y_test[4] # 1 means in poverty\n",
    "predictions[4] # 1 means in poverty"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 135,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/ubuntu/.local/lib/python3.5/site-packages/sklearn/utils/validation.py:595: DataConversionWarning: Data with input dtype object was converted to float64 by StandardScaler.\n",
      "  warnings.warn(msg, DataConversionWarning)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Took 72.93079781532288 s\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "time_0 = time.time()\n",
    "\n",
    "# Specify the prediction function for use with LIME\n",
    "predict_fn = lambda x: brf_pipeline.predict_proba(x)\n",
    "\n",
    "explainer = lime.lime_tabular.LimeTabularExplainer(X_train.values, feature_names = X_train.columns, \n",
    "                                                   class_names = ['Not Poverty', 'Poverty'])\n",
    "\n",
    "np.random.seed(42)\n",
    "i = 4\n",
    "exp = explainer.explain_instance(X_test.values[i], predict_fn, num_features=5)\n",
    "exp.as_pyplot_figure()\n",
    "\n",
    "time_took = time.time() - time_0\n",
    "print('Took ' + str(time_took) + ' s')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "For the point below, the total income and wages of person 1 and person 2 are so high, this household is pretty obviously\n",
    "not in poverty. The strongest piece of evidence that this household might be in poverty is that the head of the \n",
    "household has no interest/dividends/rental property income (INTP_adj_1 in green), which is clearly not sufficient."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 148,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.0"
      ]
     },
     "execution_count": 148,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#y_test[4242] # 0 means not in poverty\n",
    "predictions[4242] # 0 means not in poverty"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 149,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Took 37.33522152900696 s\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 720x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "time_0 = time.time()\n",
    "\n",
    "# Since predict_fn and explainer were calculated above, commenting them out here\n",
    "#predict_fn = lambda x: brf_pipeline.predict_proba(x)\n",
    "#explainer = lime.lime_tabular.LimeTabularExplainer(X_train.values, feature_names = X_train.columns,  class_names = ['Not Poverty', 'Poverty'])\n",
    "\n",
    "np.random.seed(42)\n",
    "i = 4242\n",
    "exp = explainer.explain_instance(X_test.values[i], predict_fn, num_features=5)\n",
    "exp.as_pyplot_figure()\n",
    "\n",
    "time_took = time.time() - time_0\n",
    "print('Took ' + str(time_took) + ' s')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Summary\n",
    "\n",
    "To summarize:\n",
    "1. We can develop a model to predict NYC Poverty Status using only the ACS variables with 92.9% accuracy and 88.8% \n",
    "balanced accuracy, using a Random Forest Classifier with appropriate feature engineering.\n",
    "2. Since NYC poverty status is imbalanced (about 20% of households are in poverty), we can further improve our \n",
    "sensitivity to poverty households using a Balanced Random Forest Classifier, at the expense of some of our total \n",
    "accuracy. In this situation, we can achieve a 89.9% total accuracy and 91.2% balanced accuracy.\n",
    "3. The financial features (total personal income and personal wages) dominate the poverty prediction models. The top-15\n",
    "features of both models are personal income and wage-related. In particular, for predicting poverty, the features that\n",
    "focus on total income or wages in the \\\\$20,000, \\\\$25,000, \\\\$30,000 range are the most relevant.\n",
    "4. Among non-financial variables like education or English-speaking ability, the most important are the education level\n",
    "of the head of the household, the disability status of anyone in the household, the citizenship and English-speaking \n",
    "ability of the head of the household, and the number of total work hours available to the household."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Appendix\n",
    "Old items that are mostly of historical interest."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Testing -- at a personal level -- total income versus non-financial features"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Took: 335.54s to fit \n",
      "\n",
      "Test score: 0.35290137507414676\n",
      "Training score: 0.9194132193643912\n"
     ]
    },
    {
     "ename": "KeyError",
     "evalue": "'clf'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-23-5f5aa6937271>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     50\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'\\nTest score: '\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpers_inc_pipeline\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mscore\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_test\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_test\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     51\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Training score: '\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpers_inc_pipeline\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mscore\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_train\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 52\u001b[0;31m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'OOB score: '\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpers_inc_pipeline\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnamed_steps\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'clf'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0moob_score_\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     53\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'n_estimators: '\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpers_inc_pipeline\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnamed_steps\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'clf'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mn_estimators\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mKeyError\u001b[0m: 'clf'"
     ]
    }
   ],
   "source": [
    "personal = all_2016[all_2016.AGEP >= 18].copy()\n",
    "\n",
    "# Add total personal income ('TINP') and total rent/mortgage ('MRNT')\n",
    "personal['TINP'] = personal.WAGP_adj + personal.INTP_adj + personal.SEMP_adj + personal.SSP_adj + personal.SSIP_adj + \\\n",
    "                    personal.PA_adj + personal.RETP_adj + personal.OI_adj\n",
    "personal['MRNT'] = personal.MRGP_adj + personal.RNTP_adj\n",
    "\n",
    "# Only keep the features that may be useful\n",
    "features_to_keep = ['AGEP', 'CIT', 'SCH', 'SCHG', 'SCHL', 'SEX', 'ESR', 'LANX', 'ENG', 'MSP', 'MAR', 'WKW', 'WKHP', \n",
    "                    'DIS', 'NP', 'TEN', 'HHT', 'JWTR', 'Povunit_Rel', 'FamType_PU', 'HousingStatus', 'Ethnicity', \n",
    "                    'TotalWorkHrs_PU', 'Boro', 'EducAttain', 'CitizenStatus', 'AgeCateg', 'FTPTWork', 'MRNT', 'TINP']\n",
    "personal = personal[features_to_keep]\n",
    "\n",
    "# Track which columns we'll need to make dummies for\n",
    "dummy_these = ['AGEP', 'CIT', 'SCH', 'SCHG', 'SCHL', 'SEX', 'ESR', 'LANX', 'ENG', 'MSP', 'MAR', 'WKW', 'WKHP', \n",
    "                    'DIS', 'NP', 'TEN', 'HHT', 'JWTR', 'Povunit_Rel', 'FamType_PU', 'HousingStatus', 'Ethnicity', \n",
    "                    'TotalWorkHrs_PU', 'Boro', 'EducAttain', 'CitizenStatus', 'AgeCateg', 'FTPTWork']\n",
    "\n",
    "# Pull off 'TINP' for our target variable\n",
    "y_pers = personal['TINP'].copy()\n",
    "X_pers = personal.copy().drop('TINP', axis='columns')\n",
    "\n",
    "# Get train and test - no stratifying here since we're doing regression, not classification\n",
    "X_train, X_test, y_train, y_test = train_test_split(X_pers, y_pers, test_size=0.2, random_state=42)\n",
    "\n",
    "# Prepare our steps for the pipeline\n",
    "categorizer = Categorizer(columns=dummy_these)\n",
    "dummy_encoder = DummyEncoder(drop_first=True)\n",
    "scaler = Normalizer()\n",
    "regressor = RandomForestRegressor(n_jobs=-1, n_estimators=1000, max_features='auto', oob_score=True, random_state=42)\n",
    "\n",
    "cachedir = tempfile.mkdtemp(dir='/mnt/ssd/tmp')\n",
    "\n",
    "pers_inc_pipeline = imbPipeline(steps=[('cat', categorizer), \n",
    "                              ('dummies', dummy_encoder), \n",
    "                              ('scaler', scaler), \n",
    "                              ('reg', regressor)], \n",
    "                       memory=cachedir)\n",
    "\n",
    "# Fire away\n",
    "t0 = time.time()\n",
    "pers_inc_pipeline.fit(X_train, y_train)\n",
    "\n",
    "time_to_fit = time.time() - t0\n",
    "print('Took: ' + '{:4.2f}'.format(time_to_fit) + 's to fit ')\n",
    "    \n",
    "print('\\nTest score: ' + str(pers_inc_pipeline.score(X_test, y_test)))\n",
    "print('Training score: ' + str(pers_inc_pipeline.score(X_train, y_train)))\n",
    "print('OOB score: ' + str(pers_inc_pipeline.named_steps['reg'].oob_score_))\n",
    "print('n_estimators: ' + str(pers_inc_pipeline.named_steps['reg'].n_estimators))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "predictions_pers = pers_inc_pipeline.predict(X_test)\n",
    "\n",
    "# Plot actual vs predicted\n",
    "fig, ax = plt.subplots()\n",
    "ax = sns.regplot(y_test, predictions_pers)#, marker='.', linestyle='none')\n",
    "lower = 0\n",
    "upper = max(y_test.max(), predictions_pers.max()) + 10000\n",
    "liner = np.arange(lower, upper)\n",
    "ax.plot(liner, liner, color='k')\n",
    "ax.set_xlim(lower, upper)\n",
    "ax.set_ylim(lower, upper)\n",
    "ax.set_title('Total Personal Income vs. Predicted')\n",
    "ax.set_xlabel('Actual Total Personal Income')\n",
    "ax.set_ylabel('Predicted Total Personal Income')\n",
    "plt.rcParams[\"figure.figsize\"] = [4,4]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[(0.015547567291145592, 'AGEP'),\n",
       " (0.006694876419869801, 'FamType_PU'),\n",
       " (0.006608194143419285, 'TotalWorkHrs_PU'),\n",
       " (0.004774831141534058, 'FTPTWork'),\n",
       " (0.00469248382048341, 'EducAttain'),\n",
       " (0.00436351341183179, 'MRNT'),\n",
       " (0.0037353994532746382, 'Boro'),\n",
       " (0.003696698220815743, 'JWTR'),\n",
       " (0.0036964648389549537, 'Ethnicity'),\n",
       " (0.0036936192163132564, 'TEN'),\n",
       " (0.0030972619116118702, 'WKHP'),\n",
       " (0.002844298571018428, 'Povunit_Rel'),\n",
       " (0.0027464484440693875, 'AgeCateg'),\n",
       " (0.002433785650907912, 'NP'),\n",
       " (0.0022940933411346323, 'HousingStatus')]"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "imps_pers = list(zip(pers_inc_pipeline.named_steps['reg'].feature_importances_, \n",
    "                     X_train.columns))\n",
    "sorted(imps_pers, key=lambda tup: tup[0], reverse=True)[:15]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 3 folds for each of 3 candidates, totalling 9 fits\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=-1)]: Using backend LokyBackend with 2 concurrent workers.\n"
     ]
    }
   ],
   "source": [
    "# Pull off 'NYCgov_Pov_Stat' for our target variable\n",
    "y = X['NYCgov_Pov_Stat'].replace({'NYCgov_Pov_Stat': {1: 'Pov', 2:'Not Pov'}})\n",
    "X = X.drop('NYCgov_Pov_Stat', axis='columns')\n",
    "\n",
    "# Get train and test - be sure to stratify since this is imbalanced data (poverty ~20% of the set)\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, stratify=y)\n",
    "\n",
    "# Transforms for pipeline: \n",
    "# 1) categorize to prep for one-hot encoding\n",
    "# 2) one-hot encode, dropping one to avoid colinearity\n",
    "# 3) deal with imbalanced data with sampling strategies (poverty is ~20% of total)\n",
    "# 4) scale data\n",
    "# 5) classifiers\n",
    "categorizer = Categorizer(columns=dummy_these)\n",
    "dummy_encoder = DummyEncoder(drop_first=True)\n",
    "samplers = [SMOTE(random_state=42), SMOTETomek(random_state=42), TomekLinks(random_state=42)]\n",
    "#scalers = [StandardScaler(), Normalizer(), PowerTransformer(), QuantileTransformer()]\n",
    "scalers = [Normalizer()]\n",
    "scaler = Normalizer()\n",
    "#classifiers = [LogisticRegression(), SGDClassifier(), AdaBoostClassifier(), BaggingClassifier(), GradientBoostingClassifier(), \n",
    "               #RandomForestClassifier(), BalancedBaggingClassifier(), BalancedRandomForestClassifier(), RUSBoostClassifier()]\n",
    "#classifiers = [BalancedBaggingClassifier(), BaggingClassifier(), RandomForestClassifier(), BalancedRandomForestClassifier(), \n",
    "               #AdaBoostClassifier(), GradientBoostingClassifier()]\n",
    "#classifiers = [RandomForestClassifier(), BalancedRandomForestClassifier()]\n",
    "classifiers = [BalancedRandomForestClassifier()]\n",
    "\n",
    "#sampler = TomekLinks(random_state=42)\n",
    "#scaler = QuantileTransformer()\n",
    "#clf = LogisticRegression(solver='lbfgs', max_iter=200)\n",
    "#clf = RandomForestClassifier(n_estimators=100)\n",
    "#clf = AdaBoostClassifier()\n",
    "#params={0: {'clf__C': [1, 1e-1, 1e-2, 1e-3], 'clf__max_iter': [1e2, 1e3, 1e4], # Logistic Regression\n",
    "                               #'clf__solver': ['lbfgs', 'liblinear', 'sag', 'saga']}, \n",
    "        #1: {'n_estimators': [1e1, 1e2, 1e3], 'max_features': [5, 10, 50, 100], # Random Forest Classifier\n",
    "                         #'criterion': ['gini', 'entropy']}\n",
    "       #}\n",
    "#params = {0: {'clf__n_estimators': [10, 100, 1000], 'clf__max_features': [5, 10, 50, 100],\n",
    "              #'clf__criterion': ['gini', 'entropy']},\n",
    "          #1: {'clf__n_estimators': [10, 100, 1000], 'clf__max_features': [5, 10, 50, 100],\n",
    "              #'clf__criterion': ['gini', 'entropy'], 'clf_sampling_strategy': [0.05, 0.25, 0.5, 0.75, 0.95]}\n",
    "         #}\n",
    "\n",
    "params = {0: {'clf__n_estimators': [1000], 'clf__max_features': [100],\n",
    "              'clf__sampling_strategy': ['not minority', 'not majority', 'all']}}\n",
    "          #1: {'clf__n_estimators': [10, 100, 1000], 'clf__max_features': [5, 10, 50, 100],\n",
    "              #'clf__criterion': ['gini', 'entropy']},\n",
    "         #}\n",
    "\n",
    "#parameters = {'clf__n_estimators': [10, 100, 1000], 'clf__max_features': [5, 10, 50, 100], 'clf__criterion': ['gini', 'entropy']}\n",
    "parameters = {'clf__n_estimators': [100], 'clf__max_features': ['auto'], 'clf__criterion': ['gini']}\n",
    "\n",
    "cachedir = tempfile.mkdtemp()\n",
    "\n",
    "#pipeline = imbPipeline(steps=[('cat', categorizer),\n",
    "                              #('dummies', dummy_encoder),\n",
    "                              #('sampler', sampler),\n",
    "                              #('scaler', scaler),\n",
    "                              #('clf', BalancedRandomForestClassifier())], \n",
    "                      #memory=cachedir)\n",
    "                    \n",
    "#grid = GridSearchCV(estimator=pipeline, param_grid=parameters, cv=5, n_jobs=-1, pre_dispatch=2, verbose=9)#, scoring=balanced_accuracy_score())\n",
    "#grid = GridSearchCV(estimator=pipeline, param_grid=parameters, cv=5, n_jobs=-1, verbose=9)\n",
    "\n",
    "#t0 = time.time()\n",
    "#grid.fit(X_train, y_train)\n",
    "#time_to_fit = time.time() - t0\n",
    "#print('Took: ' + '{:4.2f}'.format(time_to_fit) + 's to fit ')\n",
    "#print(grid.cv_results_)\n",
    "\n",
    "#for sampler, i in zip(samplers, range(len(samplers))):\n",
    "for i in range(1):\n",
    "    #for scaler, j in zip(scalers, range(len(scalers))):\n",
    "    for scaler in scalers:\n",
    "        for k in range(len(classifiers)):\n",
    "            #pipeline = Pipeline(steps=[#('cat', categorizer),\n",
    "            pipeline = imbPipeline(steps=[('cat', categorizer),\n",
    "                                          ('dummies', dummy_encoder),\n",
    "                                          #('sampler', sampler),\n",
    "                                          ('scaler', scaler),\n",
    "                                          ('clf', classifiers[k])],\n",
    "                                  memory=cachedir)\n",
    "\n",
    "            #print(pipeline)\n",
    "            #print(params[i])\n",
    "            #pipeline.get_params().keys()\n",
    "            grid = GridSearchCV(estimator=pipeline, param_grid=params[k], cv=3, n_jobs=-1, verbose=9)#, scoring=balanced_accuracy_score())\n",
    "\n",
    "            t0 = time.time()\n",
    "            #pipeline.fit(X_train, y_train)\n",
    "            grid.fit(X_train, y_train)\n",
    "            time_to_fit = time.time() - t0\n",
    "            print('Took: ' + '{:4.2f}'.format(time_to_fit) + 's to fit ')\n",
    "            print(grid.cv_results_)\n",
    "            print('best estimator: ' + str(grid.best_estimator_))\n",
    "            print('best params: ' + str(grid.best_params_))\n",
    "            print('best index: ' + str(grid.best_index_))\n",
    "            \n",
    "            #print(str(sampler) + ',' + str(scaler) + ',' + str(classifiers[k]))\n",
    "            #print(str(scaler) + ',' + str(classifiers[k]))\n",
    "                  \n",
    "            #means = grid.cv_results_['mean_test_score']\n",
    "            #stds = grid.cv_results_['std_test_score']\n",
    "            #for mean, std, params in zip(means, stds, grid.cv_results_['params']):\n",
    "                #print(\"%0.3f (+/-%0.03f) for %r\" % (mean, std * 2, params))\n",
    "\n",
    "            #predictions = pipeline.predict(X_test)\n",
    "\n",
    "#print('Predictions: ' + str(predictions))\n",
    "#print('Actual:\\n' + str(y_small))\n",
    "            #print('\\nBalanced accuracy: ' + str(balanced_accuracy_score(y_test, predictions)))\n",
    "            #print('Geometric mean: ' + str(geometric_mean_score(y_test, predictions)))\n",
    "            #print('Confusion matrix:\\n' + str(confusion_matrix(y_test, predictions)))\n",
    "            #print('\\nClassification report:\\n' + str(classification_report_imbalanced(y_test, predictions)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.7975358685378098"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "geometric_mean_score(grid.predict(X_test), y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[(0.019535791275811728, 'WKW_2'),\n",
       " (0.020252231346152935, 'INTP_adj_1'),\n",
       " (0.020452137721584687, 'SCHL_2'),\n",
       " (0.020767468686063252, 'RNTP_adj'),\n",
       " (0.02515045254416771, 'WKHP_2'),\n",
       " (0.026205088630138082, 'AGEP_1'),\n",
       " (0.02817688155652038, 'SCHL_1'),\n",
       " (0.03238306328525264, 'WKW_1'),\n",
       " (0.03242418603775719, 'JWTR_1'),\n",
       " (0.03587014309356664, 'RETP_adj_1'),\n",
       " (0.041251391667779504, 'WKHP_1'),\n",
       " (0.05057339662820781, 'SSP_adj_1'),\n",
       " (0.052182437399624144, 'WAGP_adj_2'),\n",
       " (0.07156076688876317, 'TotalWorkHrs_PU'),\n",
       " (0.14873418922209963, 'WAGP_adj_1')]"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#tester = BalancedRandomForestClassifier().fit(X=X_train, y=y_train)\n",
    "#len(tester.feature_importances_)\n",
    "#X_train.columns\n",
    "#geometric_mean_score(tester.predict(X_test), y_test)  #0.775727880752169\n",
    "imps = list(zip(tester.feature_importances_, X_train.columns))\n",
    "sorted(imps, key=lambda tup: tup[0])[-15:]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>mean_fit_time</th>\n",
       "      <th>std_fit_time</th>\n",
       "      <th>mean_score_time</th>\n",
       "      <th>std_score_time</th>\n",
       "      <th>param_clf__criterion</th>\n",
       "      <th>param_clf__max_features</th>\n",
       "      <th>param_clf__n_estimators</th>\n",
       "      <th>params</th>\n",
       "      <th>split0_test_score</th>\n",
       "      <th>split1_test_score</th>\n",
       "      <th>split2_test_score</th>\n",
       "      <th>mean_test_score</th>\n",
       "      <th>std_test_score</th>\n",
       "      <th>rank_test_score</th>\n",
       "      <th>split0_train_score</th>\n",
       "      <th>split1_train_score</th>\n",
       "      <th>split2_train_score</th>\n",
       "      <th>mean_train_score</th>\n",
       "      <th>std_train_score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>29.356531</td>\n",
       "      <td>0.774929</td>\n",
       "      <td>7.338355</td>\n",
       "      <td>0.130668</td>\n",
       "      <td>gini</td>\n",
       "      <td>5</td>\n",
       "      <td>10</td>\n",
       "      <td>{'clf__criterion': 'gini', 'clf__max_features'...</td>\n",
       "      <td>0.912454</td>\n",
       "      <td>0.913203</td>\n",
       "      <td>0.911165</td>\n",
       "      <td>0.912274</td>\n",
       "      <td>0.000842</td>\n",
       "      <td>22</td>\n",
       "      <td>0.997085</td>\n",
       "      <td>0.995628</td>\n",
       "      <td>0.996769</td>\n",
       "      <td>0.996494</td>\n",
       "      <td>0.000626</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>21.269967</td>\n",
       "      <td>2.907710</td>\n",
       "      <td>8.925081</td>\n",
       "      <td>2.030989</td>\n",
       "      <td>gini</td>\n",
       "      <td>5</td>\n",
       "      <td>100</td>\n",
       "      <td>{'clf__criterion': 'gini', 'clf__max_features'...</td>\n",
       "      <td>0.918662</td>\n",
       "      <td>0.920046</td>\n",
       "      <td>0.921176</td>\n",
       "      <td>0.919961</td>\n",
       "      <td>0.001028</td>\n",
       "      <td>14</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>133.631243</td>\n",
       "      <td>11.630676</td>\n",
       "      <td>24.091638</td>\n",
       "      <td>2.337423</td>\n",
       "      <td>gini</td>\n",
       "      <td>5</td>\n",
       "      <td>1000</td>\n",
       "      <td>{'clf__criterion': 'gini', 'clf__max_features'...</td>\n",
       "      <td>0.919422</td>\n",
       "      <td>0.920426</td>\n",
       "      <td>0.919909</td>\n",
       "      <td>0.919919</td>\n",
       "      <td>0.000410</td>\n",
       "      <td>15</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>6.915396</td>\n",
       "      <td>0.285015</td>\n",
       "      <td>8.093561</td>\n",
       "      <td>0.456263</td>\n",
       "      <td>gini</td>\n",
       "      <td>10</td>\n",
       "      <td>10</td>\n",
       "      <td>{'clf__criterion': 'gini', 'clf__max_features'...</td>\n",
       "      <td>0.909033</td>\n",
       "      <td>0.911809</td>\n",
       "      <td>0.910404</td>\n",
       "      <td>0.910416</td>\n",
       "      <td>0.001133</td>\n",
       "      <td>24</td>\n",
       "      <td>0.996515</td>\n",
       "      <td>0.996642</td>\n",
       "      <td>0.996706</td>\n",
       "      <td>0.996621</td>\n",
       "      <td>0.000079</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>17.711045</td>\n",
       "      <td>0.981712</td>\n",
       "      <td>7.328075</td>\n",
       "      <td>1.507757</td>\n",
       "      <td>gini</td>\n",
       "      <td>10</td>\n",
       "      <td>100</td>\n",
       "      <td>{'clf__criterion': 'gini', 'clf__max_features'...</td>\n",
       "      <td>0.916255</td>\n",
       "      <td>0.920806</td>\n",
       "      <td>0.920289</td>\n",
       "      <td>0.919116</td>\n",
       "      <td>0.002035</td>\n",
       "      <td>16</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>151.528578</td>\n",
       "      <td>11.447976</td>\n",
       "      <td>19.518697</td>\n",
       "      <td>3.485998</td>\n",
       "      <td>gini</td>\n",
       "      <td>10</td>\n",
       "      <td>1000</td>\n",
       "      <td>{'clf__criterion': 'gini', 'clf__max_features'...</td>\n",
       "      <td>0.919802</td>\n",
       "      <td>0.919792</td>\n",
       "      <td>0.921810</td>\n",
       "      <td>0.920468</td>\n",
       "      <td>0.000949</td>\n",
       "      <td>11</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>8.778635</td>\n",
       "      <td>0.298928</td>\n",
       "      <td>7.595569</td>\n",
       "      <td>0.218479</td>\n",
       "      <td>gini</td>\n",
       "      <td>50</td>\n",
       "      <td>10</td>\n",
       "      <td>{'clf__criterion': 'gini', 'clf__max_features'...</td>\n",
       "      <td>0.916002</td>\n",
       "      <td>0.917511</td>\n",
       "      <td>0.918388</td>\n",
       "      <td>0.917300</td>\n",
       "      <td>0.000986</td>\n",
       "      <td>18</td>\n",
       "      <td>0.995248</td>\n",
       "      <td>0.995628</td>\n",
       "      <td>0.996326</td>\n",
       "      <td>0.995734</td>\n",
       "      <td>0.000446</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>36.483098</td>\n",
       "      <td>3.360073</td>\n",
       "      <td>6.941224</td>\n",
       "      <td>1.106543</td>\n",
       "      <td>gini</td>\n",
       "      <td>50</td>\n",
       "      <td>100</td>\n",
       "      <td>{'clf__criterion': 'gini', 'clf__max_features'...</td>\n",
       "      <td>0.922463</td>\n",
       "      <td>0.924354</td>\n",
       "      <td>0.925231</td>\n",
       "      <td>0.924016</td>\n",
       "      <td>0.001155</td>\n",
       "      <td>8</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>353.551459</td>\n",
       "      <td>24.645494</td>\n",
       "      <td>14.723334</td>\n",
       "      <td>2.187714</td>\n",
       "      <td>gini</td>\n",
       "      <td>50</td>\n",
       "      <td>1000</td>\n",
       "      <td>{'clf__criterion': 'gini', 'clf__max_features'...</td>\n",
       "      <td>0.922970</td>\n",
       "      <td>0.925494</td>\n",
       "      <td>0.927005</td>\n",
       "      <td>0.925156</td>\n",
       "      <td>0.001665</td>\n",
       "      <td>7</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>10.911089</td>\n",
       "      <td>0.593627</td>\n",
       "      <td>7.788339</td>\n",
       "      <td>0.047878</td>\n",
       "      <td>gini</td>\n",
       "      <td>100</td>\n",
       "      <td>10</td>\n",
       "      <td>{'clf__criterion': 'gini', 'clf__max_features'...</td>\n",
       "      <td>0.914608</td>\n",
       "      <td>0.914090</td>\n",
       "      <td>0.917754</td>\n",
       "      <td>0.915484</td>\n",
       "      <td>0.001619</td>\n",
       "      <td>19</td>\n",
       "      <td>0.995818</td>\n",
       "      <td>0.996199</td>\n",
       "      <td>0.996896</td>\n",
       "      <td>0.996304</td>\n",
       "      <td>0.000446</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>62.250116</td>\n",
       "      <td>6.208748</td>\n",
       "      <td>7.382807</td>\n",
       "      <td>1.209777</td>\n",
       "      <td>gini</td>\n",
       "      <td>100</td>\n",
       "      <td>100</td>\n",
       "      <td>{'clf__criterion': 'gini', 'clf__max_features'...</td>\n",
       "      <td>0.927024</td>\n",
       "      <td>0.929676</td>\n",
       "      <td>0.925992</td>\n",
       "      <td>0.927564</td>\n",
       "      <td>0.001552</td>\n",
       "      <td>3</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>604.099197</td>\n",
       "      <td>40.388460</td>\n",
       "      <td>15.118818</td>\n",
       "      <td>2.104008</td>\n",
       "      <td>gini</td>\n",
       "      <td>100</td>\n",
       "      <td>1000</td>\n",
       "      <td>{'clf__criterion': 'gini', 'clf__max_features'...</td>\n",
       "      <td>0.927277</td>\n",
       "      <td>0.927902</td>\n",
       "      <td>0.927893</td>\n",
       "      <td>0.927690</td>\n",
       "      <td>0.000292</td>\n",
       "      <td>2</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>6.635937</td>\n",
       "      <td>0.202809</td>\n",
       "      <td>8.041993</td>\n",
       "      <td>0.094281</td>\n",
       "      <td>entropy</td>\n",
       "      <td>5</td>\n",
       "      <td>10</td>\n",
       "      <td>{'clf__criterion': 'entropy', 'clf__max_featur...</td>\n",
       "      <td>0.911187</td>\n",
       "      <td>0.911049</td>\n",
       "      <td>0.910784</td>\n",
       "      <td>0.911007</td>\n",
       "      <td>0.000167</td>\n",
       "      <td>23</td>\n",
       "      <td>0.995311</td>\n",
       "      <td>0.995882</td>\n",
       "      <td>0.995882</td>\n",
       "      <td>0.995692</td>\n",
       "      <td>0.000269</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>18.703423</td>\n",
       "      <td>0.274799</td>\n",
       "      <td>9.826621</td>\n",
       "      <td>0.189647</td>\n",
       "      <td>entropy</td>\n",
       "      <td>5</td>\n",
       "      <td>100</td>\n",
       "      <td>{'clf__criterion': 'entropy', 'clf__max_featur...</td>\n",
       "      <td>0.920182</td>\n",
       "      <td>0.919539</td>\n",
       "      <td>0.921049</td>\n",
       "      <td>0.920257</td>\n",
       "      <td>0.000619</td>\n",
       "      <td>12</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>125.815334</td>\n",
       "      <td>10.479840</td>\n",
       "      <td>25.741467</td>\n",
       "      <td>3.183750</td>\n",
       "      <td>entropy</td>\n",
       "      <td>5</td>\n",
       "      <td>1000</td>\n",
       "      <td>{'clf__criterion': 'entropy', 'clf__max_featur...</td>\n",
       "      <td>0.919676</td>\n",
       "      <td>0.920426</td>\n",
       "      <td>0.920289</td>\n",
       "      <td>0.920130</td>\n",
       "      <td>0.000326</td>\n",
       "      <td>13</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>5.241193</td>\n",
       "      <td>0.842785</td>\n",
       "      <td>6.291520</td>\n",
       "      <td>1.195959</td>\n",
       "      <td>entropy</td>\n",
       "      <td>10</td>\n",
       "      <td>10</td>\n",
       "      <td>{'clf__criterion': 'entropy', 'clf__max_featur...</td>\n",
       "      <td>0.913088</td>\n",
       "      <td>0.909275</td>\n",
       "      <td>0.915347</td>\n",
       "      <td>0.912570</td>\n",
       "      <td>0.002505</td>\n",
       "      <td>21</td>\n",
       "      <td>0.996452</td>\n",
       "      <td>0.996642</td>\n",
       "      <td>0.996072</td>\n",
       "      <td>0.996389</td>\n",
       "      <td>0.000237</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>16.362928</td>\n",
       "      <td>1.091575</td>\n",
       "      <td>8.315560</td>\n",
       "      <td>0.948133</td>\n",
       "      <td>entropy</td>\n",
       "      <td>10</td>\n",
       "      <td>100</td>\n",
       "      <td>{'clf__criterion': 'entropy', 'clf__max_featur...</td>\n",
       "      <td>0.920182</td>\n",
       "      <td>0.921946</td>\n",
       "      <td>0.922443</td>\n",
       "      <td>0.921524</td>\n",
       "      <td>0.000970</td>\n",
       "      <td>9</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.999937</td>\n",
       "      <td>0.999979</td>\n",
       "      <td>0.000030</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>141.452599</td>\n",
       "      <td>12.096369</td>\n",
       "      <td>18.503021</td>\n",
       "      <td>1.951633</td>\n",
       "      <td>entropy</td>\n",
       "      <td>10</td>\n",
       "      <td>1000</td>\n",
       "      <td>{'clf__criterion': 'entropy', 'clf__max_featur...</td>\n",
       "      <td>0.921196</td>\n",
       "      <td>0.921820</td>\n",
       "      <td>0.920542</td>\n",
       "      <td>0.921186</td>\n",
       "      <td>0.000521</td>\n",
       "      <td>10</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>7.892606</td>\n",
       "      <td>0.185923</td>\n",
       "      <td>7.927964</td>\n",
       "      <td>0.195101</td>\n",
       "      <td>entropy</td>\n",
       "      <td>50</td>\n",
       "      <td>10</td>\n",
       "      <td>{'clf__criterion': 'entropy', 'clf__max_featur...</td>\n",
       "      <td>0.914354</td>\n",
       "      <td>0.915864</td>\n",
       "      <td>0.914713</td>\n",
       "      <td>0.914977</td>\n",
       "      <td>0.000644</td>\n",
       "      <td>20</td>\n",
       "      <td>0.996262</td>\n",
       "      <td>0.995819</td>\n",
       "      <td>0.995692</td>\n",
       "      <td>0.995924</td>\n",
       "      <td>0.000244</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>28.135110</td>\n",
       "      <td>1.850436</td>\n",
       "      <td>7.699444</td>\n",
       "      <td>1.007361</td>\n",
       "      <td>entropy</td>\n",
       "      <td>50</td>\n",
       "      <td>100</td>\n",
       "      <td>{'clf__criterion': 'entropy', 'clf__max_featur...</td>\n",
       "      <td>0.925250</td>\n",
       "      <td>0.926635</td>\n",
       "      <td>0.924978</td>\n",
       "      <td>0.925621</td>\n",
       "      <td>0.000725</td>\n",
       "      <td>6</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>273.912406</td>\n",
       "      <td>17.282531</td>\n",
       "      <td>13.551803</td>\n",
       "      <td>1.713333</td>\n",
       "      <td>entropy</td>\n",
       "      <td>50</td>\n",
       "      <td>1000</td>\n",
       "      <td>{'clf__criterion': 'entropy', 'clf__max_featur...</td>\n",
       "      <td>0.927151</td>\n",
       "      <td>0.927015</td>\n",
       "      <td>0.927386</td>\n",
       "      <td>0.927184</td>\n",
       "      <td>0.000153</td>\n",
       "      <td>5</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>9.285676</td>\n",
       "      <td>0.373293</td>\n",
       "      <td>7.967199</td>\n",
       "      <td>0.167094</td>\n",
       "      <td>entropy</td>\n",
       "      <td>100</td>\n",
       "      <td>10</td>\n",
       "      <td>{'clf__criterion': 'entropy', 'clf__max_featur...</td>\n",
       "      <td>0.916002</td>\n",
       "      <td>0.920172</td>\n",
       "      <td>0.919402</td>\n",
       "      <td>0.918525</td>\n",
       "      <td>0.001812</td>\n",
       "      <td>17</td>\n",
       "      <td>0.997466</td>\n",
       "      <td>0.996009</td>\n",
       "      <td>0.995755</td>\n",
       "      <td>0.996410</td>\n",
       "      <td>0.000754</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>44.109372</td>\n",
       "      <td>4.389925</td>\n",
       "      <td>7.425203</td>\n",
       "      <td>1.210115</td>\n",
       "      <td>entropy</td>\n",
       "      <td>100</td>\n",
       "      <td>100</td>\n",
       "      <td>{'clf__criterion': 'entropy', 'clf__max_featur...</td>\n",
       "      <td>0.926390</td>\n",
       "      <td>0.929042</td>\n",
       "      <td>0.926879</td>\n",
       "      <td>0.927437</td>\n",
       "      <td>0.001152</td>\n",
       "      <td>4</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>356.878639</td>\n",
       "      <td>99.027548</td>\n",
       "      <td>11.762577</td>\n",
       "      <td>2.313773</td>\n",
       "      <td>entropy</td>\n",
       "      <td>100</td>\n",
       "      <td>1000</td>\n",
       "      <td>{'clf__criterion': 'entropy', 'clf__max_featur...</td>\n",
       "      <td>0.928544</td>\n",
       "      <td>0.931323</td>\n",
       "      <td>0.927132</td>\n",
       "      <td>0.929000</td>\n",
       "      <td>0.001741</td>\n",
       "      <td>1</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    mean_fit_time  std_fit_time  mean_score_time  std_score_time  \\\n",
       "0       29.356531      0.774929         7.338355        0.130668   \n",
       "1       21.269967      2.907710         8.925081        2.030989   \n",
       "2      133.631243     11.630676        24.091638        2.337423   \n",
       "3        6.915396      0.285015         8.093561        0.456263   \n",
       "4       17.711045      0.981712         7.328075        1.507757   \n",
       "5      151.528578     11.447976        19.518697        3.485998   \n",
       "6        8.778635      0.298928         7.595569        0.218479   \n",
       "7       36.483098      3.360073         6.941224        1.106543   \n",
       "8      353.551459     24.645494        14.723334        2.187714   \n",
       "9       10.911089      0.593627         7.788339        0.047878   \n",
       "10      62.250116      6.208748         7.382807        1.209777   \n",
       "11     604.099197     40.388460        15.118818        2.104008   \n",
       "12       6.635937      0.202809         8.041993        0.094281   \n",
       "13      18.703423      0.274799         9.826621        0.189647   \n",
       "14     125.815334     10.479840        25.741467        3.183750   \n",
       "15       5.241193      0.842785         6.291520        1.195959   \n",
       "16      16.362928      1.091575         8.315560        0.948133   \n",
       "17     141.452599     12.096369        18.503021        1.951633   \n",
       "18       7.892606      0.185923         7.927964        0.195101   \n",
       "19      28.135110      1.850436         7.699444        1.007361   \n",
       "20     273.912406     17.282531        13.551803        1.713333   \n",
       "21       9.285676      0.373293         7.967199        0.167094   \n",
       "22      44.109372      4.389925         7.425203        1.210115   \n",
       "23     356.878639     99.027548        11.762577        2.313773   \n",
       "\n",
       "   param_clf__criterion param_clf__max_features param_clf__n_estimators  \\\n",
       "0                  gini                       5                      10   \n",
       "1                  gini                       5                     100   \n",
       "2                  gini                       5                    1000   \n",
       "3                  gini                      10                      10   \n",
       "4                  gini                      10                     100   \n",
       "5                  gini                      10                    1000   \n",
       "6                  gini                      50                      10   \n",
       "7                  gini                      50                     100   \n",
       "8                  gini                      50                    1000   \n",
       "9                  gini                     100                      10   \n",
       "10                 gini                     100                     100   \n",
       "11                 gini                     100                    1000   \n",
       "12              entropy                       5                      10   \n",
       "13              entropy                       5                     100   \n",
       "14              entropy                       5                    1000   \n",
       "15              entropy                      10                      10   \n",
       "16              entropy                      10                     100   \n",
       "17              entropy                      10                    1000   \n",
       "18              entropy                      50                      10   \n",
       "19              entropy                      50                     100   \n",
       "20              entropy                      50                    1000   \n",
       "21              entropy                     100                      10   \n",
       "22              entropy                     100                     100   \n",
       "23              entropy                     100                    1000   \n",
       "\n",
       "                                               params  split0_test_score  \\\n",
       "0   {'clf__criterion': 'gini', 'clf__max_features'...           0.912454   \n",
       "1   {'clf__criterion': 'gini', 'clf__max_features'...           0.918662   \n",
       "2   {'clf__criterion': 'gini', 'clf__max_features'...           0.919422   \n",
       "3   {'clf__criterion': 'gini', 'clf__max_features'...           0.909033   \n",
       "4   {'clf__criterion': 'gini', 'clf__max_features'...           0.916255   \n",
       "5   {'clf__criterion': 'gini', 'clf__max_features'...           0.919802   \n",
       "6   {'clf__criterion': 'gini', 'clf__max_features'...           0.916002   \n",
       "7   {'clf__criterion': 'gini', 'clf__max_features'...           0.922463   \n",
       "8   {'clf__criterion': 'gini', 'clf__max_features'...           0.922970   \n",
       "9   {'clf__criterion': 'gini', 'clf__max_features'...           0.914608   \n",
       "10  {'clf__criterion': 'gini', 'clf__max_features'...           0.927024   \n",
       "11  {'clf__criterion': 'gini', 'clf__max_features'...           0.927277   \n",
       "12  {'clf__criterion': 'entropy', 'clf__max_featur...           0.911187   \n",
       "13  {'clf__criterion': 'entropy', 'clf__max_featur...           0.920182   \n",
       "14  {'clf__criterion': 'entropy', 'clf__max_featur...           0.919676   \n",
       "15  {'clf__criterion': 'entropy', 'clf__max_featur...           0.913088   \n",
       "16  {'clf__criterion': 'entropy', 'clf__max_featur...           0.920182   \n",
       "17  {'clf__criterion': 'entropy', 'clf__max_featur...           0.921196   \n",
       "18  {'clf__criterion': 'entropy', 'clf__max_featur...           0.914354   \n",
       "19  {'clf__criterion': 'entropy', 'clf__max_featur...           0.925250   \n",
       "20  {'clf__criterion': 'entropy', 'clf__max_featur...           0.927151   \n",
       "21  {'clf__criterion': 'entropy', 'clf__max_featur...           0.916002   \n",
       "22  {'clf__criterion': 'entropy', 'clf__max_featur...           0.926390   \n",
       "23  {'clf__criterion': 'entropy', 'clf__max_featur...           0.928544   \n",
       "\n",
       "    split1_test_score  split2_test_score  mean_test_score  std_test_score  \\\n",
       "0            0.913203           0.911165         0.912274        0.000842   \n",
       "1            0.920046           0.921176         0.919961        0.001028   \n",
       "2            0.920426           0.919909         0.919919        0.000410   \n",
       "3            0.911809           0.910404         0.910416        0.001133   \n",
       "4            0.920806           0.920289         0.919116        0.002035   \n",
       "5            0.919792           0.921810         0.920468        0.000949   \n",
       "6            0.917511           0.918388         0.917300        0.000986   \n",
       "7            0.924354           0.925231         0.924016        0.001155   \n",
       "8            0.925494           0.927005         0.925156        0.001665   \n",
       "9            0.914090           0.917754         0.915484        0.001619   \n",
       "10           0.929676           0.925992         0.927564        0.001552   \n",
       "11           0.927902           0.927893         0.927690        0.000292   \n",
       "12           0.911049           0.910784         0.911007        0.000167   \n",
       "13           0.919539           0.921049         0.920257        0.000619   \n",
       "14           0.920426           0.920289         0.920130        0.000326   \n",
       "15           0.909275           0.915347         0.912570        0.002505   \n",
       "16           0.921946           0.922443         0.921524        0.000970   \n",
       "17           0.921820           0.920542         0.921186        0.000521   \n",
       "18           0.915864           0.914713         0.914977        0.000644   \n",
       "19           0.926635           0.924978         0.925621        0.000725   \n",
       "20           0.927015           0.927386         0.927184        0.000153   \n",
       "21           0.920172           0.919402         0.918525        0.001812   \n",
       "22           0.929042           0.926879         0.927437        0.001152   \n",
       "23           0.931323           0.927132         0.929000        0.001741   \n",
       "\n",
       "    rank_test_score  split0_train_score  split1_train_score  \\\n",
       "0                22            0.997085            0.995628   \n",
       "1                14            1.000000            1.000000   \n",
       "2                15            1.000000            1.000000   \n",
       "3                24            0.996515            0.996642   \n",
       "4                16            1.000000            1.000000   \n",
       "5                11            1.000000            1.000000   \n",
       "6                18            0.995248            0.995628   \n",
       "7                 8            1.000000            1.000000   \n",
       "8                 7            1.000000            1.000000   \n",
       "9                19            0.995818            0.996199   \n",
       "10                3            1.000000            1.000000   \n",
       "11                2            1.000000            1.000000   \n",
       "12               23            0.995311            0.995882   \n",
       "13               12            1.000000            1.000000   \n",
       "14               13            1.000000            1.000000   \n",
       "15               21            0.996452            0.996642   \n",
       "16                9            1.000000            1.000000   \n",
       "17               10            1.000000            1.000000   \n",
       "18               20            0.996262            0.995819   \n",
       "19                6            1.000000            1.000000   \n",
       "20                5            1.000000            1.000000   \n",
       "21               17            0.997466            0.996009   \n",
       "22                4            1.000000            1.000000   \n",
       "23                1            1.000000            1.000000   \n",
       "\n",
       "    split2_train_score  mean_train_score  std_train_score  \n",
       "0             0.996769          0.996494         0.000626  \n",
       "1             1.000000          1.000000         0.000000  \n",
       "2             1.000000          1.000000         0.000000  \n",
       "3             0.996706          0.996621         0.000079  \n",
       "4             1.000000          1.000000         0.000000  \n",
       "5             1.000000          1.000000         0.000000  \n",
       "6             0.996326          0.995734         0.000446  \n",
       "7             1.000000          1.000000         0.000000  \n",
       "8             1.000000          1.000000         0.000000  \n",
       "9             0.996896          0.996304         0.000446  \n",
       "10            1.000000          1.000000         0.000000  \n",
       "11            1.000000          1.000000         0.000000  \n",
       "12            0.995882          0.995692         0.000269  \n",
       "13            1.000000          1.000000         0.000000  \n",
       "14            1.000000          1.000000         0.000000  \n",
       "15            0.996072          0.996389         0.000237  \n",
       "16            0.999937          0.999979         0.000030  \n",
       "17            1.000000          1.000000         0.000000  \n",
       "18            0.995692          0.995924         0.000244  \n",
       "19            1.000000          1.000000         0.000000  \n",
       "20            1.000000          1.000000         0.000000  \n",
       "21            0.995755          0.996410         0.000754  \n",
       "22            1.000000          1.000000         0.000000  \n",
       "23            1.000000          1.000000         0.000000  "
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "results = pd.DataFrame({'mean_fit_time': np.array([ 29.3565313 ,  21.269967  , 133.63124331,   6.9153959 ,\n",
    "        17.71104503, 151.52857844,   8.77863534,  36.48309787,\n",
    "       353.55145939,  10.91108894,  62.25011571, 604.09919691,\n",
    "         6.63593658,  18.70342271, 125.81533424,   5.24119258,\n",
    "        16.36292839, 141.45259889,   7.89260626,  28.13510966,\n",
    "       273.91240621,   9.28567576,  44.10937214, 356.8786389 ]), 'std_fit_time': np.array([ 0.77492853,  2.90770999, 11.63067571,  0.2850153 ,  0.98171153,\n",
    "       11.44797585,  0.29892795,  3.36007335, 24.64549427,  0.59362711,\n",
    "        6.20874779, 40.38846034,  0.20280898,  0.27479866, 10.47984029,\n",
    "        0.84278515,  1.09157463, 12.09636917,  0.18592348,  1.8504363 ,\n",
    "       17.28253135,  0.37329269,  4.38992519, 99.02754836]), 'mean_score_time': np.array([ 7.33835514,  8.92508117, 24.09163777,  8.09356125,  7.32807509,\n",
    "       19.51869694,  7.59556937,  6.94122378, 14.72333399,  7.78833922,\n",
    "        7.38280678, 15.11881781,  8.04199298,  9.8266205 , 25.7414674 ,\n",
    "        6.29152044,  8.31556026, 18.50302108,  7.92796397,  7.69944366,\n",
    "       13.55180319,  7.96719853,  7.42520293, 11.7625773 ]), 'std_score_time': np.array([0.1306685 , 2.03098883, 2.33742256, 0.45626301, 1.50775737,\n",
    "       3.48599838, 0.21847926, 1.10654311, 2.18771397, 0.04787844,\n",
    "       1.2097773 , 2.10400838, 0.09428107, 0.18964651, 3.18375043,\n",
    "       1.19595878, 0.94813268, 1.95163257, 0.19510065, 1.0073612 ,\n",
    "       1.71333338, 0.16709411, 1.21011483, 2.31377346]), 'param_clf__criterion': np.ma.masked_array(data=['gini', 'gini', 'gini', 'gini', 'gini', 'gini', 'gini',\n",
    "                   'gini', 'gini', 'gini', 'gini', 'gini', 'entropy',\n",
    "                   'entropy', 'entropy', 'entropy', 'entropy', 'entropy',\n",
    "                   'entropy', 'entropy', 'entropy', 'entropy', 'entropy',\n",
    "                   'entropy'],\n",
    "             mask=[False, False, False, False, False, False, False, False,\n",
    "                   False, False, False, False, False, False, False, False,\n",
    "                   False, False, False, False, False, False, False, False],\n",
    "       fill_value='?',\n",
    "            dtype=object), 'param_clf__max_features': np.ma.masked_array(data=[5, 5, 5, 10, 10, 10, 50, 50, 50, 100, 100, 100, 5, 5,\n",
    "                   5, 10, 10, 10, 50, 50, 50, 100, 100, 100],\n",
    "             mask=[False, False, False, False, False, False, False, False,\n",
    "                   False, False, False, False, False, False, False, False,\n",
    "                   False, False, False, False, False, False, False, False],\n",
    "       fill_value='?',\n",
    "            dtype=object), 'param_clf__n_estimators': np.ma.masked_array(data=[10, 100, 1000, 10, 100, 1000, 10, 100, 1000, 10, 100,\n",
    "                   1000, 10, 100, 1000, 10, 100, 1000, 10, 100, 1000, 10,\n",
    "                   100, 1000],\n",
    "             mask=[False, False, False, False, False, False, False, False,\n",
    "                   False, False, False, False, False, False, False, False,\n",
    "                   False, False, False, False, False, False, False, False],\n",
    "       fill_value='?',\n",
    "            dtype=object), 'params': [{'clf__criterion': 'gini', 'clf__max_features': 5, 'clf__n_estimators': 10}, {'clf__criterion': 'gini', 'clf__max_features': 5, 'clf__n_estimators': 100}, {'clf__criterion': 'gini', 'clf__max_features': 5, 'clf__n_estimators': 1000}, {'clf__criterion': 'gini', 'clf__max_features': 10, 'clf__n_estimators': 10}, {'clf__criterion': 'gini', 'clf__max_features': 10, 'clf__n_estimators': 100}, {'clf__criterion': 'gini', 'clf__max_features': 10, 'clf__n_estimators': 1000}, {'clf__criterion': 'gini', 'clf__max_features': 50, 'clf__n_estimators': 10}, {'clf__criterion': 'gini', 'clf__max_features': 50, 'clf__n_estimators': 100}, {'clf__criterion': 'gini', 'clf__max_features': 50, 'clf__n_estimators': 1000}, {'clf__criterion': 'gini', 'clf__max_features': 100, 'clf__n_estimators': 10}, {'clf__criterion': 'gini', 'clf__max_features': 100, 'clf__n_estimators': 100}, {'clf__criterion': 'gini', 'clf__max_features': 100, 'clf__n_estimators': 1000}, {'clf__criterion': 'entropy', 'clf__max_features': 5, 'clf__n_estimators': 10}, {'clf__criterion': 'entropy', 'clf__max_features': 5, 'clf__n_estimators': 100}, {'clf__criterion': 'entropy', 'clf__max_features': 5, 'clf__n_estimators': 1000}, {'clf__criterion': 'entropy', 'clf__max_features': 10, 'clf__n_estimators': 10}, {'clf__criterion': 'entropy', 'clf__max_features': 10, 'clf__n_estimators': 100}, {'clf__criterion': 'entropy', 'clf__max_features': 10, 'clf__n_estimators': 1000}, {'clf__criterion': 'entropy', 'clf__max_features': 50, 'clf__n_estimators': 10}, {'clf__criterion': 'entropy', 'clf__max_features': 50, 'clf__n_estimators': 100}, {'clf__criterion': 'entropy', 'clf__max_features': 50, 'clf__n_estimators': 1000}, {'clf__criterion': 'entropy', 'clf__max_features': 100, 'clf__n_estimators': 10}, {'clf__criterion': 'entropy', 'clf__max_features': 100, 'clf__n_estimators': 100}, {'clf__criterion': 'entropy', 'clf__max_features': 100, 'clf__n_estimators': 1000}], 'split0_test_score': np.array([0.91245407, 0.91866211, 0.91942227, 0.90903332, 0.91625491,\n",
    "       0.91980236, 0.91600152, 0.92246294, 0.92296972, 0.91460788,\n",
    "       0.92702395, 0.92727733, 0.91118713, 0.92018244, 0.91967566,\n",
    "       0.91308755, 0.92018244, 0.921196  , 0.91435449, 0.92525022,\n",
    "       0.92715064, 0.91600152, 0.92639047, 0.92854428]), 'split1_test_score': np.array([0.91320324, 0.92004562, 0.92042575, 0.91180943, 0.92080588,\n",
    "       0.91979219, 0.9175114 , 0.92435378, 0.92549417, 0.91409022,\n",
    "       0.92967562, 0.92790167, 0.91104916, 0.91953877, 0.92042575,\n",
    "       0.90927522, 0.92194627, 0.92181956, 0.91586417, 0.92663457,\n",
    "       0.9270147 , 0.92017233, 0.92904207, 0.93132286]), 'split2_test_score': np.array([0.91116462, 0.92117602, 0.91990876, 0.91040426, 0.92028894,\n",
    "       0.92180966, 0.91838804, 0.92523128, 0.92700545, 0.9177544 ,\n",
    "       0.92599164, 0.92789254, 0.91078444, 0.9210493 , 0.92028894,\n",
    "       0.9153466 , 0.92244329, 0.92054239, 0.91471296, 0.92497782,\n",
    "       0.92738563, 0.91940185, 0.92687872, 0.92713218]), 'mean_test_score': np.array([0.91227403, 0.91996114, 0.91991891, 0.91041561, 0.9191164 ,\n",
    "       0.92046798, 0.91730022, 0.92401588, 0.92515628, 0.91548403,\n",
    "       0.92756378, 0.92769049, 0.91100693, 0.9202568 , 0.92013009,\n",
    "       0.91256969, 0.92152391, 0.92118601, 0.91497719, 0.92562088,\n",
    "       0.92718365, 0.91852509, 0.92743707, 0.92899983]), 'std_test_score': np.array([0.00084192, 0.00102804, 0.00040974, 0.00113341, 0.00203455,\n",
    "       0.00094862, 0.00098567, 0.00115515, 0.00166481, 0.00161909,\n",
    "       0.00155163, 0.0002922 , 0.00016709, 0.00061889, 0.00032618,\n",
    "       0.00250546, 0.00097011, 0.00052144, 0.00064403, 0.00072536,\n",
    "       0.00015322, 0.00181211, 0.00115228, 0.00174085]), 'rank_test_score': np.array([22, 14, 15, 24, 16, 11, 18,  8,  7, 19,  3,  2, 23, 12, 13, 21,  9,\n",
    "       10, 20,  6,  5, 17,  4,  1], dtype=np.int32), 'split0_train_score': np.array([0.99708547, 1.        , 1.        , 0.99651524, 1.        ,\n",
    "       1.        , 0.99524805, 1.        , 1.        , 0.99581829,\n",
    "       1.        , 1.        , 0.99531141, 1.        , 1.        ,\n",
    "       0.99645188, 1.        , 1.        , 0.9962618 , 1.        ,\n",
    "       1.        , 0.99746563, 1.        , 1.        ]), 'split1_train_score': np.array([0.99562848, 1.        , 1.        , 0.99664217, 1.        ,\n",
    "       1.        , 0.99562848, 1.        , 1.        , 0.99619868,\n",
    "       1.        , 1.        , 0.99588191, 1.        , 1.        ,\n",
    "       0.99664217, 1.        , 1.        , 0.99581855, 1.        ,\n",
    "       1.        , 0.99600862, 1.        , 1.        ]), 'split2_train_score': np.array([0.99676908, 1.        , 1.        , 0.99670573, 1.        ,\n",
    "       1.        , 0.99632563, 1.        , 1.        , 0.99689579,\n",
    "       1.        , 1.        , 0.99588217, 1.        , 1.        ,\n",
    "       0.99607222, 0.99993665, 1.        , 0.99569211, 1.        ,\n",
    "       1.        , 0.99575546, 1.        , 1.        ]), 'mean_train_score': np.array([0.99649435, 1.        , 1.        , 0.99662105, 1.        ,\n",
    "       1.        , 0.99573405, 1.        , 1.        , 0.99630425,\n",
    "       1.        , 1.        , 0.99569183, 1.        , 1.        ,\n",
    "       0.99638876, 0.99997888, 1.        , 0.99592415, 1.        ,\n",
    "       1.        , 0.9964099 , 1.        , 1.        ]), 'std_train_score': np.array([6.25733424e-04, 0.00000000e+00, 0.00000000e+00, 7.91906591e-05,\n",
    "       0.00000000e+00, 0.00000000e+00, 4.46206266e-04, 0.00000000e+00,\n",
    "       0.00000000e+00, 4.46177186e-04, 0.00000000e+00, 0.00000000e+00,\n",
    "       2.68995301e-04, 0.00000000e+00, 0.00000000e+00, 2.36922985e-04,\n",
    "       2.98640811e-05, 0.00000000e+00, 2.44267970e-04, 0.00000000e+00,\n",
    "       0.00000000e+00, 7.53630262e-04, 0.00000000e+00, 0.00000000e+00])})\n",
    "results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/chachi/miniconda3/envs/pandas-tutorial/lib/python3.7/site-packages/imblearn/pipeline.py:197: UserWarning: Persisting input arguments took 1.30s to run.\n",
      "If this happens often in your code, it can cause performance problems \n",
      "(results will be correct in all cases). \n",
      "The reason for this is probably some large input arguments for a wrapped\n",
      " function (e.g. large strings).\n",
      "THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an\n",
      " example so that they can fix the problem.\n",
      "  **fit_params_steps[name])\n",
      "/home/chachi/miniconda3/envs/pandas-tutorial/lib/python3.7/site-packages/imblearn/pipeline.py:197: UserWarning: Persisting input arguments took 1.00s to run.\n",
      "If this happens often in your code, it can cause performance problems \n",
      "(results will be correct in all cases). \n",
      "The reason for this is probably some large input arguments for a wrapped\n",
      " function (e.g. large strings).\n",
      "THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an\n",
      " example so that they can fix the problem.\n",
      "  **fit_params_steps[name])\n",
      "/home/chachi/miniconda3/envs/pandas-tutorial/lib/python3.7/site-packages/imblearn/pipeline.py:197: UserWarning: Persisting input arguments took 0.73s to run.\n",
      "If this happens often in your code, it can cause performance problems \n",
      "(results will be correct in all cases). \n",
      "The reason for this is probably some large input arguments for a wrapped\n",
      " function (e.g. large strings).\n",
      "THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an\n",
      " example so that they can fix the problem.\n",
      "  **fit_params_steps[name])\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Took: 1928.47s to fit \n"
     ]
    }
   ],
   "source": [
    "# Pull off 'NYCgov_Pov_Stat' for our target variable\n",
    "y = X['NYCgov_Pov_Stat'].replace({'NYCgov_Pov_Stat': {1: 'Pov', 2:'Not Pov'}})\n",
    "X = X.drop('NYCgov_Pov_Stat', axis='columns')\n",
    "\n",
    "# Get train and test - be sure to stratify since this is imbalanced data (poverty ~20% of the set)\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, stratify=y)\n",
    "\n",
    "# Transforms for pipeline: \n",
    "# 1) categorize to prep for one-hot encoding\n",
    "# 2) one-hot encode, dropping one to avoid colinearity\n",
    "# 3) deal with imbalanced data with sampling strategies (poverty is ~20% of total)\n",
    "# 4) scale data\n",
    "# 5) classifiers\n",
    "categorizer = Categorizer(columns=dummy_these)\n",
    "dummy_encoder = DummyEncoder(drop_first=True)\n",
    "#samplers = [SMOTE(random_state=42), SMOTETomek(random_state=42), TomekLinks(random_state=42)]\n",
    "scaler = Normalizer()\n",
    "classifier = BalancedRandomForestClassifier(n_estimators=1000, max_features=100, sampling_strategy='auto')\n",
    "\n",
    "cachedir = tempfile.mkdtemp()\n",
    "\n",
    "pipeline = imbPipeline(steps=[('cat', categorizer),\n",
    "                              ('dummies', dummy_encoder),\n",
    "                              ('scaler', scaler),\n",
    "                              ('clf', classifier)], \n",
    "                      memory=cachedir)\n",
    "                    \n",
    "t0 = time.time()\n",
    "pipeline.fit(X_train, y_train)\n",
    "time_to_fit = time.time() - t0\n",
    "print('Took: ' + '{:4.2f}'.format(time_to_fit) + 's to fit ')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[(0.0005020056104968013, 'JWTR_4'),\n",
       " (0.0006180397991121181, 'Boro_10'),\n",
       " (0.0006182323610456678, 'ENG_11'),\n",
       " (0.0006666647803905448, 'CIT_10'),\n",
       " (0.000845561954102215, 'Ethnicity_3'),\n",
       " (0.0010203369930211923, 'JWTR_3'),\n",
       " (0.0016273172555736843, 'INTP_adj_2'),\n",
       " (0.002282882484302701, 'Ethnicity_11'),\n",
       " (0.002428528916065317, 'AGEP_1'),\n",
       " (0.0039253585625141215, 'DIS_10'),\n",
       " (0.005603247830117554, 'JWTR_2'),\n",
       " (0.006984126312808381, 'INTP_adj_1'),\n",
       " (0.011814645668473192, 'Boro_1'),\n",
       " (0.016108428339244498, 'JWTR_1'),\n",
       " (0.05686880032439872, 'ENG_10')]"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#pipeline.named_steps['clf'].feature_importances_\n",
    "imps = list(zip(pipeline.named_steps['clf'].feature_importances_, X_train.columns))\n",
    "sorted(imps, key=lambda tup: tup[0])[-15:]\n",
    "#geometric_mean_score(y_test, pipeline.predict(X_test)) # 0.901335010891502"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/chachi/miniconda3/envs/pandas-tutorial/lib/python3.7/site-packages/imblearn/pipeline.py:197: UserWarning: Persisting input arguments took 1.12s to run.\n",
      "If this happens often in your code, it can cause performance problems \n",
      "(results will be correct in all cases). \n",
      "The reason for this is probably some large input arguments for a wrapped\n",
      " function (e.g. large strings).\n",
      "THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an\n",
      " example so that they can fix the problem.\n",
      "  **fit_params_steps[name])\n",
      "/home/chachi/miniconda3/envs/pandas-tutorial/lib/python3.7/site-packages/imblearn/pipeline.py:197: UserWarning: Persisting input arguments took 0.78s to run.\n",
      "If this happens often in your code, it can cause performance problems \n",
      "(results will be correct in all cases). \n",
      "The reason for this is probably some large input arguments for a wrapped\n",
      " function (e.g. large strings).\n",
      "THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an\n",
      " example so that they can fix the problem.\n",
      "  **fit_params_steps[name])\n",
      "/home/chachi/miniconda3/envs/pandas-tutorial/lib/python3.7/site-packages/imblearn/pipeline.py:197: UserWarning: Persisting input arguments took 0.69s to run.\n",
      "If this happens often in your code, it can cause performance problems \n",
      "(results will be correct in all cases). \n",
      "The reason for this is probably some large input arguments for a wrapped\n",
      " function (e.g. large strings).\n",
      "THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an\n",
      " example so that they can fix the problem.\n",
      "  **fit_params_steps[name])\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Took: 1172.32s to fit \n"
     ]
    }
   ],
   "source": [
    "# Pull off 'NYCgov_Pov_Stat' for our target variable\n",
    "y = X['NYCgov_Pov_Stat'].replace({'NYCgov_Pov_Stat': {1: 'Pov', 2:'Not Pov'}})\n",
    "X = X.drop('NYCgov_Pov_Stat', axis='columns')\n",
    "\n",
    "# Get train and test - be sure to stratify since this is imbalanced data (poverty ~20% of the set)\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, stratify=y)\n",
    "\n",
    "# Transforms for pipeline: \n",
    "# 1) categorize to prep for one-hot encoding\n",
    "# 2) one-hot encode, dropping one to avoid colinearity\n",
    "# 3) deal with imbalanced data with sampling strategies (poverty is ~20% of total)\n",
    "# 4) scale data\n",
    "# 5) classifiers\n",
    "categorizer = Categorizer(columns=dummy_these)\n",
    "dummy_encoder = DummyEncoder(drop_first=True)\n",
    "#samplers = [SMOTE(random_state=42), SMOTETomek(random_state=42), TomekLinks(random_state=42)]\n",
    "scaler = Normalizer()\n",
    "classifier = RandomForestClassifier(n_estimators=1000, max_features=100)\n",
    "\n",
    "cachedir = tempfile.mkdtemp()\n",
    "\n",
    "pipeline = imbPipeline(steps=[('cat', categorizer),\n",
    "                              ('dummies', dummy_encoder),\n",
    "                              ('scaler', scaler),\n",
    "                              ('clf', classifier)], \n",
    "                      memory=cachedir)\n",
    "                    \n",
    "t0 = time.time()\n",
    "pipeline.fit(X_train, y_train)\n",
    "time_to_fit = time.time() - t0\n",
    "print('Took: ' + '{:4.2f}'.format(time_to_fit) + 's to fit ')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],\n",
       " <a list of 15 Text xticklabel objects>)"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "imps = list(zip(X_train.columns, pipeline.named_steps['clf'].feature_importances_))\n",
    "imps=(sorted(imps, key=lambda tup: tup[1]))\n",
    "imps.reverse()\n",
    "#geometric_mean_score(y_test, pipeline.predict(X_test)) # 0.8741667300789631\n",
    "labels_i = [x[0] for x in imps][:15]\n",
    "ys_i = [x[1] for x in imps][:15]\n",
    "plt.plot(labels_i, ys_i)\n",
    "plt.xticks(rotation=60)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Feature Engineering - No Financials\n",
    "This will be as above, but pulling out the financial variables."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>AGEP_1</th>\n",
       "      <th>AGEP_10</th>\n",
       "      <th>AGEP_11</th>\n",
       "      <th>AGEP_12</th>\n",
       "      <th>AGEP_13</th>\n",
       "      <th>AGEP_14</th>\n",
       "      <th>AGEP_15</th>\n",
       "      <th>AGEP_16</th>\n",
       "      <th>AGEP_17</th>\n",
       "      <th>AGEP_18</th>\n",
       "      <th>...</th>\n",
       "      <th>WKW_19</th>\n",
       "      <th>WKW_2</th>\n",
       "      <th>WKW_20</th>\n",
       "      <th>WKW_3</th>\n",
       "      <th>WKW_4</th>\n",
       "      <th>WKW_5</th>\n",
       "      <th>WKW_6</th>\n",
       "      <th>WKW_7</th>\n",
       "      <th>WKW_8</th>\n",
       "      <th>WKW_9</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>SERIALNO</th>\n",
       "      <th>Povunit_ID</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1521345</th>\n",
       "      <th>1</th>\n",
       "      <td>32.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1521371</th>\n",
       "      <th>1</th>\n",
       "      <td>32.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1521389</th>\n",
       "      <th>1</th>\n",
       "      <td>57.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1521399</th>\n",
       "      <th>1</th>\n",
       "      <td>39.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1521415</th>\n",
       "      <th>1</th>\n",
       "      <td>36.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 246 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                     AGEP_1  AGEP_10  AGEP_11  AGEP_12  AGEP_13  AGEP_14  \\\n",
       "SERIALNO Povunit_ID                                                        \n",
       "1521345  1             32.0      0.0      0.0      0.0      0.0      0.0   \n",
       "1521371  1             32.0      0.0      0.0      0.0      0.0      0.0   \n",
       "1521389  1             57.0      0.0      0.0      0.0      0.0      0.0   \n",
       "1521399  1             39.0      0.0      0.0      0.0      0.0      0.0   \n",
       "1521415  1             36.0      0.0      0.0      0.0      0.0      0.0   \n",
       "\n",
       "                     AGEP_15  AGEP_16  AGEP_17  AGEP_18  ...    WKW_19  WKW_2  \\\n",
       "SERIALNO Povunit_ID                                      ...                    \n",
       "1521345  1               0.0      0.0      0.0      0.0  ...       0.0    0.0   \n",
       "1521371  1               0.0      0.0      0.0      0.0  ...       0.0    0.0   \n",
       "1521389  1               0.0      0.0      0.0      0.0  ...       0.0    1.0   \n",
       "1521399  1               0.0      0.0      0.0      0.0  ...       0.0    1.0   \n",
       "1521415  1               0.0      0.0      0.0      0.0  ...       0.0    3.0   \n",
       "\n",
       "                     WKW_20  WKW_3  WKW_4  WKW_5  WKW_6  WKW_7  WKW_8  WKW_9  \n",
       "SERIALNO Povunit_ID                                                           \n",
       "1521345  1              0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0  \n",
       "1521371  1              0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0  \n",
       "1521389  1              0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0  \n",
       "1521399  1              0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0  \n",
       "1521415  1              0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0  \n",
       "\n",
       "[5 rows x 246 columns]"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X2 = all_2016.copy()\n",
    "\n",
    "categoricals = ['AGEP', 'CIT', 'SCHL', 'SEX', 'ENG', 'MSP', 'WKW', 'WKHP', 'DIS', 'JWTR', 'Ethnicity', 'Boro', 'NP', 'TEN', 'HHT', 'HousingStatus', 'TotalWorkHrs_PU']\n",
    "\n",
    "# We'll create separate dataframes for personal and poverty-unit variables, then join them together\n",
    "personal_columns = ['AGEP', 'CIT', 'SCHL', 'SEX', 'ENG', 'MSP', 'WKW', 'WKHP', 'DIS', 'JWTR', 'Ethnicity', 'Boro']\n",
    "pu_columns = ['NP', 'TEN', 'HHT', 'HousingStatus', 'TotalWorkHrs_PU', 'NYCgov_Pov_Stat']\n",
    "\n",
    "# Create a dataframe for the personal columns, including our 3 indicator variables\n",
    "X2_pers = X2.copy()\n",
    "X2_pers_columns = ['SERIALNO', 'Povunit_ID', 'SPORDER'] + personal_columns\n",
    "X2_pers = X2_pers[X2_pers_columns]\n",
    "\n",
    "# Grouping by SERIALNO and Povunit_ID, put SPORDER (person # in household) at the top as multi-index columns\n",
    "X2_pers = X2_pers.set_index(['SERIALNO', 'Povunit_ID', 'SPORDER']).unstack('SPORDER').fillna(0)\n",
    "\n",
    "# Turn the multi-index columns into a single indexed column: 'AGEP_1', 'AGEP_2', 'AGEP_3', etc.\n",
    "X2_pers.columns = list(map('_'.join, [(y, str(z)) for y, z in (x for x in X2_pers.columns)]))\n",
    "\n",
    "# Create a dataframe for the poverty-unit columns, including our 3 indicator variables\n",
    "X2_pu = X2.copy()\n",
    "X2_pu_columns = ['SERIALNO', 'Povunit_ID', 'SPORDER'] + pu_columns\n",
    "X2_pu = X2_pu[X2_pu_columns]\n",
    "\n",
    "# Grouping by SERIALNO and Povunit_ID, put SPORDER (person # in household) at the top as multi-index columns\n",
    "X2_pu = X2_pu.set_index(['SERIALNO', 'Povunit_ID', 'SPORDER']).unstack('SPORDER').fillna(0)\n",
    "\n",
    "# Groupby and take the max of SPORDER (these are poverty-unit variables; if there is a nonzero value, it's unique)\n",
    "X2_pu = X2_pu.stack().groupby(['SERIALNO', 'Povunit_ID']).max()\n",
    "\n",
    "# Add the personal and poverty-unit dataframes\n",
    "X2 = X2_pers.add(X2_pu, fill_value=0)\n",
    "X2.tail()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/chachi/miniconda3/envs/pandas-tutorial/lib/python3.7/site-packages/imblearn/pipeline.py:197: UserWarning: Persisting input arguments took 1.03s to run.\n",
      "If this happens often in your code, it can cause performance problems \n",
      "(results will be correct in all cases). \n",
      "The reason for this is probably some large input arguments for a wrapped\n",
      " function (e.g. large strings).\n",
      "THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an\n",
      " example so that they can fix the problem.\n",
      "  **fit_params_steps[name])\n",
      "/home/chachi/miniconda3/envs/pandas-tutorial/lib/python3.7/site-packages/imblearn/pipeline.py:197: UserWarning: Persisting input arguments took 0.64s to run.\n",
      "If this happens often in your code, it can cause performance problems \n",
      "(results will be correct in all cases). \n",
      "The reason for this is probably some large input arguments for a wrapped\n",
      " function (e.g. large strings).\n",
      "THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an\n",
      " example so that they can fix the problem.\n",
      "  **fit_params_steps[name])\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Took: 977.44s to fit \n"
     ]
    }
   ],
   "source": [
    "# Pull off 'NYCgov_Pov_Stat' for our target variable\n",
    "y2 = X2['NYCgov_Pov_Stat'].replace({'NYCgov_Pov_Stat': {1: 'Pov', 2:'Not Pov'}})\n",
    "X2 = X2.drop('NYCgov_Pov_Stat', axis='columns')\n",
    "\n",
    "# Get train and test - be sure to stratify since this is imbalanced data (poverty ~20% of the set)\n",
    "X2_train, X2_test, y2_train, y2_test = train_test_split(X2, y2, test_size=0.2, stratify=y2)\n",
    "\n",
    "# Transforms for pipeline: \n",
    "# 1) categorize to prep for one-hot encoding\n",
    "# 2) one-hot encode, dropping one to avoid colinearity\n",
    "# 3) deal with imbalanced data with sampling strategies (poverty is ~20% of total)\n",
    "# 4) scale data\n",
    "# 5) classifiers\n",
    "categorizer = Categorizer(columns=dummy_these)\n",
    "dummy_encoder = DummyEncoder(drop_first=True)\n",
    "#samplers = [SMOTE(random_state=42), SMOTETomek(random_state=42), TomekLinks(random_state=42)]\n",
    "scaler = Normalizer()\n",
    "classifier = RandomForestClassifier(n_estimators=1000, max_features=100)\n",
    "\n",
    "cachedir = tempfile.mkdtemp()\n",
    "\n",
    "pipeline = imbPipeline(steps=[('cat', categorizer),\n",
    "                              ('dummies', dummy_encoder),\n",
    "                              ('scaler', scaler),\n",
    "                              ('clf', classifier)], \n",
    "                      memory=cachedir)\n",
    "                    \n",
    "t0 = time.time()\n",
    "pipeline.fit(X2_train, y2_train)\n",
    "time_to_fit = time.time() - t0\n",
    "print('Took: ' + '{:4.2f}'.format(time_to_fit) + 's to fit ')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[(0.0019536750561223435, 'CIT_16'),\n",
       " (0.0019766238091623893, 'CIT_8'),\n",
       " (0.002074372847437007, 'CIT_19'),\n",
       " (0.002103638190090756, 'CIT_7'),\n",
       " (0.0021084495403344244, 'CIT_12'),\n",
       " (0.002192773240239379, 'CIT_20'),\n",
       " (0.0022114526799705417, 'CIT_5'),\n",
       " (0.0022167018769647475, 'CIT_15'),\n",
       " (0.0023101070754851017, 'CIT_18'),\n",
       " (0.0023378895980513356, 'DIS_7'),\n",
       " (0.0023659286886432707, 'CIT_6'),\n",
       " (0.0024051439784516827, 'CIT_3'),\n",
       " (0.0024677871327048293, 'CIT_17'),\n",
       " (0.002469216276971846, 'CIT_14'),\n",
       " (0.002591447212012863, 'CIT_4')]"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#pipeline.named_steps['clf'].feature_importances_\n",
    "imps = list(zip(pipeline.named_steps['clf'].feature_importances_, X2_train.columns))\n",
    "sorted(imps, key=lambda tup: tup[0])[-15:]\n",
    "#geometric_mean_score(y2_test, pipeline.predict(X2_test)) # 0.5891144868773415"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "ename": "AttributeError",
     "evalue": "'DataFrame' object has no attribute 'INTP_adj'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-62-1fcd7c603bd8>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mall_2016\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mINTP_adj\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdescribe\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;31m#len(all_2016[all_2016.INTP_adj > 0])\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0mX\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mloc\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mINTP_adj\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'INTP_adj'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdescribe\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;32m~/miniconda3/envs/pandas-tutorial/lib/python3.7/site-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36m__getattr__\u001b[0;34m(self, name)\u001b[0m\n\u001b[1;32m   4374\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_info_axis\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_can_hold_identifiers_and_holds_name\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4375\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 4376\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mobject\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__getattribute__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   4377\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4378\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__setattr__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mAttributeError\u001b[0m: 'DataFrame' object has no attribute 'INTP_adj'"
     ]
    }
   ],
   "source": [
    "all_2016.INTP_adj.describe()\n",
    "#len(all_2016[all_2016.INTP_adj > 0])\n",
    "X.loc[X.INTP_adj > 0, 'INTP_adj'].describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/chachi/miniconda3/envs/pandas-tutorial/lib/python3.7/site-packages/ipykernel_launcher.py:39: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "count    24259.000000\n",
       "mean      1623.764093\n",
       "std        994.621840\n",
       "min          4.030352\n",
       "25%        967.284480\n",
       "50%       1410.623200\n",
       "75%       2115.934800\n",
       "max       6448.563200\n",
       "Name: RNTP+MRGP, dtype: float64"
      ]
     },
     "execution_count": 89,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "trials = all_2016.copy()\n",
    "\n",
    "categoricals = ['AGEP', 'CIT', 'SCHL', 'SEX', 'ENG', 'MSP', 'WKW', 'WKHP', 'DIS', 'JWTR', 'Ethnicity', 'Boro', 'NP', 'TEN', 'HHT', 'HousingStatus', 'TotalWorkHrs_PU']\n",
    "\n",
    "# We'll create separate dataframes for personal and poverty-unit variables, then join them together\n",
    "#personal_columns = ['AGEP', 'CIT', 'SCHL', 'SEX', 'ENG', 'MSP', 'WKW', 'WKHP', 'DIS', 'JWTR', 'WAGP_adj', 'INTP_adj', 'SEMP_adj', 'SSP_adj', 'SSIP_adj', 'PA_adj', 'RETP_adj', 'OI_adj', 'Ethnicity', 'Boro']\n",
    "personal_nums = ['WAGP_adj', 'INTP_adj', 'SEMP_adj', 'SSP_adj', 'SSIP_adj', 'PA_adj', 'RETP_adj', 'OI_adj'] \n",
    "#pu_columns = ['NP', 'TEN', 'HHT', 'MRGP_adj', 'RNTP_adj', 'HousingStatus', 'TotalWorkHrs_PU', 'NYCgov_Pov_Stat']\n",
    "\n",
    "# Create a dataframe for the personal columns, including our 3 indicator variables\n",
    "#X_pers = X.copy()\n",
    "#X_pers_columns = ['SERIALNO', 'Povunit_ID', 'SPORDER'] + personal_columns\n",
    "#X_pers = X_pers[X_pers_columns]\n",
    "\n",
    "# Grouping by SERIALNO and Povunit_ID, put SPORDER (person # in household) at the top as multi-index columns\n",
    "#X_pers = X_pers.set_index(['SERIALNO', 'Povunit_ID', 'SPORDER']).unstack('SPORDER').fillna(0)\n",
    "\n",
    "# Turn the multi-index columns into a single indexed column: 'AGEP_1', 'AGEP_2', 'AGEP_3', etc.\n",
    "#X_pers.columns = list(map('_'.join, [(y, str(z)) for y, z in (x for x in X_pers.columns)]))\n",
    "\n",
    "# Create a dataframe for the poverty-unit columns, including our 3 indicator variables\n",
    "X_trials = trials.copy()\n",
    "X_trials_columns = ['SERIALNO', 'Povunit_ID', 'SPORDER'] + personal_nums\n",
    "X_trials = X_trials[X_trials_columns]\n",
    "\n",
    "# Grouping by SERIALNO and Povunit_ID, put SPORDER (person # in household) at the top as multi-index columns\n",
    "X_trials = X_trials.set_index(['SERIALNO', 'Povunit_ID', 'SPORDER']).unstack('SPORDER').fillna(0)\n",
    "\n",
    "# Groupby and take the max of SPORDER (these are poverty-unit variables; if there is a nonzero value, it's unique)\n",
    "X_trials = X_trials.stack().groupby(['SERIALNO', 'Povunit_ID']).sum()\n",
    "\n",
    "# Add the personal and poverty-unit dataframes\n",
    "#X = X_pers.add(X_pu, fill_value=0)\n",
    "#X.tail()\n",
    "#X_trials[X_trials.OI_adj > 0].OI_adj.describe()\n",
    "#X_trials.MRGP_adj.describe()\n",
    "#all_2016[all_2016.Povunit_Rel == 1].RNTP_adj.describe()\n",
    "#all_2016.loc[(all_2016.Povunit_Rel == 1) & (all_2016.RNTP_adj > 0)].RNTP_adj.describe()\n",
    "all_2016['RNTP+MRGP'] = all_2016.RNTP_adj + all_2016.MRGP_adj\n",
    "all_2016.loc[(all_2016.Povunit_Rel == 1) & (all_2016['RNTP+MRGP'] > 0)]['RNTP+MRGP'].describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "        SERIALNO  SPORDER  Povunit_ID  ENG  WKW  TotalWorkHrs_PU\n",
      "710612        39        1           1  1.0  0.0                5\n",
      "710613        55        1           1  5.0  1.0                1\n",
      "710614        55        2           1  5.0  1.0                1\n",
      "710615        55        3           1  5.0  2.0                1\n",
      "710616        55        4           1  5.0  5.0                1\n",
      "710617        55        5           1  5.0  4.0                1\n",
      "710618        69        1           1  5.0  1.0                3\n",
      "710619       210        1           1  5.0  1.0                2\n",
      "710620       261        1           1  5.0  1.0                2\n",
      "710621       261        2           1  5.0  0.0                2\n",
      "        SERIALNO  SPORDER  Povunit_ID  ENG  WKW  TotalWorkHrs_PU\n",
      "710612        39        1           1    4    0                0\n",
      "710613        55        1           1    5    6                4\n",
      "710614        55        2           1    5    6                4\n",
      "710615        55        3           1    5    5                4\n",
      "710616        55        4           1    5    2                4\n",
      "710617        55        5           1    5    3                4\n",
      "710618        69        1           1    5    6                2\n",
      "710619       210        1           1    5    6                3\n",
      "710620       261        1           1    5    6                3\n",
      "710621       261        2           1    5    0                3\n"
     ]
    }
   ],
   "source": [
    "fX = all_2016.copy()\n",
    "print(fX[['SERIALNO', 'SPORDER', 'Povunit_ID', 'ENG', 'WKW', 'TotalWorkHrs_PU']].head(10))\n",
    "fix_orders = {'ENG': {0:0, 4:1, 3:2, 2:3, 1:4, 5:5}, 'WKW': {0:0, 6:1, 5:2, 4:3, 3:4, 2:5, 1:6}, \n",
    "              'TotalWorkHrs_PU': {5:0, 4:1, 3:2, 2:3, 1:4}}\n",
    "#fX[['SERIALNO', 'SPORDER', 'Povunit_ID', 'ENG', 'WKW', 'TotalWorkHrs_PU']].map(fix_orders).head(10)\n",
    "fX['ENG'] = fX['ENG'].map(fix_orders['ENG'])\n",
    "fX['WKW'] = fX['WKW'].map(fix_orders['WKW'])\n",
    "fX['TotalWorkHrs_PU'] = fX['TotalWorkHrs_PU'].map(fix_orders['TotalWorkHrs_PU'])\n",
    "print(fX[['SERIALNO', 'SPORDER', 'Povunit_ID', 'ENG', 'WKW', 'TotalWorkHrs_PU']].head(10))\n",
    "\n",
    "#Number of adults, number of kids, number of retirement-age adults, number of working-age adults, any kids, \n",
    "#any retirement-age adults\n",
    "fX['n_adults'] = fX"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "        SERIALNO  Povunit_ID  SPORDER  CIT  SCHL  SEX\n",
      "710612        39           1        1    1  18.0    1\n",
      "710613        55           1        1    1  20.0    1\n",
      "710614        55           1        2    1  16.0    2\n",
      "710615        55           1        3    1  21.0    1\n",
      "710616        55           1        4    1  16.0    1\n",
      "        SERIALNO  Povunit_ID  SPORDER  ENG  MSP  WKW\n",
      "710612        39           1        1  1.0  6.0  0.0\n",
      "710613        55           1        1  5.0  1.0  1.0\n",
      "710614        55           1        2  5.0  1.0  1.0\n",
      "710615        55           1        3  5.0  6.0  2.0\n",
      "710616        55           1        4  5.0  6.0  5.0\n",
      "        SERIALNO  Povunit_ID  SPORDER  WKHP  DIS  NP\n",
      "710612        39           1        1     0  1.0   1\n",
      "710613        55           1        1    32  2.0   5\n",
      "710614        55           1        2    40  2.0   5\n",
      "710615        55           1        3    10  2.0   5\n",
      "710616        55           1        4    40  2.0   5\n",
      "        SERIALNO  Povunit_ID  SPORDER  JWTR  Ethnicity\n",
      "710612        39           1        1   0.0          4\n",
      "710613        55           1        1   1.0          1\n",
      "710614        55           1        2   1.0          1\n",
      "710615        55           1        3   1.0          1\n",
      "710616        55           1        4   1.0          1\n"
     ]
    },
    {
     "ename": "KeyError",
     "evalue": "'SERIALNO'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mRemoteTraceback\u001b[0m                           Traceback (most recent call last)",
      "\u001b[0;31mRemoteTraceback\u001b[0m: \n\"\"\"\nTraceback (most recent call last):\n  File \"/home/ubuntu/.local/lib/python3.5/site-packages/pandas/core/indexes/base.py\", line 3078, in get_loc\n    return self._engine.get_loc(key)\n  File \"pandas/_libs/index.pyx\", line 140, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/index.pyx\", line 162, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 1492, in pandas._libs.hashtable.PyObjectHashTable.get_item\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 1500, in pandas._libs.hashtable.PyObjectHashTable.get_item\nKeyError: 'SERIALNO'\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/usr/lib/python3.5/multiprocessing/pool.py\", line 119, in worker\n    result = (True, func(*args, **kwds))\n  File \"/usr/lib/python3.5/multiprocessing/pool.py\", line 44, in mapstar\n    return list(map(*args))\n  File \"<ipython-input-15-db1489088e2f>\", line 21, in add_columns_by_group\n    add_pu_columns(df1, groups, group_names, categories[column], category_names[column], column)\n  File \"<ipython-input-15-db1489088e2f>\", line 38, in add_pu_columns\n    df = df.set_index(['SERIALNO', 'Povunit_ID', 'SPORDER']).unstack('SPORDER').fillna(0)\n  File \"/home/ubuntu/.local/lib/python3.5/site-packages/pandas/core/frame.py\", line 3909, in set_index\n    level = frame[col]._values\n  File \"/home/ubuntu/.local/lib/python3.5/site-packages/pandas/core/frame.py\", line 2686, in __getitem__\n    return self._getitem_multilevel(key)\n  File \"/home/ubuntu/.local/lib/python3.5/site-packages/pandas/core/frame.py\", line 2730, in _getitem_multilevel\n    loc = self.columns.get_loc(key)\n  File \"/home/ubuntu/.local/lib/python3.5/site-packages/pandas/core/indexes/multi.py\", line 2237, in get_loc\n    loc = self._get_level_indexer(key, level=0)\n  File \"/home/ubuntu/.local/lib/python3.5/site-packages/pandas/core/indexes/multi.py\", line 2496, in _get_level_indexer\n    loc = level_index.get_loc(key)\n  File \"/home/ubuntu/.local/lib/python3.5/site-packages/pandas/core/indexes/base.py\", line 3080, in get_loc\n    return self._engine.get_loc(self._maybe_cast_indexer(key))\n  File \"pandas/_libs/index.pyx\", line 140, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/index.pyx\", line 162, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 1492, in pandas._libs.hashtable.PyObjectHashTable.get_item\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 1500, in pandas._libs.hashtable.PyObjectHashTable.get_item\nKeyError: 'SERIALNO'\n\"\"\"",
      "\nThe above exception was the direct cause of the following exception:\n",
      "\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-15-db1489088e2f>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m    400\u001b[0m \u001b[0;31m#def engineer_features(df, columns_to_use, categories, category_names, num_processors, AGEP_yes=True):\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    401\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 402\u001b[0;31m \u001b[0mtest_new\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mengineer_features\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mall_2016\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnon_fin_columns\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcategories\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcategory_names\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnum_processors\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m4\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mAGEP_yes\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    403\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    404\u001b[0m \u001b[0mtest_new\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mto_csv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'data/testnewfunctions.csv'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m<ipython-input-15-db1489088e2f>\u001b[0m in \u001b[0;36mengineer_features\u001b[0;34m(df, columns_to_use, categories, category_names, num_processors, AGEP_yes)\u001b[0m\n\u001b[1;32m    104\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    105\u001b[0m     \u001b[0;31m# FIX THIS -- FOLLOW THE EXAMPLE BELOW TO SPLIT DFC INTO CHUNKS AND THEN MAP OVER THEM\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 106\u001b[0;31m     \u001b[0mnew_df\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mconcat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpool\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmap\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0madd_columns_by_group\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mchunks\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    107\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    108\u001b[0m     \u001b[0;31m# Close the pool\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/lib/python3.5/multiprocessing/pool.py\u001b[0m in \u001b[0;36mmap\u001b[0;34m(self, func, iterable, chunksize)\u001b[0m\n\u001b[1;32m    258\u001b[0m         \u001b[0;32min\u001b[0m \u001b[0ma\u001b[0m \u001b[0mlist\u001b[0m \u001b[0mthat\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0mreturned\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    259\u001b[0m         '''\n\u001b[0;32m--> 260\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_map_async\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfunc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0miterable\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmapstar\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mchunksize\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    261\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    262\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mstarmap\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0miterable\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mchunksize\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/lib/python3.5/multiprocessing/pool.py\u001b[0m in \u001b[0;36mget\u001b[0;34m(self, timeout)\u001b[0m\n\u001b[1;32m    606\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_value\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    607\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 608\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_value\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    609\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    610\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_set\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mi\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mobj\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mKeyError\u001b[0m: 'SERIALNO'"
     ]
    }
   ],
   "source": [
    "# DON'T USE THIS ONE FOR NOW - USE THE OTHER ONE\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "def add_columns_by_group(df):\n",
    "    \"\"\"EDIT THIS DOCSTRING!!!!!!!!!\n",
    "    Helper function \n",
    "    \"\"\"\n",
    "    \n",
    "    df1 = df.copy()\n",
    "    #print('df1 columns: ' + str(df1.columns))\n",
    "    #columns = df1.columns[0]\n",
    "    columns = df1.columns\n",
    "    #print('columns: ' + str(columns))\n",
    "    for column in columns:\n",
    "        if not column in ['SERIALNO', 'Povunit_ID', 'SPORDER']:\n",
    "            #print('df1:' + str(df1.head()))\n",
    "            #print('groups:' + str(groups))\n",
    "            #print('group names:' + str(group_names))\n",
    "            #print('categories:' + str(categories[column]))\n",
    "            #print('category names:' + str(category_names[column]))\n",
    "            #print('column:' + str(column))\n",
    "            #print(columns)\n",
    "            print(df1.head())\n",
    "            add_pu_columns(df1, groups, group_names, categories[column], category_names[column], column)\n",
    "            add_pu_columns(df1, groups, group_names, categories[column], category_names[column], 'AGEP')\n",
    "            df1.drop(column, axis='columns')\n",
    "    return df1\n",
    "\n",
    "def add_pu_columns(df, groups, group_names, categories, category_names, column):\n",
    "    \"\"\"EDIT THIS DOCSTRING!!!!!!!!!\n",
    "    Adds columns to dataframe 'df' containing calculations by poverty-unit, restricted by categories, considering groups.\n",
    "    Calculations include any(), all(), min(), max(), count(), sum(), mean(), and % in given category.\n",
    "    Input: a dataframe with multi-index consisting of 'SERIALNO', 'Povunit_ID', and 'SPORDER'; a set of masks and list of\n",
    "    names for the groups; a set of masks and a list of names for the categories; and the column of interest.\n",
    "    Output: no return value.  Inserts a series of columns into the dataframe including min, max, count, sum, any, all,\n",
    "    % of total, and mean - within households, focusing on the groups and categories of interest. \n",
    "    \"\"\"\n",
    "    for group, group_name in zip(groups, group_names):\n",
    "        for category, category_name in zip(categories, category_names):\n",
    "            # Grouping by SERIALNO and Povunit_ID, put SPORDER (person # in household) at the top as multi-index columns\n",
    "            df = df.set_index(['SERIALNO', 'Povunit_ID', 'SPORDER']).unstack('SPORDER').fillna(0)\n",
    "            stacked = df[group & category].stack().groupby(['SERIALNO', 'Povunit_ID'])[column]\n",
    "            #print('columns to be stacked ' + str(df[group & category].columns))\n",
    "            #print('length to be stacked ' + str(len(df[group & category])))\n",
    "            #print('cat:' + str(category_name) + ', group:' + str(group_name))\n",
    "            #print(df.loc[group & category].head())\n",
    "            anys = stacked.any()\n",
    "            # would love to use .all() here, but it would always be True because we filtered out everyone else\n",
    "            mins = stacked.min()\n",
    "            maxes = stacked.max()\n",
    "            counts = stacked.count()\n",
    "            sums = stacked.sum()\n",
    "            means = sums/counts\n",
    "            # The divisor below only restricts by 'groups' - so the final calculation is within a household, within\n",
    "            # the group of interest (e.g. adults), what % is in the category of interest (e.g. works 40 hrs/week)\n",
    "            divisor_for_percents = df[column][group].stack().groupby(['SERIALNO', 'Povunit_ID']).count()\n",
    "            try:\n",
    "                percents = counts.div(divisor_for_percents, axis=0)\n",
    "                alls = percents == 1\n",
    "            except: # if the calculation failed, leave percents and alls as a column of zeros\n",
    "                df_len = len(df.groupby(['SERIALNO', 'Povunit_ID']).sum())\n",
    "                percents = np.zeros(df_len)\n",
    "\n",
    "                alls = np.zeros(df_len)\n",
    "            \n",
    "            # loop through, put in the dataframe, and fill in NAs of appropriate type\n",
    "            series_and_names = zip([anys, alls, mins, maxes, counts, sums, means, percents], \n",
    "                                  ['any', 'all', 'min', 'max', 'count', 'sum', 'mean', '%'])\n",
    "            for series, series_name in series_and_names:\n",
    "                column_title = series_name + '_' + group_name + '_' + category_name\n",
    "                df[column_title] = series\n",
    "                if series_name in ['any', 'all']:\n",
    "                    df[column_title] = df[column_title].fillna(False)\n",
    "                else:\n",
    "                    df[column_title] = df[column_title].fillna(0)\n",
    "                    \n",
    "def engineer_features(df, columns_to_use, categories, category_names, num_processors, AGEP_yes=True):\n",
    "    \"\"\"EDIT THIS DOCSTRING!!!!!!!!!\n",
    "    Create features for the dataframe. This function is heavily custom and was solely created for DRY-ness.\n",
    "    Input: a poverty dataframe and whether or not to include financial features.\n",
    "    Output: returns a copy of the dataframe summarized by poverty-unit, with *only* the new features included. \n",
    "    Prints progess updates to the screen as it goes.\n",
    "    \"\"\"\n",
    "\n",
    "    time_0 = time.time()\n",
    "\n",
    "    # Create dataframe to house new features \n",
    "    dfc = df.copy() \n",
    "    dfc = dfc[['SERIALNO', 'Povunit_ID', 'SPORDER'] + columns_to_use]\n",
    "\n",
    "    # Split columns_to_use into num_processors groups for use in parallel processing\n",
    "    n = len(columns_to_use)\n",
    "    s = num_processors\n",
    "    labels = [columns_to_use[i * (n//s + 1) : (i+1) * (n//s + 1)] for i in range(s)]\n",
    "    chunks = []\n",
    "    for i in range(s):\n",
    "        chunks.append(dfc[['SERIALNO', 'Povunit_ID', 'SPORDER'] + labels[i]])\n",
    "        #print(labels[i])\n",
    "\n",
    "    # engineer features in parallel\n",
    "    pool = Pool(num_processors)\n",
    "    \n",
    "    #curried = lambda x: partial(add_columns_by_group, dfc, groups, group_names, categories, category_names, x)\n",
    "    #def add_columns_by_group(df, groups, group_names, categories, category_names, columns):\n",
    "    #curried = partial(add_columns_by_group, dfc, groups, group_names, categories, category_names, chunks)\n",
    "    \n",
    "    \n",
    "    # FIX THIS -- FOLLOW THE EXAMPLE BELOW TO SPLIT DFC INTO CHUNKS AND THEN MAP OVER THEM\n",
    "    new_df = pd.concat(pool.map(add_columns_by_group, chunks))\n",
    "    \n",
    "    # Close the pool\n",
    "    pool.close()\n",
    "    pool.join()\n",
    "#def parallel_feature_calculation(df, partitions=10, processes=4):\n",
    "    # calculate features in parallel by splitting the dataframe into partitions and using parallel processes\n",
    "    #pool = Pool(processes)\n",
    "    #df_split = np.array_split(df, partitions, axis=1)  # split dataframe into partitions column wise\n",
    "    #df = pd.concat(pool.map(feature_calculation, df_split))\n",
    "    #pool.close()\n",
    "    #pool.join()\n",
    "    #return df\n",
    "\n",
    "    # add columns with age only, no categories\n",
    "    add_pu_columns(new_df, groups, group_names, [mask_any_age], ['age'], 'AGEP')\n",
    "\n",
    "    # We added a column 'TINP' - drop it if we're not doing financials\n",
    "    if not 'WAGP_adj' in columns_to_use:\n",
    "        new_df.drop('TINP', axis='columns')\n",
    "\n",
    "    # Only return the new features that we engineered\n",
    "    # The variables features_to_mask and max_ppl were created at the beginning of this function\n",
    "    #columns_to_mask = features_to_mask * max_ppl\n",
    "    #dfc = dfc.iloc[:, columns_to_mask:].copy()\n",
    "\n",
    "    # We ended up with multi-level column headers - just keep the top level\n",
    "    new_df.columns = new_df.columns.get_level_values(0)\n",
    "    \n",
    "    time_took = time.time() - time_0\n",
    "    print('Complete. Took ' + str(time_took) + 's')\n",
    "    return(new_df)\n",
    "\n",
    "dfa = all_2016.copy()\n",
    "\n",
    "# First, some categoricals have odd ordering; remap them\n",
    "fix_orders = {'ENG': {0:0, 4:1, 3:2, 2:3, 1:4, 5:5}, 'WKW': {0:0, 6:1, 5:2, 4:3, 3:4, 2:5, 1:6}, \n",
    "              'TotalWorkHrs_PU': {5:0, 4:1, 3:2, 2:3, 1:4}}\n",
    "dfa['ENG'] = dfa['ENG'].map(fix_orders['ENG'])\n",
    "dfa['WKW'] = dfa['WKW'].map(fix_orders['WKW'])\n",
    "dfa['TotalWorkHrs_PU'] = dfa['TotalWorkHrs_PU'].map(fix_orders['TotalWorkHrs_PU'])\n",
    "\n",
    "# Add a column for total personal income - will be ignored if we don't need it\n",
    "dfa['TINP'] = dfa.WAGP_adj + dfa.INTP_adj + dfa.SEMP_adj + dfa.SSP_adj + dfa.SSIP_adj + \\\n",
    "                dfa.PA_adj + dfa.RETP_adj + dfa.OI_adj\n",
    "\n",
    "# Grouping by SERIALNO and Povunit_ID, put SPORDER (person # in household) at the top as multi-index columns\n",
    "dfa = dfa.set_index(['SERIALNO', 'Povunit_ID', 'SPORDER']).unstack('SPORDER').fillna(0)\n",
    "\n",
    "# Create empty dicts for use in adding new columns\n",
    "categories = {}\n",
    "category_names = {}\n",
    "\n",
    "# Create masks for age groups to use in creating new features\n",
    "mask_adult = (dfa.AgeCateg == 2) | (dfa.AgeCateg == 3)\n",
    "mask_65_plus = dfa.AgeCateg == 3\n",
    "mask_18_64 = dfa.AgeCateg == 2\n",
    "mask_kid = dfa.AgeCateg == 1\n",
    "mask_any_age = dfa.AgeCateg != 0\n",
    "mask_any = mask_any_age\n",
    "\n",
    "groups = [mask_adult, mask_65_plus, mask_18_64, mask_kid, mask_any_age]\n",
    "group_names = ['adult', '65+', '18-64', 'kid', 'anyage']\n",
    "\n",
    "# add masks for CIT\n",
    "mask_non_cit = dfa.CIT == 5\n",
    "mask_cit = (dfa.CIT != 5) & (dfa.CIT != 0)\n",
    "mask_naturalized = dfa.CIT == 4\n",
    "\n",
    "categories['CIT'] = [mask_non_cit, mask_cit, mask_naturalized, mask_any]\n",
    "category_names['CIT'] = ['non-cit', 'citizen', 'naturalized_cit', 'any_CIT']\n",
    "\n",
    "# add masks for SCHL\n",
    "mask_college_degree = (dfa.SCHL >= 21)\n",
    "mask_HS_diploma = (dfa.SCHL >= 17)\n",
    "mask_no_diploma = (dfa.SCHL <= 16)\n",
    "\n",
    "categories['SCHL'] = [mask_college_degree, mask_HS_diploma, mask_no_diploma, mask_HS_diploma & ~mask_college_degree, mask_any]\n",
    "category_names['SCHL'] = ['college', 'HS', 'no_diploma', 'diploma_no_bachelors', 'any_SCHL']\n",
    "\n",
    "# add masks for SEX\n",
    "mask_male = dfa.SEX == 1\n",
    "mask_female = dfa.SEX == 2\n",
    "\n",
    "categories['SEX'] = [mask_male, mask_female, mask_any]\n",
    "category_names['SEX'] = ['male', 'female', 'any_SEX']\n",
    "\n",
    "# add masks for English ability (ENG)\n",
    "# Keep in mind we switched ENG above so that 0 is NA, 1 is not at all, 2 is not very well, ..., 5 is only English\n",
    "mask_no_english = dfa.ENG == 1\n",
    "mask_eng_nvw = dfa.ENG == 2\n",
    "mask_sep_well = dfa.ENG == 3\n",
    "mask_eng_vw = dfa.ENG == 4\n",
    "mask_only_eng = dfa.ENG == 5\n",
    "\n",
    "categories['ENG'] = [mask_no_english, mask_eng_nvw, mask_sep_well, mask_eng_vw, mask_only_eng, mask_any]\n",
    "category_names['ENG'] = ['ENG_no', 'ENG_nvw', 'ENG_well', 'ENG_vw', 'ENG_only', 'ENG_any']\n",
    "\n",
    "# add masks for marital status (MSP)\n",
    "mask_married = (dfa.MSP == 1) | (dfa.MSP == 2)\n",
    "mask_widowed = dfa.MSP == 3\n",
    "mask_sep_div = (dfa.MSP == 4) | (dfa.MSP == 5)\n",
    "mask_not_married = dfa.MSP == 6\n",
    "\n",
    "categories['MSP'] = [mask_married, mask_widowed, mask_sep_div, mask_not_married, mask_any]\n",
    "category_names['MSP'] = ['married', 'widowed', 'sep/divorced', 'not_married', 'any_MSP']\n",
    "\n",
    "# add masks for weeks worked (WKW) -- this is *weeks* worked last year, not *hours per week* (that's WKHP)\n",
    "# Keep in mind we switched WKW above so that 0 is none, 1 is <14 weeks, 2 is 14-26 weeks, etc.\n",
    "mask_0_WKW = dfa.WKW == 0\n",
    "mask_u14_WKW = dfa.WKW == 1\n",
    "mask_14_26_WKW = dfa.WKW == 2\n",
    "mask_27_39_WKW = dfa.WKW == 3\n",
    "mask_40_47_WKW = dfa.WKW == 4\n",
    "mask_48_49_WKW = dfa.WKW == 5\n",
    "mask_50_52_WKW = dfa.WKW == 6\n",
    "\n",
    "categories['WKW'] = [mask_0_WKW, mask_u14_WKW, mask_14_26_WKW, mask_27_39_WKW, mask_40_47_WKW, mask_48_49_WKW, mask_50_52_WKW, \n",
    "             (mask_40_47_WKW | mask_48_49_WKW | mask_50_52_WKW), ~mask_0_WKW, mask_any]\n",
    "category_names['WKW'] = ['no_work', '<14WKW', '14-26WKW', '27-39WKW', '40-47WKW', '48-49WKW', '50-52WKW', '>40WKW', 'nonzero_WKW',\n",
    "                 'any_WKW']\n",
    "\n",
    "# add masks for usual hours worked per week last 12 months (WKHP)\n",
    "mask_0_WKHP = dfa.WKHP == 0\n",
    "mask_u10_WKHP = dfa.WKHP < 10\n",
    "mask_u15_WKHP = dfa.WKHP < 15\n",
    "mask_u20_WKHP = dfa.WKHP < 20\n",
    "mask_u30_WKHP = dfa.WKHP < 30\n",
    "mask_u40_WKHP = dfa.WKHP < 40\n",
    "mask_u50_WKHP = dfa.WKHP < 50\n",
    "mask_50_plus_WKHP = dfa.WKHP >= 50\n",
    "mask_40_plus_WKHP = dfa.WKHP >= 40\n",
    "\n",
    "categories['WKHP'] = [mask_0_WKHP, mask_u10_WKHP, mask_u15_WKHP, mask_u20_WKHP, mask_u30_WKHP, mask_u40_WKHP, \n",
    "              mask_u50_WKHP, mask_50_plus_WKHP, mask_40_plus_WKHP, mask_any]\n",
    "category_names['WKHP'] = ['no_work_hrs', '<10_work_hrs', '<15_work_hrs', '<20_work_hrs', '<30_work_hrs', '<40_work_hrs', \n",
    "                  '<50_work_hrs', '50_plus_work_hrs', '40_plus_work_hrs', 'any_WKHP']\n",
    "\n",
    "# add masks for disability status (DIS)\n",
    "mask_DIS = dfa.DIS == 1\n",
    "mask_not_DIS = dfa.DIS == 2\n",
    "\n",
    "categories['DIS'] = [mask_DIS, mask_not_DIS, mask_any]\n",
    "category_names['DIS'] = ['DIS', 'not_DIS', 'any_DIS']\n",
    "\n",
    "# add masks for number of people (NP)\n",
    "mask_1_NP = dfa.NP == 1\n",
    "mask_2_NP = dfa.NP == 2\n",
    "mask_3_NP = dfa.NP == 3\n",
    "mask_4_NP = dfa.NP == 4\n",
    "mask_5_NP = dfa.NP == 5\n",
    "mask_p5_NP = dfa.NP > 5\n",
    "mask_p6_NP = dfa.NP > 6\n",
    "mask_p8_NP = dfa.NP > 8\n",
    "mask_p10_NP = dfa.NP > 10\n",
    "mask_p12_NP = dfa.NP > 12\n",
    "\n",
    "categories['NP'] = [mask_1_NP, mask_2_NP, mask_3_NP, mask_4_NP, mask_5_NP, mask_p5_NP, mask_p6_NP, mask_p8_NP, mask_p10_NP, \n",
    "              mask_p12_NP, mask_any]\n",
    "category_names['NP'] = ['NP1', 'NP2', 'NP3', 'NP4', 'NP5', 'NP>5', 'NP>6', 'NP>8', 'NP>10', 'NP>12', 'anyNP']\n",
    "\n",
    "# add masks for means of transportation to work (JWTR)\n",
    "categories['JWTR'] = [mask_any]\n",
    "category_names['JWTR'] = ['work_trans']\n",
    "\n",
    "# add masks for wages (WAGP_adj)\n",
    "mask_0_WAG = dfa.WAGP_adj == 0\n",
    "mask_u10_WAG = dfa.WAGP_adj < 10000\n",
    "mask_u15_WAG = dfa.WAGP_adj < 15000\n",
    "mask_u20_WAG = dfa.WAGP_adj < 20000\n",
    "mask_u25_WAG = dfa.WAGP_adj < 25000\n",
    "mask_u30_WAG = dfa.WAGP_adj < 30000\n",
    "mask_u35_WAG = dfa.WAGP_adj < 35000\n",
    "mask_u40_WAG = dfa.WAGP_adj < 40000\n",
    "mask_u45_WAG = dfa.WAGP_adj < 45000\n",
    "mask_u50_WAG = dfa.WAGP_adj < 50000\n",
    "mask_u60_WAG = dfa.WAGP_adj < 60000\n",
    "mask_u70_WAG = dfa.WAGP_adj < 70000\n",
    "mask_u80_WAG = dfa.WAGP_adj < 80000\n",
    "\n",
    "categories['WAGP_adj'] = [mask_0_WAG, mask_u10_WAG, mask_u15_WAG, mask_u20_WAG, mask_u25_WAG, mask_u30_WAG,  mask_u35_WAG, \n",
    "              mask_u40_WAG, mask_u45_WAG, mask_u50_WAG, mask_u60_WAG, mask_u70_WAG, mask_u80_WAG, mask_any]\n",
    "category_names['WAGP_adj'] = ['WAG0', 'WAG<10', 'WAG<15', 'WAG<20', 'WAG<25', 'WAG<30', 'WAG<35', \n",
    "                  'WAG<40', 'WAG<45', 'WAG<50', 'WAG<60', 'WAG<70', 'WAG<80', 'WAG_any']\n",
    "\n",
    "# add masks for interest income (INTP_adj)\n",
    "# cutoffs taken from quartiles of nonzero values\n",
    "mask_0_INT = dfa.INTP_adj <= 0\n",
    "mask_INT_1q = (dfa.INTP_adj > 0) & (dfa.INTP_adj <= 400)\n",
    "mask_INT_2q = (dfa.INTP_adj > 400) & (dfa.INTP_adj <= 4000)\n",
    "mask_INT_3q = (dfa.INTP_adj > 4000) & (dfa.INTP_adj <= 15000)\n",
    "mask_INT_4q = dfa.INTP_adj > 15000\n",
    "\n",
    "categories['INTP_adj'] = [mask_0_INT, mask_INT_1q, mask_INT_2q, mask_INT_3q, mask_INT_4q, mask_any]\n",
    "category_names['INTP_adj'] = ['INT0', 'INT1q', 'INT2q', 'INT3q', 'INT4q', 'INT_any']\n",
    "\n",
    "# add masks for self-employment income (SEMP_adj)\n",
    "# cutoffs taken from quartiles of nonzero values\n",
    "mask_0_SEMP = dfa.SEMP_adj <= 0\n",
    "mask_SEMP_1q = (dfa.SEMP_adj > 0) & (dfa.SEMP_adj <= 5000)\n",
    "mask_SEMP_2q = (dfa.SEMP_adj > 5000) & (dfa.SEMP_adj <= 15000)\n",
    "mask_SEMP_3q = (dfa.SEMP_adj > 15000) & (dfa.SEMP_adj <= 35000)\n",
    "mask_SEMP_4q = dfa.SEMP_adj > 35000\n",
    "\n",
    "categories['SEMP_adj'] = [mask_0_SEMP, mask_SEMP_1q, mask_SEMP_2q, mask_SEMP_3q, mask_SEMP_4q, mask_any]\n",
    "category_names['SEMP_adj'] = ['SEMP0', 'SEMP1q', 'SEMP2q', 'SEMP3q', 'SEMP4q', 'SEMP_any']\n",
    "\n",
    "# add masks for social security income (SSP_adj)\n",
    "# cutoffs taken from quartiles of nonzero values\n",
    "# min 10, 25% 8000, 50% 12,000, 75% 18,000, max 50,000\n",
    "mask_0_SSP = dfa.SSP_adj <= 0\n",
    "mask_SSP_1q = (dfa.SSP_adj > 0) & (dfa.SSP_adj <= 8000)\n",
    "mask_SSP_2q = (dfa.SSP_adj > 8000) & (dfa.SSP_adj <= 12000)\n",
    "mask_SSP_3q = (dfa.SSP_adj > 12000) & (dfa.SSP_adj <= 18000)\n",
    "mask_SSP_4q = dfa.SSP_adj > 18000\n",
    "\n",
    "categories['SSP_adj'] = [mask_0_SSP, mask_SSP_1q, mask_SSP_2q, mask_SSP_3q, mask_SSP_4q, mask_any]\n",
    "category_names['SSP_adj'] = ['SSP0', 'SSP1q', 'SSP2q', 'SSP3q', 'SSP4q', 'SSP_any']\n",
    "\n",
    "# add masks for supplemental security income (SSIP_adj)\n",
    "# cutoffs taken from quartiles of nonzero values\n",
    "mask_0_SSIP = dfa.SSIP_adj <= 0 \n",
    "mask_SSIP_1q = (dfa.SSIP_adj > 0) & (dfa.SSIP_adj <= 5500) \n",
    "mask_SSIP_2q = (dfa.SSIP_adj > 5500) & (dfa.SSIP_adj <= 8000) \n",
    "mask_SSIP_3q = (dfa.SSIP_adj > 8000)\n",
    "\n",
    "categories['SSIP_adj'] = [mask_0_SSIP, mask_SSIP_1q, mask_SSIP_2q, mask_SSIP_3q, mask_any]\n",
    "category_names['SSIP_adj'] = ['SSIP0', 'SSIP1q', 'SSIP2q', 'SSIP3q', 'SSIP_any']\n",
    "\n",
    "# add masks for public assistance income (PA_adj)\n",
    "# cutoffs taken from quartiles of nonzero values\n",
    "mask_0_PA = dfa.PA_adj <= 0 \n",
    "mask_PA_1q = (dfa.PA_adj > 0) & (dfa.PA_adj <= 900) \n",
    "mask_PA_2q = (dfa.PA_adj > 900)\n",
    "\n",
    "categories['PA_adj'] = [mask_0_PA, mask_PA_1q, mask_PA_2q, mask_any]\n",
    "category_names['PA_adj'] = ['PA0', 'PA1q', 'PA2q', 'PA_any']\n",
    "\n",
    "# add masks for retirement income (RETP_adj)\n",
    "# cutoffs taken from quartiles of nonzero values\n",
    "mask_RETP_1q = (dfa.RETP_adj > 0) & (dfa.RETP_adj <= 6000) \n",
    "mask_RETP_2q = (dfa.RETP_adj > 6000) & (dfa.RETP_adj <= 13400) \n",
    "mask_RETP_3q = (dfa.RETP_adj > 13400)\n",
    "\n",
    "categories['RETP_adj'] = [mask_RETP_1q, mask_RETP_2q, mask_RETP_3q, mask_any]\n",
    "category_names['RETP_adj'] = ['RETP1q', 'RETP2q', 'RETP3q', 'RETP_any']\n",
    "\n",
    "# add masks for other income (OI_adj)\n",
    "# cutoffs taken from quartiles of nonzero values\n",
    "mask_OI_1q = (dfa.OI_adj > 0) & (dfa.OI_adj <= 2000) \n",
    "mask_OI_2q = (dfa.OI_adj > 2000) & (dfa.OI_adj <= 6000) \n",
    "mask_OI_3q = (dfa.OI_adj > 6000)\n",
    "\n",
    "categories['OI_adj'] = [mask_OI_1q, mask_OI_2q, mask_OI_3q, mask_any]\n",
    "category_names['OI_adj'] = ['OI1q', 'OI2q', 'OI3q', 'OI_any']\n",
    "\n",
    "# add masks for ethnicity\n",
    "mask_white = dfa.Ethnicity == 1\n",
    "mask_black = dfa.Ethnicity == 2\n",
    "mask_asian = dfa.Ethnicity == 3\n",
    "mask_hisp = dfa.Ethnicity == 4\n",
    "mask_other = dfa.Ethnicity == 5\n",
    "\n",
    "categories['Ethnicity'] = [mask_white, mask_black, mask_asian, mask_hisp, mask_other, mask_any]\n",
    "category_names['Ethnicity'] = ['White', 'Black', 'Asian', 'Hisp', 'ETH_other', 'ETH_any']\n",
    "\n",
    "# add masks for our constructed column 'TINP'\n",
    "mask_0_TINP = dfa.TINP == 0\n",
    "mask_u10_TINP = dfa.TINP < 10000\n",
    "mask_u15_TINP = dfa.TINP < 15000\n",
    "mask_u20_TINP = dfa.TINP < 20000\n",
    "mask_u25_TINP = dfa.TINP < 25000\n",
    "mask_u30_TINP = dfa.TINP < 30000\n",
    "mask_u35_TINP = dfa.TINP < 35000\n",
    "mask_u40_TINP = dfa.TINP < 40000\n",
    "mask_u45_TINP = dfa.TINP < 45000\n",
    "mask_u50_TINP = dfa.TINP < 50000\n",
    "mask_u60_TINP = dfa.TINP < 60000\n",
    "mask_u70_TINP = dfa.TINP < 70000\n",
    "mask_u80_TINP = dfa.TINP < 80000\n",
    "\n",
    "categories['TINP'] = [mask_0_TINP, mask_u10_TINP, mask_u15_TINP, mask_u20_TINP, mask_u25_TINP, mask_u30_TINP, \n",
    "                      mask_u35_TINP, mask_u40_TINP, mask_u45_TINP, mask_u50_TINP, mask_u60_TINP, mask_u70_TINP, \n",
    "                      mask_u80_TINP, mask_any]\n",
    "category_names['TINP'] = ['TINP0', 'TINP<10', 'TINP<15', 'TINP<20', 'TINP<25', 'TINP<30', 'TINP<35', \n",
    "              'TINP<40', 'TINP<45', 'TINP<50', 'TINP<60', 'TINP<70', 'TINP<80', 'TINP_any']\n",
    "\n",
    "financial_columns = ['WAGP_adj', 'INTP_adj', 'SEMP_adj', 'SSP_adj', 'SSIP_adj', 'PA_adj', 'RETP_adj', 'OI_adj']\n",
    "non_fin_columns = ['CIT', 'SCHL', 'SEX', 'ENG', 'MSP', 'WKW', 'WKHP', 'DIS', 'NP', 'JWTR', 'Ethnicity']\n",
    "\n",
    "#new_features = engineer_features(all_2016, include_financials=True)\n",
    "\n",
    "#new_features.to_csv('data/EngineeredFeatures.csv')\n",
    "\n",
    "#def engineer_features(df, columns_to_use, categories, category_names, num_processors, AGEP_yes=True):\n",
    "\n",
    "test_new = engineer_features(all_2016, non_fin_columns, categories, category_names, num_processors=4, AGEP_yes=True)\n",
    "\n",
    "test_new.to_csv('data/testnewfunctions.csv')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Feature Engineering - Coding Categorical Variables for One-Hot Encoding\n",
    "We need to do a little cleanup on the data before one-hot encoding. Some of our columns are categorical, and we need\n",
    "them to have type Categorical before one-hot encoding.  \n",
    "\n",
    "Normally we could just pass this to a pre-processor like \n",
    "dask-ml's 'Categorizer'; but remember that we split up each column like 'SCHL' into 20 columns 'SCHL_1', 'SCHL_2', etc. \n",
    "Moreover, some of these columns, like 'SCHL_20', will be pretty sparse since there are very few households with 20\n",
    "people. So we want to be sure that when we code each 'SCHL_n' column, we have ALL of the possible SCHL values encoded in\n",
    "the Categorical so that we don't get an error when we try to generalize to unseen data.\n",
    "\n",
    "Some categories are unordered (e.g. disability\n",
    "status), and we have to be aware of personal categories vs poverty-unit categories; the poverty-unit categories only show\n",
    "up in one column each, while the personal categories show up in many columns each (suffixed with '\\_1', '\\_2', etc.).\n",
    "\n",
    "Again this is one-off code poorly disguised as a function, solely for DRY purposes. 'Tighter' code would be to pull out\n",
    "the hard-coded lists and turn the loops into helper functions - falling back on YAGNI and 3-strikes rule for now (we're\n",
    "at 2 strikes)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "def code_categoricals(df, old_df):\n",
    "    \"\"\"Turn the categorical columns of df into true Categorical types in preparation for one-hot encoding, and return a \n",
    "    dictionary of columns to pass to the one-hot encoder.\n",
    "    Input: the dataframe of interest, and the 'old' dataframe with the original categories. (The dataframe at this\n",
    "    point will include columns like 'AGEP_1', 'AGEP_2', etc. which may not have all of the values, so we refer to old_df.)\n",
    "    Output: returns a 2-tuple of the dataframe with columns transformed, and a dictionary to pass to the one-hot encoder.)\n",
    "    \"\"\"\n",
    "    \n",
    "    dfc = df.copy()\n",
    "    \n",
    "    # Number of enumerated columns for each feature ('AGEP_1', 'AGEP_2', etc.)\n",
    "    # This is equal to the maximum number of people in any household, which is the max of SPORDER\n",
    "    n = old_df.SPORDER.max()\n",
    "\n",
    "    # All the categoricals that we'll have to set up\n",
    "    categoricals = ['AGEP', 'CIT', 'SCHL', 'SEX', 'ENG', 'MSP', 'WKW', 'WKHP', 'DIS', 'JWTR', 'Ethnicity', 'Boro', 'NP', 'TEN', 'HHT', 'HousingStatus', 'TotalWorkHrs_PU']\n",
    "    personal_categoricals = ['AGEP', 'CIT', 'SCHL', 'SEX', 'ENG', 'MSP', 'WKW', 'WKHP', 'DIS', 'JWTR', 'Ethnicity', 'Boro']\n",
    "    pu_categoricals = ['NP', 'TEN', 'HHT', 'HousingStatus', 'TotalWorkHrs_PU']\n",
    "\n",
    "    categories = {} # Dict for each initial categorical\n",
    "\n",
    "    # Some categoricals have no ordering\n",
    "    unordered = ['DIS', 'SEX', 'MSP', 'JWTR', 'Ethnicity', 'Boro', 'TEN', 'HHT', 'HousingStatus']\n",
    "\n",
    "    # Loop through and assign appropriate category structure for personal categoricals\n",
    "    for feature in personal_categoricals:\n",
    "        cats = old_df[feature].unique() # Get all of the category values, to use in assigning the type of Categorical\n",
    "        if not 0 in cats:\n",
    "            # Even if 0 was not in the original categorization - here it means 'no person', so we need it\n",
    "            cats = np.append(cats, 0)\n",
    "        cats.sort()\n",
    "        # Loop through and assign for each suffixed column '_1', '_2', etc.\n",
    "        for i in range(1,n+1):\n",
    "            suffixed_name = feature + '_' + str(i)\n",
    "            # Assign Categorical type to columns\n",
    "            if feature in unordered:\n",
    "                categories[suffixed_name] = pd.Categorical(cats, ordered=False)\n",
    "                dfc[suffixed_name] = pd.Categorical(dfc[suffixed_name], ordered=False, categories=cats)\n",
    "            else: # Category is ordered\n",
    "                categories[suffixed_name] = pd.Categorical(cats, ordered=True, categories=cats)\n",
    "                dfc[suffixed_name] = pd.Categorical(dfc[suffixed_name], ordered=True, categories=cats)\n",
    "\n",
    "    # Loop through and assign appropriate category structure for poverty-unit categoricals\n",
    "    for feature in pu_categoricals:\n",
    "        cats = old_df[feature].unique() # Get all of the category values, to use in assigning the type of Categorical\n",
    "        if not 0 in cats:\n",
    "            # Even if 0 was not in the original categorization - here it means 'no person', so we need it\n",
    "            cats = np.append(cats, 0)\n",
    "        cats.sort()\n",
    "        # Assign Categorical type to columns\n",
    "        if feature in unordered:\n",
    "            categories[feature] = pd.Categorical(cats, ordered=False)\n",
    "            dfc[feature] = pd.Categorical(dfc[feature], ordered=False, categories=cats)\n",
    "        else: # Category is ordered\n",
    "            categories[feature] = pd.Categorical(cats, ordered=True, categories=cats)\n",
    "            dfc[feature] = pd.Categorical(dfc[feature], ordered=True, categories=cats)\n",
    "\n",
    "    # Create a dictionary 'dummy_these' that we'll pass to our dummy-maker later\n",
    "    # The poverty-unit categoricals can be passed as-is. For the personal categoricals, we'll have features \n",
    "    # like 'AGEP_1', 'AGEP_2', ..., 'AGEP_20' - so we have to loop through and assign categories.\n",
    "    dummy_these = {}\n",
    "\n",
    "    for i in range(1,n+1):\n",
    "        for feature in personal_categoricals:\n",
    "            name = feature + '_' + str(i)\n",
    "            dummy_these[name] = categories[name]\n",
    "\n",
    "    for feature in pu_categoricals:\n",
    "        dummy_these[feature] = categories[name]\n",
    "    \n",
    "    return(dfc, dummy_these)\n",
    "\n",
    "#X_and_y, dummy_these = code_categoricals(X_and_y, all_2016)\n",
    "#X_and_y.to_csv('data/FeaturesCoded.csv')\n",
    "\n",
    "\n",
    "    \n",
    "#for col in cols:\n",
    "#    if rama[col].dtype == 'bool':\n",
    "#        cats = rama[col].unique()\n",
    "#        cats.sort()\n",
    "#        rama[col] = pd.Categorical(rama[col], ordered=True, categories=cats)\n",
    "#    if rama[col].dtype == 'int64':\n",
    "#        cats = rama[col].unique()\n",
    "#        cats.sort()\n",
    "#        rama[col] = pd.Categorical(rama[col], ordered=True, categories=cats)\n",
    "\n",
    "#rama.info()\n",
    "\n",
    "#for col in cols:\n",
    "    #if rama[col].dtype == 'category':\n",
    "        # ind = cols.get_loc(col)\n",
    "        # categorical_features += ind\n",
    "        # categorical_names[ind] = cats # (cats from above)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Full data set with grid search and RandomForestClassifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5621\n",
      "Fitting 3 folds for each of 3 candidates, totalling 9 fits\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=-1)]: Using backend LokyBackend with 4 concurrent workers.\n",
      "[Parallel(n_jobs=-1)]: Done   4 out of   9 | elapsed:  3.6min remaining:  4.5min\n",
      "[Parallel(n_jobs=-1)]: Done   6 out of   9 | elapsed:  5.3min remaining:  2.6min\n",
      "[Parallel(n_jobs=-1)]: Done   9 out of   9 | elapsed: 11.8min finished\n",
      "/home/ubuntu/.local/lib/python3.5/site-packages/imblearn/pipeline.py:197: UserWarning: Persisting input arguments took 3.34s to run.\n",
      "If this happens often in your code, it can cause performance problems \n",
      "(results will be correct in all cases). \n",
      "The reason for this is probably some large input arguments for a wrapped\n",
      " function (e.g. large strings).\n",
      "THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an\n",
      " example so that they can fix the problem.\n",
      "  **fit_params_steps[name])\n",
      "/home/ubuntu/.local/lib/python3.5/site-packages/imblearn/pipeline.py:197: UserWarning: Persisting input arguments took 3.51s to run.\n",
      "If this happens often in your code, it can cause performance problems \n",
      "(results will be correct in all cases). \n",
      "The reason for this is probably some large input arguments for a wrapped\n",
      " function (e.g. large strings).\n",
      "THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an\n",
      " example so that they can fix the problem.\n",
      "  **fit_params_steps[name])\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Took: 1020.30s to fit \n",
      "Pipeline(memory='/mnt/ssd/tmp/tmp5ozdrgyr',\n",
      "     steps=[('dummies', DummyEncoder(columns=None, drop_first=True)), ('scaler', Normalizer(copy=True, norm='l2')), ('clf', RandomForestClassifier(bootstrap=True, class_weight=None, criterion='gini',\n",
      "            max_depth=None, max_features='auto', max_leaf_nodes=None,\n",
      "            min_impurity_decrease=0...mators=1000, n_jobs=-1,\n",
      "            oob_score=False, random_state=42, verbose=0, warm_start=False))])\n",
      "0.9234668018246326\n",
      "{'clf__n_estimators': 1000}\n",
      "{'std_score_time': array([ 1.16240683,  3.84877212, 10.16093959]), 'mean_test_score': array([0.91518838, 0.92253759, 0.9234668 ]), 'split2_test_score': array([0.91572678, 0.91990876, 0.92206311]), 'std_train_score': array([7.87808717e-05, 0.00000000e+00, 0.00000000e+00]), 'params': [{'clf__n_estimators': 10}, {'clf__n_estimators': 100}, {'clf__n_estimators': 1000}], 'split0_train_score': array([0.99543813, 1.        , 1.        ]), 'std_test_score': array([0.00040945, 0.00190335, 0.0014685 ]), 'mean_fit_time': array([ 97.98711038,  94.02541296, 446.90180969]), 'mean_score_time': array([15.49286358, 16.71451068, 24.16282201]), 'split1_test_score': array([0.9151039 , 0.92435378, 0.92549417]), 'split0_test_score': array([0.91473457, 0.9233498 , 0.92284303]), 'mean_train_score': array([0.99535395, 1.        , 1.        ]), 'split2_train_score': array([0.99524865, 1.        , 1.        ]), 'split1_train_score': array([0.99537506, 1.        , 1.        ]), 'std_fit_time': array([ 8.68384898, 55.33325929,  9.10461366]), 'rank_test_score': array([3, 2, 1], dtype=int32), 'param_clf__n_estimators': masked_array(data=[10, 100, 1000],\n",
      "             mask=[False, False, False],\n",
      "       fill_value='?',\n",
      "            dtype=object)}\n",
      "Fitting 3 folds for each of 3 candidates, totalling 9 fits\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=-1)]: Using backend LokyBackend with 4 concurrent workers.\n",
      "[Parallel(n_jobs=-1)]: Done   4 out of   9 | elapsed:  2.3min remaining:  2.9min\n",
      "[Parallel(n_jobs=-1)]: Done   6 out of   9 | elapsed:  3.1min remaining:  1.5min\n"
     ]
    },
    {
     "ename": "TerminatedWorkerError",
     "evalue": "A worker process managed by the executor was unexpectedly terminated. This could be caused by a segmentation fault while calling the function or by an excessive memory usage causing the Operating System to kill the worker. The exit codes of the workers are {SIGKILL(-9)}",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mTerminatedWorkerError\u001b[0m                     Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-7-1207838ff1be>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     39\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     40\u001b[0m     \u001b[0mt0\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtime\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtime\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 41\u001b[0;31m     \u001b[0mgrid\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_train\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     42\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     43\u001b[0m     \u001b[0mtime_to_fit\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtime\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtime\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0mt0\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/.local/lib/python3.5/site-packages/sklearn/model_selection/_search.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, X, y, groups, **fit_params)\u001b[0m\n\u001b[1;32m    720\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mresults_container\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    721\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 722\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_run_search\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mevaluate_candidates\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    723\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    724\u001b[0m         \u001b[0mresults\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mresults_container\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/.local/lib/python3.5/site-packages/sklearn/model_selection/_search.py\u001b[0m in \u001b[0;36m_run_search\u001b[0;34m(self, evaluate_candidates)\u001b[0m\n\u001b[1;32m   1189\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_run_search\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mevaluate_candidates\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1190\u001b[0m         \u001b[0;34m\"\"\"Search all candidates in param_grid\"\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1191\u001b[0;31m         \u001b[0mevaluate_candidates\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mParameterGrid\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mparam_grid\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1192\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1193\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/.local/lib/python3.5/site-packages/sklearn/model_selection/_search.py\u001b[0m in \u001b[0;36mevaluate_candidates\u001b[0;34m(candidate_params)\u001b[0m\n\u001b[1;32m    709\u001b[0m                                \u001b[0;32mfor\u001b[0m \u001b[0mparameters\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mtrain\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtest\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    710\u001b[0m                                in product(candidate_params,\n\u001b[0;32m--> 711\u001b[0;31m                                           cv.split(X, y, groups)))\n\u001b[0m\u001b[1;32m    712\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    713\u001b[0m                 \u001b[0mall_candidate_params\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mextend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcandidate_params\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/.local/lib/python3.5/site-packages/sklearn/externals/joblib/parallel.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, iterable)\u001b[0m\n\u001b[1;32m    928\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    929\u001b[0m             \u001b[0;32mwith\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_backend\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mretrieval_context\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 930\u001b[0;31m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mretrieve\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    931\u001b[0m             \u001b[0;31m# Make sure that we get a last message telling us we are done\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    932\u001b[0m             \u001b[0melapsed_time\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtime\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtime\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_start_time\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/lib/python3.5/contextlib.py\u001b[0m in \u001b[0;36m__exit__\u001b[0;34m(self, type, value, traceback)\u001b[0m\n\u001b[1;32m     75\u001b[0m                 \u001b[0mvalue\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     76\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 77\u001b[0;31m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgen\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mthrow\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtraceback\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     78\u001b[0m                 \u001b[0;32mraise\u001b[0m \u001b[0mRuntimeError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"generator didn't stop after throw()\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     79\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mStopIteration\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mexc\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/.local/lib/python3.5/site-packages/sklearn/externals/joblib/_parallel_backends.py\u001b[0m in \u001b[0;36mretrieval_context\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    146\u001b[0m         \u001b[0mtasks\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    147\u001b[0m         \"\"\"\n\u001b[0;32m--> 148\u001b[0;31m         \u001b[0;32myield\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    149\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    150\u001b[0m     \u001b[0;34m@\u001b[0m\u001b[0mclassmethod\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/.local/lib/python3.5/site-packages/sklearn/externals/joblib/parallel.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, iterable)\u001b[0m\n\u001b[1;32m    928\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    929\u001b[0m             \u001b[0;32mwith\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_backend\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mretrieval_context\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 930\u001b[0;31m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mretrieve\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    931\u001b[0m             \u001b[0;31m# Make sure that we get a last message telling us we are done\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    932\u001b[0m             \u001b[0melapsed_time\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtime\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtime\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_start_time\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/.local/lib/python3.5/site-packages/sklearn/externals/joblib/parallel.py\u001b[0m in \u001b[0;36mretrieve\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    831\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    832\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0mgetattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_backend\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'supports_timeout'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 833\u001b[0;31m                     \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_output\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mextend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mjob\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    834\u001b[0m                 \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    835\u001b[0m                     \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_output\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mextend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mjob\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/.local/lib/python3.5/site-packages/sklearn/externals/joblib/_parallel_backends.py\u001b[0m in \u001b[0;36mwrap_future_result\u001b[0;34m(future, timeout)\u001b[0m\n\u001b[1;32m    519\u001b[0m         AsyncResults.get from multiprocessing.\"\"\"\n\u001b[1;32m    520\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 521\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mfuture\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mresult\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    522\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mLokyTimeoutError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    523\u001b[0m             \u001b[0;32mraise\u001b[0m \u001b[0mTimeoutError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/lib/python3.5/concurrent/futures/_base.py\u001b[0m in \u001b[0;36mresult\u001b[0;34m(self, timeout)\u001b[0m\n\u001b[1;32m    403\u001b[0m                 \u001b[0;32mraise\u001b[0m \u001b[0mCancelledError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    404\u001b[0m             \u001b[0;32melif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_state\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0mFINISHED\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 405\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__get_result\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    406\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    407\u001b[0m                 \u001b[0;32mraise\u001b[0m \u001b[0mTimeoutError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/lib/python3.5/concurrent/futures/_base.py\u001b[0m in \u001b[0;36m__get_result\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    355\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__get_result\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    356\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_exception\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 357\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_exception\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    358\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    359\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_result\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mTerminatedWorkerError\u001b[0m: A worker process managed by the executor was unexpectedly terminated. This could be caused by a segmentation fault while calling the function or by an excessive memory usage causing the Operating System to kill the worker. The exit codes of the workers are {SIGKILL(-9)}"
     ]
    }
   ],
   "source": [
    "print(len(X_and_y.columns))\n",
    "# Take a small subset of the data to run POC\n",
    "#X_small = X.iloc[:50, :].copy()\n",
    "X_and_y = X_and_y.copy()\n",
    "\n",
    "# Pull off 'NYCgov_Pov_Stat' for our target variable\n",
    "y = X_and_y['NYCgov_Pov_Stat']\n",
    "y.replace({1: 'Pov', 2:'Not Pov'}, inplace=True)\n",
    "X = X_and_y.drop('NYCgov_Pov_Stat', axis='columns')\n",
    "\n",
    "# Get train and test - be sure to stratify since this is imbalanced data (poverty ~20% of the set)\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, stratify=y, random_state=42)\n",
    "\n",
    "categorizer = Categorizer(columns=dummy_these)\n",
    "dummy_encoder = DummyEncoder(drop_first=True)\n",
    "#samplers = [SMOTE(random_state=42), SMOTETomek(random_state=42), TomekLinks(random_state=42)]\n",
    "scaler = Normalizer()\n",
    "clf =                  RandomForestClassifier(n_jobs=-1, max_features='auto', random_state=42)\n",
    "balanced_clf = BalancedRandomForestClassifier(n_jobs=-1, max_features='auto', random_state=42)\n",
    "\n",
    "cachedir = tempfile.mkdtemp(dir='/mnt/ssd/tmp')\n",
    "\n",
    "# Create empty dictionaries to hold results\n",
    "results_plain = {}\n",
    "results_balanced = {}\n",
    "\n",
    "for classifier, results_dict in zip([clf, balanced_clf], [results_plain, results_balanced]):\n",
    "\n",
    "    pipeline = imbPipeline(steps=[#('cat', categorizer), # No need for Categorizer since we already did it\n",
    "                                  ('dummies', dummy_encoder), \n",
    "                                  #('sampler', sampler), \n",
    "                                  ('scaler', scaler), \n",
    "                                  ('clf', classifier)], \n",
    "                           memory=cachedir)\n",
    "    \n",
    "    params = {'clf__n_estimators': [10, 100, 1000]}\n",
    "    \n",
    "    grid = GridSearchCV(pipeline, params, n_jobs=-1, cv=3, verbose=9)\n",
    "\n",
    "    t0 = time.time()\n",
    "    grid.fit(X_train, y_train)\n",
    "\n",
    "    time_to_fit = time.time() - t0\n",
    "    print('Took: ' + '{:4.2f}'.format(time_to_fit) + 's to fit ')\n",
    "    \n",
    "    print(grid.best_estimator_)\n",
    "    print(grid.best_score_)\n",
    "    print(grid.best_params_)\n",
    "    print(grid.cv_results_)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Full data set with n_estimators = 1000 and RandomForestClassifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5621\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/ubuntu/.local/lib/python3.5/site-packages/imblearn/pipeline.py:197: UserWarning: Persisting input arguments took 2.94s to run.\n",
      "If this happens often in your code, it can cause performance problems \n",
      "(results will be correct in all cases). \n",
      "The reason for this is probably some large input arguments for a wrapped\n",
      " function (e.g. large strings).\n",
      "THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an\n",
      " example so that they can fix the problem.\n",
      "  **fit_params_steps[name])\n",
      "/home/ubuntu/.local/lib/python3.5/site-packages/imblearn/pipeline.py:197: UserWarning: Persisting input arguments took 3.15s to run.\n",
      "If this happens often in your code, it can cause performance problems \n",
      "(results will be correct in all cases). \n",
      "The reason for this is probably some large input arguments for a wrapped\n",
      " function (e.g. large strings).\n",
      "THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an\n",
      " example so that they can fix the problem.\n",
      "  **fit_params_steps[name])\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Took: 477.30s to fit \n",
      "\n",
      "Balanced accuracy: 0.8802950749897955\n",
      "Geometric mean: 0.8772013286319785\n",
      "Confusion matrix:\n",
      "[[4483  216]\n",
      " [ 236  984]]\n",
      "\n",
      "Classification report:\n",
      "                   pre       rec       spe        f1       geo       iba       sup\n",
      "\n",
      "    Not Pov       0.95      0.95      0.81      0.95      0.88      0.78      4699\n",
      "        Pov       0.82      0.81      0.95      0.81      0.88      0.76      1220\n",
      "\n",
      "avg / total       0.92      0.92      0.84      0.92      0.88      0.78      5919\n",
      "\n"
     ]
    },
    {
     "ename": "AttributeError",
     "evalue": "'Pipeline' object has no attribute 'named_features'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-15-af3514c8bac3>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     37\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Confusion matrix:\\n'\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mconfusion_matrix\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_test\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpredictions\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     38\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'\\nClassification report:\\n'\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mclassification_report_imbalanced\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_test\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpredictions\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 39\u001b[0;31m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'\\nOOB score: '\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpipeline\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnamed_features\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'clf'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0moob_score_\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     40\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'\\nn_estimators: '\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpipeline\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnamed_features\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'clf'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mn_estimators\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mAttributeError\u001b[0m: 'Pipeline' object has no attribute 'named_features'"
     ]
    }
   ],
   "source": [
    "print(len(X_and_y.columns))\n",
    "X_and_y = X_and_y.copy()\n",
    "\n",
    "# Pull off 'NYCgov_Pov_Stat' for our target variable\n",
    "y = X_and_y['NYCgov_Pov_Stat']\n",
    "y.replace({1: 'Pov', 2:'Not Pov'}, inplace=True)\n",
    "X = X_and_y.drop('NYCgov_Pov_Stat', axis='columns')\n",
    "\n",
    "# Get train and test - be sure to stratify since this is imbalanced data (poverty ~20% of the set)\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, stratify=y, random_state=42)\n",
    "\n",
    "categorizer = Categorizer(columns=dummy_these)\n",
    "dummy_encoder = DummyEncoder(drop_first=True)\n",
    "#samplers = [SMOTE(random_state=42), SMOTETomek(random_state=42), TomekLinks(random_state=42)]\n",
    "scaler = Normalizer()\n",
    "classifier = RandomForestClassifier(n_estimators=1000, n_jobs=-1, max_features='auto', random_state=42, oob_score=True)\n",
    "\n",
    "cachedir = tempfile.mkdtemp(dir='/mnt/ssd/tmp')\n",
    "\n",
    "# Create empty dictionaries to hold results\n",
    "\n",
    "pipeline = imbPipeline(steps=[('dummies', dummy_encoder), \n",
    "                              ('scaler', scaler), \n",
    "                              ('clf', classifier)], \n",
    "                       memory=cachedir)\n",
    "\n",
    "t0 = time.time()\n",
    "pipeline.fit(X_train, y_train)\n",
    "\n",
    "time_to_fit = time.time() - t0\n",
    "print('Took: ' + '{:4.2f}'.format(time_to_fit) + 's to fit ')\n",
    "\n",
    "predictions = pipeline.predict(X_test)\n",
    "\n",
    "print('\\nBalanced accuracy: ' + str(balanced_accuracy_score(y_test, predictions)))\n",
    "print('Geometric mean: ' + str(geometric_mean_score(y_test, predictions)))\n",
    "print('Confusion matrix:\\n' + str(confusion_matrix(y_test, predictions)))\n",
    "print('\\nClassification report:\\n' + str(classification_report_imbalanced(y_test, predictions)))\n",
    "print('\\nOOB score: ' + str(pipeline.named_steps['clf'].oob_score_))\n",
    "print('n_estimators: ' + str(pipeline.named_steps['clf'].n_estimators))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "OOB score: 0.9254096975840513\n",
      "\n",
      "n_estimators: 1000\n"
     ]
    }
   ],
   "source": [
    "print('\\nOOB score: ' + str(pipeline.named_steps['clf'].oob_score_))\n",
    "print('n_estimators: ' + str(pipeline.named_steps['clf'].n_estimators))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[(0.00670862784332334, 'any_adult_TINP<20'),\n",
       " (0.0066194372159959405, '%_adult_TINP<20'),\n",
       " (0.006479640639032289, '%_anyage_WAG<45'),\n",
       " (0.006334087270109876, '%_anyage_any_WKHP'),\n",
       " (0.0062931342915874214, '%_anyage_TINP<15'),\n",
       " (0.005944444651839958, 'all_anyage_WAG_any'),\n",
       " (0.005501383040418589, 'all_anyage_WAG<60'),\n",
       " (0.005464648575639451, '%_anyage_WAG<20'),\n",
       " (0.005377005353263044, 'any_anyage_WAG<50'),\n",
       " (0.005214485567674988, 'any_anyage_any_WKHP'),\n",
       " (0.0051429150100985345, 'all_anyage_TINP<20'),\n",
       " (0.00510779175422798, '%_anyage_WAG<70'),\n",
       " (0.005029627256854295, 'any_anyage_TINP<25'),\n",
       " (0.005021266220117347, 'all_anyage_age'),\n",
       " (0.004970895146790292, 'any_anyage_SSP_any')]"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tester = list(zip(pipeline.named_steps['clf'].feature_importances_, pipeline.named_steps['dummies'].transformed_columns_))\n",
    "sorted(tester, key=lambda tup: tup[0], reverse=True)[:15]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Mini data set with n_estimators = 10 and RandomForestClassifier - prep for LIME"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 144,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5618\n",
      "Took: 7.72s to fit \n",
      "\n",
      "Balanced accuracy: 1.0\n",
      "Geometric mean: 1.0\n",
      "Confusion matrix:\n",
      "[[7 0]\n",
      " [0 3]]\n",
      "\n",
      "Classification report:\n",
      "                   pre       rec       spe        f1       geo       iba       sup\n",
      "\n",
      "          0       1.00      1.00      1.00      1.00      1.00      1.00         7\n",
      "          1       1.00      1.00      1.00      1.00      1.00      1.00         3\n",
      "\n",
      "avg / total       1.00      1.00      1.00      1.00      1.00      1.00        10\n",
      "\n",
      "\n",
      "OOB score: 0.8\n",
      "n_estimators: 10\n"
     ]
    }
   ],
   "source": [
    "print(len(X_and_y.columns))\n",
    "X_and_y_small = X_and_y.iloc[:50,:].copy()\n",
    "\n",
    "# Pull off 'NYCgov_Pov_Stat' for our target variable\n",
    "y = X_and_y_small['NYCgov_Pov_Stat']\n",
    "y.replace({'Not Pov': 0, 'Pov': 1}, inplace=True)\n",
    "X = X_and_y_small.drop('NYCgov_Pov_Stat', axis='columns')\n",
    "\n",
    "# Get train and test - be sure to stratify since this is imbalanced data (poverty ~20% of the set)\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, stratify=y, random_state=42)\n",
    "\n",
    "categorizer = Categorizer(columns=dummy_these)\n",
    "dummy_encoder = DummyEncoder(drop_first=True)\n",
    "#samplers = [SMOTE(random_state=42), SMOTETomek(random_state=42), TomekLinks(random_state=42)]\n",
    "scaler = Normalizer()\n",
    "classifier = RandomForestClassifier(n_estimators=10, n_jobs=-1, max_features='auto', random_state=42, oob_score=True)\n",
    "\n",
    "cachedir = tempfile.mkdtemp(dir='/mnt/ssd/tmp')\n",
    "\n",
    "# Create empty dictionaries to hold results\n",
    "\n",
    "pipeline = imbPipeline(steps=[('dummies', dummy_encoder), \n",
    "                              ('scaler', scaler), \n",
    "                              ('clf', classifier)], \n",
    "                       memory=cachedir)\n",
    "\n",
    "t0 = time.time()\n",
    "pipeline.fit(X_train, y_train)\n",
    "\n",
    "time_to_fit = time.time() - t0\n",
    "print('Took: ' + '{:4.2f}'.format(time_to_fit) + 's to fit ')\n",
    "\n",
    "predictions = pipeline.predict(X_test)\n",
    "\n",
    "print('\\nBalanced accuracy: ' + str(balanced_accuracy_score(y_test, predictions)))\n",
    "print('Geometric mean: ' + str(geometric_mean_score(y_test, predictions)))\n",
    "print('Confusion matrix:\\n' + str(confusion_matrix(y_test, predictions)))\n",
    "print('\\nClassification report:\\n' + str(classification_report_imbalanced(y_test, predictions)))\n",
    "print('\\nOOB score: ' + str(pipeline.named_steps['clf'].oob_score_))\n",
    "print('n_estimators: ' + str(pipeline.named_steps['clf'].n_estimators))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 147,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/ubuntu/.local/lib/python3.5/site-packages/sklearn/utils/validation.py:595: DataConversionWarning: Data with input dtype object was converted to float64 by StandardScaler.\n",
      "  warnings.warn(msg, DataConversionWarning)\n"
     ]
    },
    {
     "ename": "AttributeError",
     "evalue": "'numpy.ndarray' object has no attribute 'columns'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-147-3eefa342b2db>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     10\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrandom\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mseed\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m42\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     11\u001b[0m \u001b[0mi\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m7\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 12\u001b[0;31m \u001b[0mexp\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mexplainer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexplain_instance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_test\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpredict_fn\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnum_features\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m5\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     13\u001b[0m \u001b[0mexp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshow_in_notebook\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mshow_all\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     14\u001b[0m \u001b[0mtime_took\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtime\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtime\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0mtime_0\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/.local/lib/python3.5/site-packages/lime/lime_tabular.py\u001b[0m in \u001b[0;36mexplain_instance\u001b[0;34m(self, data_row, predict_fn, labels, top_labels, num_features, num_samples, distance_metric, model_regressor)\u001b[0m\n\u001b[1;32m    272\u001b[0m         ).ravel()\n\u001b[1;32m    273\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 274\u001b[0;31m         \u001b[0myss\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpredict_fn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minverse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    275\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    276\u001b[0m         \u001b[0;31m# for classification, the model needs to provide a list of tuples - classes\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m<ipython-input-147-3eefa342b2db>\u001b[0m in \u001b[0;36m<lambda>\u001b[0;34m(x)\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mtime_0\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtime\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtime\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;31m# Specify the prediction function for use with LIME\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0mpredict_fn\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mlambda\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mpipeline\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnamed_steps\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'clf'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict_proba\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpipeline\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mexplainer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlime\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlime_tabular\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mLimeTabularExplainer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_train\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfeature_names\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mX_train\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;31m#,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/.local/lib/python3.5/site-packages/sklearn/utils/metaestimators.py\u001b[0m in \u001b[0;36m<lambda>\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    116\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    117\u001b[0m         \u001b[0;31m# lambda, but not partial, allows help() to work with update_wrapper\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 118\u001b[0;31m         \u001b[0mout\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mlambda\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    119\u001b[0m         \u001b[0;31m# update the docstring of the returned function\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    120\u001b[0m         \u001b[0mupdate_wrapper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mout\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfn\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/.local/lib/python3.5/site-packages/imblearn/pipeline.py\u001b[0m in \u001b[0;36mpredict\u001b[0;34m(self, X, **predict_params)\u001b[0m\n\u001b[1;32m    347\u001b[0m                 \u001b[0;32mpass\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    348\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 349\u001b[0;31m                 \u001b[0mXt\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtransform\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtransform\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mXt\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    350\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msteps\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mXt\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mpredict_params\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    351\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/.local/lib/python3.5/site-packages/dask_ml/preprocessing/data.py\u001b[0m in \u001b[0;36mtransform\u001b[0;34m(self, X, y)\u001b[0m\n\u001b[1;32m    619\u001b[0m             \u001b[0mSame\u001b[0m \u001b[0mtype\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mthe\u001b[0m \u001b[0minput\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    620\u001b[0m         \"\"\"\n\u001b[0;32m--> 621\u001b[0;31m         \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mequals\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns_\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    622\u001b[0m             raise ValueError(\n\u001b[1;32m    623\u001b[0m                 \u001b[0;34m\"Columns of 'X' do not match the training \"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mAttributeError\u001b[0m: 'numpy.ndarray' object has no attribute 'columns'"
     ]
    }
   ],
   "source": [
    "time_0 = time.time()\n",
    "# Specify the prediction function for use with LIME\n",
    "predict_fn = lambda x: pipeline.named_steps['clf'].predict_proba(pipeline.predict(x))\n",
    "\n",
    "explainer = lime.lime_tabular.LimeTabularExplainer(X_train.values, feature_names = X_train.columns)#,\n",
    "                                                   #class_names=['Pov', 'Not Pov']),\n",
    "                                                   #categorical_features=categorical_features, \n",
    "                                                   #categorical_names=categorical_names)\n",
    "\n",
    "np.random.seed(42)\n",
    "i = 7\n",
    "exp = explainer.explain_instance(X_test.values[i], predict_fn, num_features=5)\n",
    "exp.show_in_notebook(show_all=False)\n",
    "time_took = time.time() - time_0\n",
    "print('Took ' + str(time_took) + ' s')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Full data set with n_estimators = 5000 and RandomForestClassifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5621\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/ubuntu/.local/lib/python3.5/site-packages/imblearn/pipeline.py:197: UserWarning: Persisting input arguments took 2.88s to run.\n",
      "If this happens often in your code, it can cause performance problems \n",
      "(results will be correct in all cases). \n",
      "The reason for this is probably some large input arguments for a wrapped\n",
      " function (e.g. large strings).\n",
      "THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an\n",
      " example so that they can fix the problem.\n",
      "  **fit_params_steps[name])\n",
      "/home/ubuntu/.local/lib/python3.5/site-packages/imblearn/pipeline.py:197: UserWarning: Persisting input arguments took 2.85s to run.\n",
      "If this happens often in your code, it can cause performance problems \n",
      "(results will be correct in all cases). \n",
      "The reason for this is probably some large input arguments for a wrapped\n",
      " function (e.g. large strings).\n",
      "THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an\n",
      " example so that they can fix the problem.\n",
      "  **fit_params_steps[name])\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Took: 1370.52s to fit \n",
      "\n",
      "Balanced accuracy: 0.8801138365679478\n",
      "Geometric mean: 0.8768956359864453\n",
      "Confusion matrix:\n",
      "[[4489  210]\n",
      " [ 238  982]]\n",
      "\n",
      "Classification report:\n",
      "                   pre       rec       spe        f1       geo       iba       sup\n",
      "\n",
      "    Not Pov       0.95      0.96      0.80      0.95      0.88      0.78      4699\n",
      "        Pov       0.82      0.80      0.96      0.81      0.88      0.76      1220\n",
      "\n",
      "avg / total       0.92      0.92      0.84      0.92      0.88      0.78      5919\n",
      "\n",
      "\n",
      "OOB score: 0.9264656191924312\n",
      "n_estimators: 5000\n"
     ]
    }
   ],
   "source": [
    "print(len(X_and_y.columns))\n",
    "X_and_y = X_and_y.copy()\n",
    "\n",
    "# Pull off 'NYCgov_Pov_Stat' for our target variable\n",
    "y = X_and_y['NYCgov_Pov_Stat']\n",
    "y.replace({1: 'Pov', 2:'Not Pov'}, inplace=True)\n",
    "X = X_and_y.drop('NYCgov_Pov_Stat', axis='columns')\n",
    "\n",
    "# Get train and test - be sure to stratify since this is imbalanced data (poverty ~20% of the set)\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, stratify=y, random_state=42)\n",
    "\n",
    "dummy_encoder = DummyEncoder(drop_first=True)\n",
    "scaler = Normalizer()\n",
    "classifier = RandomForestClassifier(n_estimators=5000, n_jobs=-1, max_features='auto', random_state=42, oob_score=True)\n",
    "\n",
    "cachedir = tempfile.mkdtemp(dir='/mnt/ssd/tmp')\n",
    "\n",
    "pipeline = imbPipeline(steps=[('dummies', dummy_encoder), \n",
    "                              ('scaler', scaler), \n",
    "                              ('clf', classifier)], \n",
    "                       memory=cachedir)\n",
    "\n",
    "t0 = time.time()\n",
    "pipeline.fit(X_train, y_train)\n",
    "\n",
    "time_to_fit = time.time() - t0\n",
    "print('Took: ' + '{:4.2f}'.format(time_to_fit) + 's to fit ')\n",
    "\n",
    "predictions = pipeline.predict(X_test)\n",
    "\n",
    "print('\\nBalanced accuracy: ' + str(balanced_accuracy_score(y_test, predictions)))\n",
    "print('Geometric mean: ' + str(geometric_mean_score(y_test, predictions)))\n",
    "print('Confusion matrix:\\n' + str(confusion_matrix(y_test, predictions)))\n",
    "print('\\nClassification report:\\n' + str(classification_report_imbalanced(y_test, predictions)))\n",
    "print('\\nOOB score: ' + str(pipeline.named_steps['clf'].oob_score_))\n",
    "print('n_estimators: ' + str(pipeline.named_steps['clf'].n_estimators))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Full data set with n_estimators = 1000 and RandomForestClassifier using StandardScaler"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5621\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/ubuntu/.local/lib/python3.5/site-packages/imblearn/pipeline.py:197: UserWarning: Persisting input arguments took 2.88s to run.\n",
      "If this happens often in your code, it can cause performance problems \n",
      "(results will be correct in all cases). \n",
      "The reason for this is probably some large input arguments for a wrapped\n",
      " function (e.g. large strings).\n",
      "THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an\n",
      " example so that they can fix the problem.\n",
      "  **fit_params_steps[name])\n",
      "/home/ubuntu/.local/lib/python3.5/site-packages/sklearn/preprocessing/data.py:625: DataConversionWarning: Data with input dtype bool, int64, float64 were all converted to float64 by StandardScaler.\n",
      "  return self.partial_fit(X, y)\n",
      "/home/ubuntu/.local/lib/python3.5/site-packages/sklearn/base.py:465: DataConversionWarning: Data with input dtype bool, int64, float64 were all converted to float64 by StandardScaler.\n",
      "  return self.fit(X, y, **fit_params).transform(X)\n",
      "/home/ubuntu/.local/lib/python3.5/site-packages/imblearn/pipeline.py:197: UserWarning: Persisting input arguments took 2.85s to run.\n",
      "If this happens often in your code, it can cause performance problems \n",
      "(results will be correct in all cases). \n",
      "The reason for this is probably some large input arguments for a wrapped\n",
      " function (e.g. large strings).\n",
      "THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an\n",
      " example so that they can fix the problem.\n",
      "  **fit_params_steps[name])\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Took: 242.49s to fit \n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/ubuntu/.local/lib/python3.5/site-packages/imblearn/pipeline.py:349: DataConversionWarning: Data with input dtype bool, int64, float64 were all converted to float64 by StandardScaler.\n",
      "  Xt = transform.transform(Xt)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Balanced accuracy: 0.8617460464207591\n",
      "Geometric mean: 0.8568130733410114\n",
      "Confusion matrix:\n",
      "[[4482  217]\n",
      " [ 281  939]]\n",
      "\n",
      "Classification report:\n",
      "                   pre       rec       spe        f1       geo       iba       sup\n",
      "\n",
      "    Not Pov       0.94      0.95      0.77      0.95      0.86      0.75      4699\n",
      "        Pov       0.81      0.77      0.95      0.79      0.86      0.72      1220\n",
      "\n",
      "avg / total       0.91      0.92      0.81      0.92      0.86      0.74      5919\n",
      "\n",
      "\n",
      "OOB score: 0.9227487751309342\n",
      "n_estimators: 1000\n"
     ]
    }
   ],
   "source": [
    "X_and_y = pd.read_csv('data/FeaturesCoded.csv', index_col=[0,1], header=0)\n",
    "print(len(X_and_y.columns))\n",
    "X_and_y = X_and_y.copy()\n",
    "\n",
    "# Pull off 'NYCgov_Pov_Stat' for our target variable\n",
    "y = X_and_y['NYCgov_Pov_Stat']\n",
    "y.replace({1: 'Pov', 2:'Not Pov'}, inplace=True)\n",
    "X = X_and_y.drop('NYCgov_Pov_Stat', axis='columns')\n",
    "\n",
    "# Get train and test - be sure to stratify since this is imbalanced data (poverty ~20% of the set)\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, stratify=y, random_state=42)\n",
    "\n",
    "dummy_encoder = DummyEncoder(drop_first=True)\n",
    "scaler = StandardScaler()\n",
    "classifier = RandomForestClassifier(n_estimators=1000, n_jobs=-1, max_features='auto', random_state=42, oob_score=True)\n",
    "\n",
    "cachedir = tempfile.mkdtemp(dir='/mnt/ssd/tmp')\n",
    "\n",
    "# Create empty dictionaries to hold results\n",
    "\n",
    "pipeline = imbPipeline(steps=[('dummies', dummy_encoder), \n",
    "                              ('scaler', scaler), \n",
    "                              ('clf', classifier)], \n",
    "                       memory=cachedir)\n",
    "\n",
    "t0 = time.time()\n",
    "pipeline.fit(X_train, y_train)\n",
    "\n",
    "time_to_fit = time.time() - t0\n",
    "print('Took: ' + '{:4.2f}'.format(time_to_fit) + 's to fit ')\n",
    "\n",
    "predictions = pipeline.predict(X_test)\n",
    "\n",
    "print('\\nBalanced accuracy: ' + str(balanced_accuracy_score(y_test, predictions)))\n",
    "print('Geometric mean: ' + str(geometric_mean_score(y_test, predictions)))\n",
    "print('Confusion matrix:\\n' + str(confusion_matrix(y_test, predictions)))\n",
    "print('\\nClassification report:\\n' + str(classification_report_imbalanced(y_test, predictions)))\n",
    "print('\\nOOB score: ' + str(pipeline.named_steps['clf'].oob_score_))\n",
    "print('n_estimators: ' + str(pipeline.named_steps['clf'].n_estimators))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Full data set with grid search and BalancedRandomForestClassifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5621\n",
      "Fitting 3 folds for each of 3 candidates, totalling 9 fits\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=3)]: Using backend LokyBackend with 3 concurrent workers.\n",
      "[Parallel(n_jobs=3)]: Done   2 tasks      | elapsed:  2.0min\n",
      "[Parallel(n_jobs=3)]: Done   6 out of   9 | elapsed:  5.0min remaining:  2.5min\n",
      "[Parallel(n_jobs=3)]: Done   9 out of   9 | elapsed: 26.9min finished\n",
      "/home/ubuntu/.local/lib/python3.5/site-packages/imblearn/pipeline.py:197: UserWarning: Persisting input arguments took 3.35s to run.\n",
      "If this happens often in your code, it can cause performance problems \n",
      "(results will be correct in all cases). \n",
      "The reason for this is probably some large input arguments for a wrapped\n",
      " function (e.g. large strings).\n",
      "THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an\n",
      " example so that they can fix the problem.\n",
      "  **fit_params_steps[name])\n",
      "/home/ubuntu/.local/lib/python3.5/site-packages/imblearn/pipeline.py:197: UserWarning: Persisting input arguments took 3.50s to run.\n",
      "If this happens often in your code, it can cause performance problems \n",
      "(results will be correct in all cases). \n",
      "The reason for this is probably some large input arguments for a wrapped\n",
      " function (e.g. large strings).\n",
      "THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an\n",
      " example so that they can fix the problem.\n",
      "  **fit_params_steps[name])\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Took: 2310.83s to fit \n",
      "Pipeline(memory='/mnt/ssd/tmp/tmpogjb52hr',\n",
      "     steps=[('dummies', DummyEncoder(columns=None, drop_first=True)), ('scaler', Normalizer(copy=True, norm='l2')), ('clf', BalancedRandomForestClassifier(bootstrap=True, class_weight=None,\n",
      "                criterion='gini', max_depth=None, max_features='auto',\n",
      "                max_leaf_nodes=None, min_imp...tate=42, replacement=False,\n",
      "                sampling_strategy='auto', verbose=0, warm_start=False))])\n",
      "0.8971109984794728\n",
      "{'clf__n_estimators': 1000}\n",
      "{'std_score_time': array([ 0.43724339,  6.47117318, 10.0884839 ]), 'mean_test_score': array([0.89453455, 0.89706876, 0.897111  ]), 'split2_test_score': array([0.89798505, 0.89925231, 0.89887213]), 'std_train_score': array([0.00174429, 0.00211428, 0.00166577]), 'params': [{'clf__n_estimators': 10}, {'clf__n_estimators': 100}, {'clf__n_estimators': 1000}], 'split0_train_score': array([0.92023063, 0.92130774, 0.92225813]), 'std_test_score': array([0.00300425, 0.00211323, 0.00223569]), 'mean_fit_time': array([  79.07977804,  111.69476787, 1272.5219895 ]), 'mean_score_time': array([15.21685592, 21.84757996, 24.02181101]), 'split1_test_score': array([0.89495692, 0.89774455, 0.89850482]), 'split0_test_score': array([0.89066261, 0.89421006, 0.89395667]), 'mean_train_score': array([0.9226431 , 0.92405801, 0.92382573]), 'split2_train_score': array([0.92429522, 0.92644916, 0.9261324 ]), 'split1_train_score': array([0.92340345, 0.92441713, 0.92308667]), 'std_fit_time': array([ 9.8503707 ,  5.03462801, 16.42877733]), 'rank_test_score': array([3, 2, 1], dtype=int32), 'param_clf__n_estimators': masked_array(data=[10, 100, 1000],\n",
      "             mask=[False, False, False],\n",
      "       fill_value='?',\n",
      "            dtype=object)}\n"
     ]
    }
   ],
   "source": [
    "print(len(X_and_y.columns))\n",
    "# Take a small subset of the data to run POC\n",
    "#X_small = X.iloc[:50, :].copy()\n",
    "X_and_y = X_and_y.copy()\n",
    "\n",
    "# Pull off 'NYCgov_Pov_Stat' for our target variable\n",
    "y = X_and_y['NYCgov_Pov_Stat']\n",
    "y.replace({1: 'Pov', 2:'Not Pov'}, inplace=True)\n",
    "X = X_and_y.drop('NYCgov_Pov_Stat', axis='columns')\n",
    "\n",
    "# Get train and test - be sure to stratify since this is imbalanced data (poverty ~20% of the set)\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, stratify=y, random_state=42)\n",
    "\n",
    "categorizer = Categorizer(columns=dummy_these)\n",
    "dummy_encoder = DummyEncoder(drop_first=True)\n",
    "#samplers = [SMOTE(random_state=42), SMOTETomek(random_state=42), TomekLinks(random_state=42)]\n",
    "scaler = Normalizer()\n",
    "balanced_clf = BalancedRandomForestClassifier(n_jobs=-1, max_features='auto', random_state=42)\n",
    "\n",
    "cachedir = tempfile.mkdtemp(dir='/mnt/ssd/tmp')\n",
    "\n",
    "pipeline = imbPipeline(steps=[#('cat', categorizer), # No need for Categorizer since we already did it\n",
    "                              ('dummies', dummy_encoder), \n",
    "                              #('sampler', sampler), \n",
    "                              ('scaler', scaler), \n",
    "                              ('clf', balanced_clf)], \n",
    "                       memory=cachedir)\n",
    "\n",
    "params = {'clf__n_estimators': [10, 100, 1000]}\n",
    "\n",
    "#grid = GridSearchCV(pipeline, params, n_jobs=-1, cv=3, verbose=9)\n",
    "grid = GridSearchCV(pipeline, params, n_jobs=3, cv=3, verbose=9)\n",
    "\n",
    "t0 = time.time()\n",
    "grid.fit(X_train, y_train)\n",
    "\n",
    "time_to_fit = time.time() - t0\n",
    "print('Took: ' + '{:4.2f}'.format(time_to_fit) + 's to fit ')\n",
    "\n",
    "print(grid.best_estimator_)\n",
    "print(grid.best_score_)\n",
    "print(grid.best_params_)\n",
    "print(grid.cv_results_)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Full data set with n_estimators = 1000 and BalancedRandomForestClassifier using StandardScaler"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5621\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/ubuntu/.local/lib/python3.5/site-packages/imblearn/pipeline.py:197: UserWarning: Persisting input arguments took 2.88s to run.\n",
      "If this happens often in your code, it can cause performance problems \n",
      "(results will be correct in all cases). \n",
      "The reason for this is probably some large input arguments for a wrapped\n",
      " function (e.g. large strings).\n",
      "THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an\n",
      " example so that they can fix the problem.\n",
      "  **fit_params_steps[name])\n",
      "/home/ubuntu/.local/lib/python3.5/site-packages/sklearn/preprocessing/data.py:625: DataConversionWarning: Data with input dtype bool, int64, float64 were all converted to float64 by StandardScaler.\n",
      "  return self.partial_fit(X, y)\n",
      "/home/ubuntu/.local/lib/python3.5/site-packages/sklearn/base.py:465: DataConversionWarning: Data with input dtype bool, int64, float64 were all converted to float64 by StandardScaler.\n",
      "  return self.fit(X, y, **fit_params).transform(X)\n",
      "/home/ubuntu/.local/lib/python3.5/site-packages/imblearn/pipeline.py:197: UserWarning: Persisting input arguments took 2.85s to run.\n",
      "If this happens often in your code, it can cause performance problems \n",
      "(results will be correct in all cases). \n",
      "The reason for this is probably some large input arguments for a wrapped\n",
      " function (e.g. large strings).\n",
      "THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an\n",
      " example so that they can fix the problem.\n",
      "  **fit_params_steps[name])\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Took: 328.13s to fit \n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/ubuntu/.local/lib/python3.5/site-packages/imblearn/pipeline.py:349: DataConversionWarning: Data with input dtype bool, int64, float64 were all converted to float64 by StandardScaler.\n",
      "  Xt = transform.transform(Xt)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Balanced accuracy: 0.9080515910256455\n",
      "Geometric mean: 0.9076684804536956\n",
      "Confusion matrix:\n",
      "[[4143  556]\n",
      " [  80 1140]]\n",
      "\n",
      "Classification report:\n",
      "                   pre       rec       spe        f1       geo       iba       sup\n",
      "\n",
      "    Not Pov       0.98      0.88      0.93      0.93      0.91      0.82      4699\n",
      "        Pov       0.67      0.93      0.88      0.78      0.91      0.83      1220\n",
      "\n",
      "avg / total       0.92      0.89      0.92      0.90      0.91      0.82      5919\n",
      "\n",
      "\n",
      "OOB score: 0.9238046967393141\n",
      "n_estimators: 1000\n"
     ]
    }
   ],
   "source": [
    "print(len(X_and_y.columns))\n",
    "X_and_y = X_and_y.copy()\n",
    "\n",
    "# Pull off 'NYCgov_Pov_Stat' for our target variable\n",
    "y = X_and_y['NYCgov_Pov_Stat']\n",
    "y.replace({1: 'Pov', 2:'Not Pov'}, inplace=True)\n",
    "X = X_and_y.drop('NYCgov_Pov_Stat', axis='columns')\n",
    "\n",
    "# Get train and test - be sure to stratify since this is imbalanced data (poverty ~20% of the set)\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, stratify=y, random_state=42)\n",
    "\n",
    "categorizer = Categorizer(columns=dummy_these)\n",
    "dummy_encoder = DummyEncoder(drop_first=True)\n",
    "scaler = StandardScaler()\n",
    "classifier = BalancedRandomForestClassifier(n_estimators=1000, n_jobs=-1, max_features='auto', oob_score=True,\n",
    "                                            random_state=42)\n",
    "\n",
    "cachedir = tempfile.mkdtemp(dir='/mnt/ssd/tmp')\n",
    "\n",
    "pipeline = imbPipeline(steps=[('dummies', dummy_encoder), \n",
    "                              ('scaler', scaler), \n",
    "                              ('clf', classifier)], \n",
    "                       memory=cachedir)\n",
    "\n",
    "t0 = time.time()\n",
    "pipeline.fit(X_train, y_train)\n",
    "\n",
    "time_to_fit = time.time() - t0\n",
    "print('Took: ' + '{:4.2f}'.format(time_to_fit) + 's to fit ')\n",
    "\n",
    "predictions = pipeline.predict(X_test)\n",
    "\n",
    "print('\\nBalanced accuracy: ' + str(balanced_accuracy_score(y_test, predictions)))\n",
    "print('Geometric mean: ' + str(geometric_mean_score(y_test, predictions)))\n",
    "print('Confusion matrix:\\n' + str(confusion_matrix(y_test, predictions)))\n",
    "print('\\nClassification report:\\n' + str(classification_report_imbalanced(y_test, predictions)))\n",
    "print('\\nOOB score: ' + str(pipeline.named_steps['clf'].oob_score_))\n",
    "print('n_estimators: ' + str(pipeline.named_steps['clf'].n_estimators))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Full data set with n_estimators = 1000 and BalancedRandomForestClassifier with sampling_strategy changes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5621\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/ubuntu/.local/lib/python3.5/site-packages/imblearn/pipeline.py:197: UserWarning: Persisting input arguments took 2.90s to run.\n",
      "If this happens often in your code, it can cause performance problems \n",
      "(results will be correct in all cases). \n",
      "The reason for this is probably some large input arguments for a wrapped\n",
      " function (e.g. large strings).\n",
      "THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an\n",
      " example so that they can fix the problem.\n",
      "  **fit_params_steps[name])\n",
      "/home/ubuntu/.local/lib/python3.5/site-packages/imblearn/pipeline.py:197: UserWarning: Persisting input arguments took 3.12s to run.\n",
      "If this happens often in your code, it can cause performance problems \n",
      "(results will be correct in all cases). \n",
      "The reason for this is probably some large input arguments for a wrapped\n",
      " function (e.g. large strings).\n",
      "THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an\n",
      " example so that they can fix the problem.\n",
      "  **fit_params_steps[name])\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Took: 337.53s to fit \n",
      "\n",
      "Balanced accuracy: 0.9113460659575284\n",
      "Geometric mean: 0.9108903240199582\n",
      "Confusion matrix:\n",
      "[[4147  552]\n",
      " [  73 1147]]\n",
      "\n",
      "Classification report:\n",
      "                   pre       rec       spe        f1       geo       iba       sup\n",
      "\n",
      "    Not Pov       0.98      0.88      0.94      0.93      0.91      0.82      4699\n",
      "        Pov       0.68      0.94      0.88      0.79      0.91      0.83      1220\n",
      "\n",
      "avg / total       0.92      0.89      0.93      0.90      0.91      0.83      5919\n",
      "\n",
      "n_estimators: 1000\n"
     ]
    }
   ],
   "source": [
    "print(len(X_and_y.columns))\n",
    "X_and_y = X_and_y.copy()\n",
    "\n",
    "# Pull off 'NYCgov_Pov_Stat' for our target variable\n",
    "y = X_and_y['NYCgov_Pov_Stat']\n",
    "y.replace({1: 'Pov', 2:'Not Pov'}, inplace=True)\n",
    "X = X_and_y.drop('NYCgov_Pov_Stat', axis='columns')\n",
    "\n",
    "# Get train and test - be sure to stratify since this is imbalanced data (poverty ~20% of the set)\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, stratify=y, random_state=42)\n",
    "\n",
    "categorizer = Categorizer(columns=dummy_these)\n",
    "dummy_encoder = DummyEncoder(drop_first=True)\n",
    "#samplers = [SMOTE(random_state=42), SMOTETomek(random_state=42), TomekLinks(random_state=42)]\n",
    "scaler = Normalizer()\n",
    "classifier = BalancedRandomForestClassifier(n_estimators=1000, sampling_strategy=1.0, replacement=True, n_jobs=-1, \n",
    "                                            max_features='auto', random_state=42)\n",
    "\n",
    "cachedir = tempfile.mkdtemp(dir='/mnt/ssd/tmp')\n",
    "\n",
    "pipeline = imbPipeline(steps=[('dummies', dummy_encoder), \n",
    "                              ('scaler', scaler), \n",
    "                              ('clf', classifier)], \n",
    "                       memory=cachedir)\n",
    "\n",
    "t0 = time.time()\n",
    "pipeline.fit(X_train, y_train)\n",
    "\n",
    "time_to_fit = time.time() - t0\n",
    "print('Took: ' + '{:4.2f}'.format(time_to_fit) + 's to fit ')\n",
    "\n",
    "predictions = pipeline.predict(X_test)\n",
    "\n",
    "print('\\nBalanced accuracy: ' + str(balanced_accuracy_score(y_test, predictions)))\n",
    "print('Geometric mean: ' + str(geometric_mean_score(y_test, predictions)))\n",
    "print('Confusion matrix:\\n' + str(confusion_matrix(y_test, predictions)))\n",
    "print('\\nClassification report:\\n' + str(classification_report_imbalanced(y_test, predictions)))\n",
    "#print('\\nOOB score: ' + str(pipeline.named_steps['clf'].oob_score_))\n",
    "print('n_estimators: ' + str(pipeline.named_steps['clf'].n_estimators))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5621\n",
      "SERIALNO  Povunit_ID\n",
      "1521345   1             2\n",
      "1521371   1             1\n",
      "1521389   1             2\n",
      "1521399   1             1\n",
      "1521415   1             2\n",
      "Name: NYCgov_Pov_Stat, dtype: int64\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/ubuntu/.local/lib/python3.5/site-packages/imblearn/pipeline.py:197: UserWarning: Persisting input arguments took 2.84s to run.\n",
      "If this happens often in your code, it can cause performance problems \n",
      "(results will be correct in all cases). \n",
      "The reason for this is probably some large input arguments for a wrapped\n",
      " function (e.g. large strings).\n",
      "THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an\n",
      " example so that they can fix the problem.\n",
      "  **fit_params_steps[name])\n",
      "/home/ubuntu/.local/lib/python3.5/site-packages/imblearn/pipeline.py:197: UserWarning: Persisting input arguments took 3.08s to run.\n",
      "If this happens often in your code, it can cause performance problems \n",
      "(results will be correct in all cases). \n",
      "The reason for this is probably some large input arguments for a wrapped\n",
      " function (e.g. large strings).\n",
      "THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an\n",
      " example so that they can fix the problem.\n",
      "  **fit_params_steps[name])\n"
     ]
    },
    {
     "ename": "ValueError",
     "evalue": "The {2} target class is/are not present in the data.",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-42-ce3f4b637a15>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     32\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     33\u001b[0m \u001b[0mt0\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtime\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtime\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 34\u001b[0;31m \u001b[0mpipeline\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_train\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     35\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     36\u001b[0m \u001b[0mtime_to_fit\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtime\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtime\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0mt0\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/.local/lib/python3.5/site-packages/imblearn/pipeline.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, X, y, **fit_params)\u001b[0m\n\u001b[1;32m    237\u001b[0m         \u001b[0mXt\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0myt\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfit_params\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_fit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mfit_params\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    238\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_final_estimator\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 239\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_final_estimator\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mXt\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0myt\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mfit_params\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    240\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    241\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/.local/lib/python3.5/site-packages/imblearn/ensemble/_forest.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, X, y, sample_weight)\u001b[0m\n\u001b[1;32m    435\u001b[0m                         \u001b[0ms\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mt\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msample_weight\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mi\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtrees\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    436\u001b[0m                         verbose=self.verbose, class_weight=self.class_weight)\n\u001b[0;32m--> 437\u001b[0;31m                     for i, (s, t) in enumerate(zip(samplers, trees)))\n\u001b[0m\u001b[1;32m    438\u001b[0m             \u001b[0msamplers\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtrees\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mzip\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0msamplers_trees\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    439\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/.local/lib/python3.5/site-packages/sklearn/externals/joblib/parallel.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, iterable)\u001b[0m\n\u001b[1;32m    928\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    929\u001b[0m             \u001b[0;32mwith\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_backend\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mretrieval_context\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 930\u001b[0;31m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mretrieve\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    931\u001b[0m             \u001b[0;31m# Make sure that we get a last message telling us we are done\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    932\u001b[0m             \u001b[0melapsed_time\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtime\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtime\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_start_time\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/.local/lib/python3.5/site-packages/sklearn/externals/joblib/parallel.py\u001b[0m in \u001b[0;36mretrieve\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    831\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    832\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0mgetattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_backend\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'supports_timeout'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 833\u001b[0;31m                     \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_output\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mextend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mjob\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    834\u001b[0m                 \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    835\u001b[0m                     \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_output\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mextend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mjob\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/lib/python3.5/multiprocessing/pool.py\u001b[0m in \u001b[0;36mget\u001b[0;34m(self, timeout)\u001b[0m\n\u001b[1;32m    606\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_value\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    607\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 608\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_value\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    609\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    610\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_set\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mi\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mobj\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/lib/python3.5/multiprocessing/pool.py\u001b[0m in \u001b[0;36mworker\u001b[0;34m(inqueue, outqueue, initializer, initargs, maxtasks, wrap_exception)\u001b[0m\n\u001b[1;32m    117\u001b[0m         \u001b[0mjob\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mi\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwds\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtask\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    118\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 119\u001b[0;31m             \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    120\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    121\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mwrap_exception\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/.local/lib/python3.5/site-packages/sklearn/externals/joblib/_parallel_backends.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m    565\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__call__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    566\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 567\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    568\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mKeyboardInterrupt\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    569\u001b[0m             \u001b[0;31m# We capture the KeyboardInterrupt and reraise it as\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/.local/lib/python3.5/site-packages/sklearn/externals/joblib/parallel.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    223\u001b[0m         \u001b[0;32mwith\u001b[0m \u001b[0mparallel_backend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_backend\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mn_jobs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_n_jobs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    224\u001b[0m             return [func(*args, **kwargs)\n\u001b[0;32m--> 225\u001b[0;31m                     for func, args, kwargs in self.items]\n\u001b[0m\u001b[1;32m    226\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    227\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__len__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/.local/lib/python3.5/site-packages/sklearn/externals/joblib/parallel.py\u001b[0m in \u001b[0;36m<listcomp>\u001b[0;34m(.0)\u001b[0m\n\u001b[1;32m    223\u001b[0m         \u001b[0;32mwith\u001b[0m \u001b[0mparallel_backend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_backend\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mn_jobs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_n_jobs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    224\u001b[0m             return [func(*args, **kwargs)\n\u001b[0;32m--> 225\u001b[0;31m                     for func, args, kwargs in self.items]\n\u001b[0m\u001b[1;32m    226\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    227\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__len__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/.local/lib/python3.5/site-packages/imblearn/ensemble/_forest.py\u001b[0m in \u001b[0;36m_local_parallel_build_trees\u001b[0;34m(sampler, tree, forest, X, y, sample_weight, tree_idx, n_trees, verbose, class_weight)\u001b[0m\n\u001b[1;32m     37\u001b[0m                                 class_weight=None):\n\u001b[1;32m     38\u001b[0m     \u001b[0;31m# resample before to fit the tree\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 39\u001b[0;31m     \u001b[0mX_resampled\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_resampled\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msampler\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit_sample\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     40\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0msample_weight\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     41\u001b[0m         \u001b[0msample_weight\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msafe_indexing\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msample_weight\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msampler\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msample_indices_\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/.local/lib/python3.5/site-packages/imblearn/base.py\u001b[0m in \u001b[0;36mfit_resample\u001b[0;34m(self, X, y)\u001b[0m\n\u001b[1;32m     81\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     82\u001b[0m         self.sampling_strategy_ = check_sampling_strategy(\n\u001b[0;32m---> 83\u001b[0;31m             self.sampling_strategy, y, self._sampling_type)\n\u001b[0m\u001b[1;32m     84\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     85\u001b[0m         \u001b[0moutput\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_fit_resample\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/.local/lib/python3.5/site-packages/imblearn/utils/_validation.py\u001b[0m in \u001b[0;36mcheck_sampling_strategy\u001b[0;34m(sampling_strategy, y, sampling_type, **kwargs)\u001b[0m\n\u001b[1;32m    443\u001b[0m     \u001b[0;32melif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msampling_strategy\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdict\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    444\u001b[0m         return OrderedDict(sorted(\n\u001b[0;32m--> 445\u001b[0;31m             \u001b[0m_sampling_strategy_dict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msampling_strategy\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msampling_type\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    446\u001b[0m             .items()))\n\u001b[1;32m    447\u001b[0m     \u001b[0;32melif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msampling_strategy\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/.local/lib/python3.5/site-packages/imblearn/utils/_validation.py\u001b[0m in \u001b[0;36m_sampling_strategy_dict\u001b[0;34m(sampling_strategy, y, sampling_type)\u001b[0m\n\u001b[1;32m    231\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mset_diff_sampling_strategy_target\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    232\u001b[0m         raise ValueError(\"The {} target class is/are not present in the\"\n\u001b[0;32m--> 233\u001b[0;31m                          \" data.\".format(set_diff_sampling_strategy_target))\n\u001b[0m\u001b[1;32m    234\u001b[0m     \u001b[0;31m# check that there is no negative number\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    235\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0many\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mn_samples\u001b[0m \u001b[0;34m<\u001b[0m \u001b[0;36m0\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mn_samples\u001b[0m \u001b[0;32min\u001b[0m \u001b[0msampling_strategy\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mValueError\u001b[0m: The {2} target class is/are not present in the data."
     ]
    }
   ],
   "source": [
    "print(len(X_and_y.columns))\n",
    "X_and_y = X_and_y.copy()\n",
    "\n",
    "# Pull off 'NYCgov_Pov_Stat' for our target variable\n",
    "#X_and_y['NYCgov_Pov_Stat'] = X_and_y['NYCgov_Pov_Stat'].replace({'Pov': 1, 'Not Pov': 2})\n",
    "#X_and_y['NYCgov_Pov_Stat'] = X_and_y['NYCgov_Pov_Stat'].replace({1: 'Pov', 2:'Not Pov'})\n",
    "#X_and_y['NYCgov_Pov_Stat'] = pd.Categorical(X_and_y['NYCgov_Pov_Stat'], ordered=False, categories=['Pov', 'Not Pov'])\n",
    "y = X_and_y['NYCgov_Pov_Stat']\n",
    "\n",
    "X = X_and_y.drop('NYCgov_Pov_Stat', axis='columns')\n",
    "\n",
    "print(y.tail())\n",
    "# Get train and test - be sure to stratify since this is imbalanced data (poverty ~20% of the set)\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, stratify=y, random_state=42)\n",
    "\n",
    "categorizer = Categorizer(columns=dummy_these)\n",
    "dummy_encoder = DummyEncoder(drop_first=True)\n",
    "#samplers = [SMOTE(random_state=42), SMOTETomek(random_state=42), TomekLinks(random_state=42)]\n",
    "scaler = Normalizer()\n",
    "\n",
    "sampling_strat = {2: 5919, 1: 17757}\n",
    "\n",
    "classifier = BalancedRandomForestClassifier(n_estimators=1000, sampling_strategy=sampling_strat, replacement=True, \n",
    "                                            n_jobs=-1, max_features='auto', random_state=42)\n",
    "\n",
    "cachedir = tempfile.mkdtemp(dir='/mnt/ssd/tmp')\n",
    "\n",
    "pipeline = imbPipeline(steps=[('dummies', dummy_encoder), \n",
    "                              ('scaler', scaler), \n",
    "                              ('clf', classifier)], \n",
    "                       memory=cachedir)\n",
    "\n",
    "t0 = time.time()\n",
    "pipeline.fit(X_train, y_train)\n",
    "\n",
    "time_to_fit = time.time() - t0\n",
    "print('Took: ' + '{:4.2f}'.format(time_to_fit) + 's to fit ')\n",
    "\n",
    "predictions = pipeline.predict(X_test)\n",
    "\n",
    "print('\\nBalanced accuracy: ' + str(balanced_accuracy_score(y_test, predictions)))\n",
    "print('Geometric mean: ' + str(geometric_mean_score(y_test, predictions)))\n",
    "print('Confusion matrix:\\n' + str(confusion_matrix(y_test, predictions)))\n",
    "print('\\nClassification report:\\n' + str(classification_report_imbalanced(y_test, predictions)))\n",
    "#print('\\nOOB score: ' + str(pipeline.named_steps['clf'].oob_score_))\n",
    "print('n_estimators: ' + str(pipeline.named_steps['clf'].n_estimators))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "tester = list(zip(pipeline.named_steps['clf'].feature_importances_, pipeline.named_steps['dummies'].transformed_columns_))\n",
    "sorted(tester, key=lambda tup: tup[0], reverse=True)[:15]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Full data set but no grid search, only 10 estimators"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/ubuntu/.local/lib/python3.5/site-packages/imblearn/pipeline.py:197: UserWarning: Persisting input arguments took 3.33s to run.\n",
      "If this happens often in your code, it can cause performance problems \n",
      "(results will be correct in all cases). \n",
      "The reason for this is probably some large input arguments for a wrapped\n",
      " function (e.g. large strings).\n",
      "THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an\n",
      " example so that they can fix the problem.\n",
      "  **fit_params_steps[name])\n",
      "/home/ubuntu/.local/lib/python3.5/site-packages/imblearn/pipeline.py:197: UserWarning: Persisting input arguments took 3.50s to run.\n",
      "If this happens often in your code, it can cause performance problems \n",
      "(results will be correct in all cases). \n",
      "The reason for this is probably some large input arguments for a wrapped\n",
      " function (e.g. large strings).\n",
      "THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an\n",
      " example so that they can fix the problem.\n",
      "  **fit_params_steps[name])\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Took: 70.75s to fit \n",
      "{'confusion_matrix': array([[4503,  196],\n",
      "       [ 295,  925]]), 'geometric_mean_score': 0.8523916799769762, 'balanced_accuracy_score': 0.8582428594852759, 'feature_importances_': array([1.08379062e-04, 2.28520176e-04, 6.73097969e-05, ...,\n",
      "       0.00000000e+00, 1.17332300e-04, 0.00000000e+00]), 'classification_report': '                   pre       rec       spe        f1       geo       iba       sup\\n\\n    Not Pov       0.94      0.96      0.76      0.95      0.85      0.74      4699\\n        Pov       0.83      0.76      0.96      0.79      0.85      0.71      1220\\n\\navg / total       0.92      0.92      0.80      0.92      0.85      0.74      5919\\n', 'transformed_columns_': Index(['WAGP_adj_1', 'WAGP_adj_2', 'WAGP_adj_3', 'WAGP_adj_4', 'WAGP_adj_5',\n",
      "       'WAGP_adj_6', 'WAGP_adj_7', 'WAGP_adj_8', 'WAGP_adj_9', 'WAGP_adj_10',\n",
      "       ...\n",
      "       'HousingStatus_5', 'HousingStatus_6', 'HousingStatus_7',\n",
      "       'HousingStatus_8', 'HousingStatus_9', 'TotalWorkHrs_PU_1',\n",
      "       'TotalWorkHrs_PU_2', 'TotalWorkHrs_PU_3', 'TotalWorkHrs_PU_4',\n",
      "       'TotalWorkHrs_PU_5'],\n",
      "      dtype='object', length=10477)}\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/ubuntu/.local/lib/python3.5/site-packages/imblearn/pipeline.py:197: UserWarning: Persisting input arguments took 3.33s to run.\n",
      "If this happens often in your code, it can cause performance problems \n",
      "(results will be correct in all cases). \n",
      "The reason for this is probably some large input arguments for a wrapped\n",
      " function (e.g. large strings).\n",
      "THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an\n",
      " example so that they can fix the problem.\n",
      "  **fit_params_steps[name])\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Took: 54.02s to fit \n",
      "{'confusion_matrix': array([[4175,  524],\n",
      "       [  93, 1127]]), 'geometric_mean_score': 0.905956948071855, 'balanced_accuracy_score': 0.906128701956119, 'feature_importances_': array([0.00021626, 0.00045376, 0.        , ..., 0.        , 0.        ,\n",
      "       0.        ]), 'classification_report': '                   pre       rec       spe        f1       geo       iba       sup\\n\\n    Not Pov       0.98      0.89      0.92      0.93      0.91      0.82      4699\\n        Pov       0.68      0.92      0.89      0.79      0.91      0.82      1220\\n\\navg / total       0.92      0.90      0.92      0.90      0.91      0.82      5919\\n', 'transformed_columns_': Index(['WAGP_adj_1', 'WAGP_adj_2', 'WAGP_adj_3', 'WAGP_adj_4', 'WAGP_adj_5',\n",
      "       'WAGP_adj_6', 'WAGP_adj_7', 'WAGP_adj_8', 'WAGP_adj_9', 'WAGP_adj_10',\n",
      "       ...\n",
      "       'HousingStatus_5', 'HousingStatus_6', 'HousingStatus_7',\n",
      "       'HousingStatus_8', 'HousingStatus_9', 'TotalWorkHrs_PU_1',\n",
      "       'TotalWorkHrs_PU_2', 'TotalWorkHrs_PU_3', 'TotalWorkHrs_PU_4',\n",
      "       'TotalWorkHrs_PU_5'],\n",
      "      dtype='object', length=10477)}\n"
     ]
    }
   ],
   "source": [
    "# Take a small subset of the data to run POC\n",
    "#X_small = X.iloc[:50, :].copy()\n",
    "X_small = X.copy()\n",
    "\n",
    "# Pull off 'NYCgov_Pov_Stat' for our target variable\n",
    "y = X_small['NYCgov_Pov_Stat']\n",
    "y.replace({1: 'Pov', 2:'Not Pov'}, inplace=True)\n",
    "X = X_small.drop('NYCgov_Pov_Stat', axis='columns')\n",
    "\n",
    "# Get train and test - be sure to stratify since this is imbalanced data (poverty ~20% of the set)\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, stratify=y, random_state=42)\n",
    "\n",
    "categorizer = Categorizer(columns=dummy_these)\n",
    "dummy_encoder = DummyEncoder(drop_first=True)\n",
    "#samplers = [SMOTE(random_state=42), SMOTETomek(random_state=42), TomekLinks(random_state=42)]\n",
    "scaler = Normalizer()\n",
    "clf =                  RandomForestClassifier(n_jobs=-1, n_estimators=10, max_features='auto', random_state=42)\n",
    "balanced_clf = BalancedRandomForestClassifier(n_jobs=-1, n_estimators=10, max_features='auto', random_state=42)\n",
    "\n",
    "cachedir = tempfile.mkdtemp()\n",
    "\n",
    "# Create empty dictionaries to hold results\n",
    "results_plain = {}\n",
    "results_balanced = {}\n",
    "\n",
    "for classifier, results_dict in zip([clf, balanced_clf], [results_plain, results_balanced]):\n",
    "\n",
    "    pipeline = imbPipeline(steps=[#('cat', categorizer), # No need for Categorizer since we already did it\n",
    "                                  ('dummies', dummy_encoder), \n",
    "                                  #('sampler', sampler), \n",
    "                                  ('scaler', scaler), \n",
    "                                  ('clf', classifier)], \n",
    "                           memory=cachedir)\n",
    "\n",
    "    t0 = time.time()\n",
    "    pipeline.fit(X_train, y_train)\n",
    "\n",
    "    time_to_fit = time.time() - t0\n",
    "    print('Took: ' + '{:4.2f}'.format(time_to_fit) + 's to fit ')\n",
    "    \n",
    "    predictions = pipeline.predict(X_test)\n",
    "    results_dict['balanced_accuracy_score'] = balanced_accuracy_score(y_test, predictions)\n",
    "    results_dict['geometric_mean_score'] = geometric_mean_score(y_test, predictions)\n",
    "    results_dict['confusion_matrix'] = confusion_matrix(y_test, predictions)\n",
    "    results_dict['classification_report'] = classification_report_imbalanced(y_test, predictions)\n",
    "    results_dict['feature_importances_'] = pipeline.named_steps['clf'].feature_importances_\n",
    "    results_dict['transformed_columns_'] = pipeline.named_steps['dummies'].transformed_columns_\n",
    "    print(str(results_dict))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[(0.053261627357831756, 'all_adult_any_WKHP'),\n",
       " (0.053249850993936886, 'any_anyage_TINP_any'),\n",
       " (0.052582859245591876, 'all_anyage_ETH_any'),\n",
       " (0.052276741730780694, 'all_anyage_SSP_any'),\n",
       " (0.05225465701237826, 'any_adult_WAG<50'),\n",
       " (0.05157735756906421, '%_anyage_TINP<25'),\n",
       " (0.05144051199957207, 'any_anyage_TINP<70'),\n",
       " (0.051439137088152176, 'all_anyage_any_WKW'),\n",
       " (0.05046858251637465, 'all_adult_TINP<80'),\n",
       " (0.03912715924380138, 'count_anyage_WAG<10'),\n",
       " (0.011321463620562803, 'all_adult_TINP<25'),\n",
       " (0.007184924649845273, 'MRNT'),\n",
       " (0.006452386132367269, '%_anyage_ETH_any'),\n",
       " (0.0050534530833320915, '%_anyage_ENG_any'),\n",
       " (0.004529686603494478, 'any_anyage_PA0')]"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tester = list(zip(results_plain['feature_importances_'], results_plain['transformed_columns_']))\n",
    "sorted(tester, key=lambda tup: tup[0], reverse=True)[:15]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[(0.06510250878867069, 'any_adult_TINP<20'),\n",
       " (0.06396830168664602, 'all_adult_SSIP_any'),\n",
       " (0.063710355411885, 'all_anyage_WAG<35'),\n",
       " (0.06274658841068068, 'all_anyage_WAG<60'),\n",
       " (0.06236858347937092, 'all_anyage_TINP_any'),\n",
       " (0.062242303320543556, 'any_adult_any_SEX'),\n",
       " (0.062148568051467415, 'all_anyage_WAG<30'),\n",
       " (0.06142120639451819, '%_anyage_ENG_any'),\n",
       " (0.06139662533699729, 'all_adult_TINP<80'),\n",
       " (0.060671661137871404, 'all_anyage_WAG<45'),\n",
       " (0.00716956500302484, 'any_anyage_TINP<15'),\n",
       " (0.006895951467055411, 'count_18-64_WAG<30'),\n",
       " (0.006417046063640315, '%_anyage_TINP<25'),\n",
       " (0.005957844465198908, 'count_anyage_WAG<60'),\n",
       " (0.0058310843547457, 'all_kid_TINP<40')]"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tester = list(zip(results_balanced['feature_importances_'], results_balanced['transformed_columns_']))\n",
    "sorted(tester, key=lambda tup: tup[0], reverse=True)[:15]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Using NYCgov_Pov_Gap instead of NYCGov_Pov_Stat\n",
    "We've been looking at poverty status as a classification problem (yes or no), but we can also view it as a regression \n",
    "problem.  Poverty status is essentially whether (Total Poverty-Unit Income) is less than (Poverty-Unit Threshold); but\n",
    "rather than viewing that as a yes-no, the data set has a feature 'NYCgov_Pov_Gap' which is, for households in poverty, \n",
    "the difference between the two.\n",
    "\n",
    "So, let's run the models against 'NYCgov_Pov_Gap' to see where that gets us."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "df_pers complete\n",
      "df_pu complete\n"
     ]
    }
   ],
   "source": [
    "X_pg_ef = pd.read_csv('data/EngineeredFeatures.csv', index_col=[0,1], header=0) # Reuse existing; no change here\n",
    "X_pg = pers_and_pu_features(all_2016, include_financials=True, target_column='NYCgov_PovGap')\n",
    "\n",
    "X_pg = X_pg.join(X_pg_ef)\n",
    "\n",
    "X_pg.to_csv('data/PGFeatures.csv')\n",
    "\n",
    "X_pg, dummy_these = code_categoricals(X_pg, all_2016)\n",
    "X_pg.to_csv('data/PGFeaturesCoded.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>AGEP_1</th>\n",
       "      <th>AGEP_2</th>\n",
       "      <th>AGEP_3</th>\n",
       "      <th>AGEP_4</th>\n",
       "      <th>AGEP_5</th>\n",
       "      <th>AGEP_6</th>\n",
       "      <th>AGEP_7</th>\n",
       "      <th>AGEP_8</th>\n",
       "      <th>AGEP_9</th>\n",
       "      <th>AGEP_10</th>\n",
       "      <th>...</th>\n",
       "      <th>mean_anyage_TINP&lt;80</th>\n",
       "      <th>%_anyage_TINP&lt;80</th>\n",
       "      <th>any_anyage_TINP_any</th>\n",
       "      <th>all_anyage_TINP_any</th>\n",
       "      <th>min_anyage_TINP_any</th>\n",
       "      <th>max_anyage_TINP_any</th>\n",
       "      <th>count_anyage_TINP_any</th>\n",
       "      <th>sum_anyage_TINP_any</th>\n",
       "      <th>mean_anyage_TINP_any</th>\n",
       "      <th>%_anyage_TINP_any</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>SERIALNO</th>\n",
       "      <th>Povunit_ID</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>39</th>\n",
       "      <th>1</th>\n",
       "      <td>51</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>51.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>51.0</td>\n",
       "      <td>51.0</td>\n",
       "      <td>1</td>\n",
       "      <td>51.0</td>\n",
       "      <td>51.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>55</th>\n",
       "      <th>1</th>\n",
       "      <td>60</td>\n",
       "      <td>52</td>\n",
       "      <td>26</td>\n",
       "      <td>20</td>\n",
       "      <td>20</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>29.5</td>\n",
       "      <td>0.8</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>20.0</td>\n",
       "      <td>60.0</td>\n",
       "      <td>5</td>\n",
       "      <td>178.0</td>\n",
       "      <td>35.6</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>69</th>\n",
       "      <th>1</th>\n",
       "      <td>39</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>39.0</td>\n",
       "      <td>39.0</td>\n",
       "      <td>1</td>\n",
       "      <td>39.0</td>\n",
       "      <td>39.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>210</th>\n",
       "      <th>1</th>\n",
       "      <td>26</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>26.0</td>\n",
       "      <td>26.0</td>\n",
       "      <td>1</td>\n",
       "      <td>26.0</td>\n",
       "      <td>26.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>261</th>\n",
       "      <th>1</th>\n",
       "      <td>36</td>\n",
       "      <td>36</td>\n",
       "      <td>6</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>12.0</td>\n",
       "      <td>0.8</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>1.0</td>\n",
       "      <td>36.0</td>\n",
       "      <td>5</td>\n",
       "      <td>84.0</td>\n",
       "      <td>16.8</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 5549 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                     AGEP_1  AGEP_2  AGEP_3  AGEP_4  AGEP_5  AGEP_6  AGEP_7  \\\n",
       "SERIALNO Povunit_ID                                                           \n",
       "39       1               51       0       0       0       0       0       0   \n",
       "55       1               60      52      26      20      20       0       0   \n",
       "69       1               39       0       0       0       0       0       0   \n",
       "210      1               26       0       0       0       0       0       0   \n",
       "261      1               36      36       6       5       1       0       0   \n",
       "\n",
       "                     AGEP_8  AGEP_9  AGEP_10        ...          \\\n",
       "SERIALNO Povunit_ID                                 ...           \n",
       "39       1                0       0        0        ...           \n",
       "55       1                0       0        0        ...           \n",
       "69       1                0       0        0        ...           \n",
       "210      1                0       0        0        ...           \n",
       "261      1                0       0        0        ...           \n",
       "\n",
       "                     mean_anyage_TINP<80  %_anyage_TINP<80  \\\n",
       "SERIALNO Povunit_ID                                          \n",
       "39       1                          51.0               1.0   \n",
       "55       1                          29.5               0.8   \n",
       "69       1                           0.0               0.0   \n",
       "210      1                           0.0               0.0   \n",
       "261      1                          12.0               0.8   \n",
       "\n",
       "                     any_anyage_TINP_any  all_anyage_TINP_any  \\\n",
       "SERIALNO Povunit_ID                                             \n",
       "39       1                          True                 True   \n",
       "55       1                          True                 True   \n",
       "69       1                          True                 True   \n",
       "210      1                          True                 True   \n",
       "261      1                          True                 True   \n",
       "\n",
       "                     min_anyage_TINP_any  max_anyage_TINP_any  \\\n",
       "SERIALNO Povunit_ID                                             \n",
       "39       1                          51.0                 51.0   \n",
       "55       1                          20.0                 60.0   \n",
       "69       1                          39.0                 39.0   \n",
       "210      1                          26.0                 26.0   \n",
       "261      1                           1.0                 36.0   \n",
       "\n",
       "                     count_anyage_TINP_any  sum_anyage_TINP_any  \\\n",
       "SERIALNO Povunit_ID                                               \n",
       "39       1                               1                 51.0   \n",
       "55       1                               5                178.0   \n",
       "69       1                               1                 39.0   \n",
       "210      1                               1                 26.0   \n",
       "261      1                               5                 84.0   \n",
       "\n",
       "                     mean_anyage_TINP_any  %_anyage_TINP_any  \n",
       "SERIALNO Povunit_ID                                           \n",
       "39       1                           51.0                1.0  \n",
       "55       1                           35.6                1.0  \n",
       "69       1                           39.0                1.0  \n",
       "210      1                           26.0                1.0  \n",
       "261      1                           16.8                1.0  \n",
       "\n",
       "[5 rows x 5549 columns]"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_pg = pd.read_csv('data/PGFeaturesCoded.csv', index_col=[0,1], header=0) # Reuse existing; no change here\n",
    "X_pg.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/ubuntu/.local/lib/python3.5/site-packages/imblearn/pipeline.py:197: UserWarning: Persisting input arguments took 3.09s to run.\n",
      "If this happens often in your code, it can cause performance problems \n",
      "(results will be correct in all cases). \n",
      "The reason for this is probably some large input arguments for a wrapped\n",
      " function (e.g. large strings).\n",
      "THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an\n",
      " example so that they can fix the problem.\n",
      "  **fit_params_steps[name])\n",
      "/home/ubuntu/.local/lib/python3.5/site-packages/imblearn/pipeline.py:197: UserWarning: Persisting input arguments took 3.04s to run.\n",
      "If this happens often in your code, it can cause performance problems \n",
      "(results will be correct in all cases). \n",
      "The reason for this is probably some large input arguments for a wrapped\n",
      " function (e.g. large strings).\n",
      "THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an\n",
      " example so that they can fix the problem.\n",
      "  **fit_params_steps[name])\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Took: 435.60s to fit \n",
      "{'test score': 0.7637718358117817, 'feature_importances_': array([2.65924486e-04, 3.53370510e-04, 2.74746009e-04, ...,\n",
      "       3.13643695e-05, 2.95436761e-06, 1.88089018e-05]), 'transformed_columns_': Index(['AGEP_1', 'AGEP_2', 'AGEP_3', 'AGEP_4', 'AGEP_5', 'AGEP_6', 'AGEP_7',\n",
      "       'AGEP_8', 'AGEP_9', 'AGEP_10',\n",
      "       ...\n",
      "       'mean_anyage_TINP<80', '%_anyage_TINP<80', 'any_anyage_TINP_any',\n",
      "       'all_anyage_TINP_any', 'min_anyage_TINP_any', 'max_anyage_TINP_any',\n",
      "       'count_anyage_TINP_any', 'sum_anyage_TINP_any', 'mean_anyage_TINP_any',\n",
      "       '%_anyage_TINP_any'],\n",
      "      dtype='object', length=5548), 'training score': 0.9532494932642507}\n"
     ]
    }
   ],
   "source": [
    "# Take a small subset of the data to run POC\n",
    "#X_small = X_pg.iloc[:50, :].copy()\n",
    "X_small = X_pg.copy()\n",
    "\n",
    "# Pull off 'NYCgov_Pov_Stat' for our target variable\n",
    "y = X_small['NYCgov_PovGap']\n",
    "X = X_small.drop('NYCgov_PovGap', axis='columns')\n",
    "\n",
    "# Get train and test - no stratifying here since we're doing regression, not classification\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
    "\n",
    "categorizer = Categorizer(columns=dummy_these)\n",
    "dummy_encoder = DummyEncoder(drop_first=True)\n",
    "scaler = Normalizer()\n",
    "regressor = RandomForestRegressor(n_jobs=-1, n_estimators=10, max_features='auto', random_state=42)\n",
    "\n",
    "cachedir = tempfile.mkdtemp()\n",
    "\n",
    "# Create empty dictionaries to hold results\n",
    "results = {}\n",
    "\n",
    "pipeline = imbPipeline(steps=[#('cat', categorizer), # No need for Categorizer since we already did it\n",
    "                              ('dummies', dummy_encoder), \n",
    "                              ('scaler', scaler), \n",
    "                              ('reg', regressor)], \n",
    "                       memory=cachedir)\n",
    "\n",
    "t0 = time.time()\n",
    "pipeline.fit(X_train, y_train)\n",
    "\n",
    "time_to_fit = time.time() - t0\n",
    "print('Took: ' + '{:4.2f}'.format(time_to_fit) + 's to fit ')\n",
    "    \n",
    "results['training score'] = pipeline.score(X_train, y_train)\n",
    "results['test score'] = pipeline.score(X_test, y_test)\n",
    "results['feature_importances_'] = pipeline.named_steps['reg'].feature_importances_\n",
    "results['transformed_columns_'] = pipeline.named_steps['dummies'].transformed_columns_\n",
    "print(str(results))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[(0.5412542900219832, 'count_adult_SSIP0'),\n",
       " (0.044764803688412166, 'MRNT'),\n",
       " (0.03575995019220828, '%_anyage_TINP<15'),\n",
       " (0.026273516905920235, 'count_adult_PA0'),\n",
       " (0.024040902798597847, 'HousingStatus'),\n",
       " (0.022162946243779853, 'count_adult_TINP<15'),\n",
       " (0.011547900963612707, 'sum_anyage_TINP0'),\n",
       " (0.011313230636374887, 'any_anyage_TINP<15'),\n",
       " (0.004726736757495178, 'count_adult_TINP0'),\n",
       " (0.004470881799395084, 'count_anyage_SSIP0'),\n",
       " (0.003804604176778878, 'TEN'),\n",
       " (0.0036939593046493293, 'count_kid_not_DIS'),\n",
       " (0.003354132355255112, 'Boro_2'),\n",
       " (0.0029390726833299747, 'max_anyage_TINP0'),\n",
       " (0.002557372194562785, 'RNTP_adj')]"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tester = list(zip(results['feature_importances_'], results['transformed_columns_']))\n",
    "sorted(tester, key=lambda tup: tup[0], reverse=True)[:15]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>AGEP_1</th>\n",
       "      <th>AGEP_2</th>\n",
       "      <th>AGEP_3</th>\n",
       "      <th>AGEP_4</th>\n",
       "      <th>AGEP_5</th>\n",
       "      <th>AGEP_6</th>\n",
       "      <th>AGEP_7</th>\n",
       "      <th>AGEP_8</th>\n",
       "      <th>AGEP_9</th>\n",
       "      <th>AGEP_10</th>\n",
       "      <th>...</th>\n",
       "      <th>mean_anyage_TINP&lt;80</th>\n",
       "      <th>%_anyage_TINP&lt;80</th>\n",
       "      <th>any_anyage_TINP_any</th>\n",
       "      <th>all_anyage_TINP_any</th>\n",
       "      <th>min_anyage_TINP_any</th>\n",
       "      <th>max_anyage_TINP_any</th>\n",
       "      <th>count_anyage_TINP_any</th>\n",
       "      <th>sum_anyage_TINP_any</th>\n",
       "      <th>mean_anyage_TINP_any</th>\n",
       "      <th>%_anyage_TINP_any</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>SERIALNO</th>\n",
       "      <th>Povunit_ID</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>39</th>\n",
       "      <th>1</th>\n",
       "      <td>51</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>51.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>51.0</td>\n",
       "      <td>51.0</td>\n",
       "      <td>1</td>\n",
       "      <td>51.0</td>\n",
       "      <td>51.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>55</th>\n",
       "      <th>1</th>\n",
       "      <td>60</td>\n",
       "      <td>52</td>\n",
       "      <td>26</td>\n",
       "      <td>20</td>\n",
       "      <td>20</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>29.5</td>\n",
       "      <td>0.8</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>20.0</td>\n",
       "      <td>60.0</td>\n",
       "      <td>5</td>\n",
       "      <td>178.0</td>\n",
       "      <td>35.6</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>69</th>\n",
       "      <th>1</th>\n",
       "      <td>39</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>39.0</td>\n",
       "      <td>39.0</td>\n",
       "      <td>1</td>\n",
       "      <td>39.0</td>\n",
       "      <td>39.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>210</th>\n",
       "      <th>1</th>\n",
       "      <td>26</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>26.0</td>\n",
       "      <td>26.0</td>\n",
       "      <td>1</td>\n",
       "      <td>26.0</td>\n",
       "      <td>26.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>261</th>\n",
       "      <th>1</th>\n",
       "      <td>36</td>\n",
       "      <td>36</td>\n",
       "      <td>6</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>12.0</td>\n",
       "      <td>0.8</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>1.0</td>\n",
       "      <td>36.0</td>\n",
       "      <td>5</td>\n",
       "      <td>84.0</td>\n",
       "      <td>16.8</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 5549 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                     AGEP_1  AGEP_2  AGEP_3  AGEP_4  AGEP_5  AGEP_6  AGEP_7  \\\n",
       "SERIALNO Povunit_ID                                                           \n",
       "39       1               51       0       0       0       0       0       0   \n",
       "55       1               60      52      26      20      20       0       0   \n",
       "69       1               39       0       0       0       0       0       0   \n",
       "210      1               26       0       0       0       0       0       0   \n",
       "261      1               36      36       6       5       1       0       0   \n",
       "\n",
       "                     AGEP_8  AGEP_9  AGEP_10        ...          \\\n",
       "SERIALNO Povunit_ID                                 ...           \n",
       "39       1                0       0        0        ...           \n",
       "55       1                0       0        0        ...           \n",
       "69       1                0       0        0        ...           \n",
       "210      1                0       0        0        ...           \n",
       "261      1                0       0        0        ...           \n",
       "\n",
       "                     mean_anyage_TINP<80  %_anyage_TINP<80  \\\n",
       "SERIALNO Povunit_ID                                          \n",
       "39       1                          51.0               1.0   \n",
       "55       1                          29.5               0.8   \n",
       "69       1                           0.0               0.0   \n",
       "210      1                           0.0               0.0   \n",
       "261      1                          12.0               0.8   \n",
       "\n",
       "                     any_anyage_TINP_any  all_anyage_TINP_any  \\\n",
       "SERIALNO Povunit_ID                                             \n",
       "39       1                          True                 True   \n",
       "55       1                          True                 True   \n",
       "69       1                          True                 True   \n",
       "210      1                          True                 True   \n",
       "261      1                          True                 True   \n",
       "\n",
       "                     min_anyage_TINP_any  max_anyage_TINP_any  \\\n",
       "SERIALNO Povunit_ID                                             \n",
       "39       1                          51.0                 51.0   \n",
       "55       1                          20.0                 60.0   \n",
       "69       1                          39.0                 39.0   \n",
       "210      1                          26.0                 26.0   \n",
       "261      1                           1.0                 36.0   \n",
       "\n",
       "                     count_anyage_TINP_any  sum_anyage_TINP_any  \\\n",
       "SERIALNO Povunit_ID                                               \n",
       "39       1                               1                 51.0   \n",
       "55       1                               5                178.0   \n",
       "69       1                               1                 39.0   \n",
       "210      1                               1                 26.0   \n",
       "261      1                               5                 84.0   \n",
       "\n",
       "                     mean_anyage_TINP_any  %_anyage_TINP_any  \n",
       "SERIALNO Povunit_ID                                           \n",
       "39       1                           51.0                1.0  \n",
       "55       1                           35.6                1.0  \n",
       "69       1                           39.0                1.0  \n",
       "210      1                           26.0                1.0  \n",
       "261      1                           16.8                1.0  \n",
       "\n",
       "[5 rows x 5549 columns]"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_small.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Using NYCgov_Pov_Gap instead of NYCGov_Pov_Stat, with no Financials\n",
    "This is running the models against 'NYCgov_Pov_Gap', without financials."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "df_pers complete\n",
      "df_pu complete\n"
     ]
    }
   ],
   "source": [
    "# Reuse existing csv with no financials\n",
    "X_pg_eng_no_fin = pd.read_csv('data/EngineeredFeaturesNoFin.csv', index_col=[0,1], header=0)\n",
    "\n",
    "X_pg_no_fin = pers_and_pu_features(all_2016, include_financials=True, target_column='NYCgov_PovGap')\n",
    "\n",
    "X_pg_no_fin.join(X_pg_eng_no_fin)\n",
    "\n",
    "X_pg_no_fin.to_csv('data/PGFeaturesNoFin.csv')\n",
    "\n",
    "X_pg_no_fin, dummy_these = code_categoricals(X_pg_no_fin, all_2016)\n",
    "X_pg_no_fin.to_csv('data/PGFeaturesCodedNoFin.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Took: 2.55s to fit \n",
      "{'training score': 0.8864178444566567, 'transformed_columns_': Index(['WAGP_adj_1', 'WAGP_adj_2', 'WAGP_adj_3', 'WAGP_adj_4', 'WAGP_adj_5',\n",
      "       'WAGP_adj_6', 'WAGP_adj_7', 'WAGP_adj_8', 'WAGP_adj_9', 'WAGP_adj_10',\n",
      "       ...\n",
      "       'HousingStatus_5', 'HousingStatus_6', 'HousingStatus_7',\n",
      "       'HousingStatus_8', 'HousingStatus_9', 'TotalWorkHrs_PU_1',\n",
      "       'TotalWorkHrs_PU_2', 'TotalWorkHrs_PU_3', 'TotalWorkHrs_PU_4',\n",
      "       'TotalWorkHrs_PU_5'],\n",
      "      dtype='object', length=5285), 'feature_importances_': array([0., 0., 0., ..., 0., 0., 0.]), 'test score': 0.20693738704979336}\n"
     ]
    }
   ],
   "source": [
    "# Take a small subset of the data to run POC\n",
    "X_small = X_pg_no_fin.iloc[:50, :].copy()\n",
    "\n",
    "# Pull off 'NYCgov_Pov_Stat' for our target variable\n",
    "y = X_small['NYCgov_PovGap']\n",
    "X = X_small.drop('NYCgov_PovGap', axis='columns')\n",
    "\n",
    "# Get train and test - no stratifying here since we're doing regression, not classification\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
    "\n",
    "categorizer = Categorizer(columns=dummy_these)\n",
    "dummy_encoder = DummyEncoder(drop_first=True)\n",
    "scaler = Normalizer()\n",
    "regressor = RandomForestRegressor(n_jobs=-1, n_estimators=10, max_features='auto', random_state=42)\n",
    "#balanced_clf = BalancedRandomForestRegressor(n_jobs=-1, n_estimators=10, max_features='auto', random_state=42)\n",
    "\n",
    "cachedir = tempfile.mkdtemp()\n",
    "\n",
    "# Create empty dictionaries to hold results\n",
    "results = {}\n",
    "#results_balanced_no_fin = {}\n",
    "\n",
    "#for classifier, results_dict in zip([clf, balanced_clf], [results_plain_no_fin, results_balanced_no_fin]):\n",
    "\n",
    "pipeline = imbPipeline(steps=[#('cat', categorizer), # No need for Categorizer since we already did it\n",
    "                              ('dummies', dummy_encoder), \n",
    "                              ('scaler', scaler), \n",
    "                              ('reg', regressor)], \n",
    "                       memory=cachedir)\n",
    "\n",
    "t0 = time.time()\n",
    "pipeline.fit(X_train, y_train)\n",
    "\n",
    "time_to_fit = time.time() - t0\n",
    "print('Took: ' + '{:4.2f}'.format(time_to_fit) + 's to fit ')\n",
    "    \n",
    "#results['training score'] = pipeline.named_steps['reg'].score(X_train, y_train)\n",
    "results['training score'] = pipeline.score(X_train, y_train)\n",
    "results['test score'] = pipeline.score(X_test, y_test)\n",
    "results['feature_importances_'] = pipeline.named_steps['reg'].feature_importances_\n",
    "results['transformed_columns_'] = pipeline.named_steps['dummies'].transformed_columns_\n",
    "print(str(results))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Using NYCgov_Income instead of NYCGov_Pov_Stat or NYCgov_Pov_Gap\n",
    "This is running the models against 'NYCgov_Income' - since the poverty calculation comes down to income vs threshold,\n",
    "and the initial poverty classifier shows the feature importance is primarily income-related, let's see what we can do to\n",
    "predict household income and find the relative importance of variables there."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "df_pers complete\n",
      "df_pu complete\n"
     ]
    }
   ],
   "source": [
    "# Reuse existing csv \n",
    "X_pg_eng = pd.read_csv('data/EngineeredFeatures.csv', index_col=[0,1], header=0)\n",
    "\n",
    "X_pg_inc = pers_and_pu_features(all_2016, include_financials=True, target_column='NYCgov_Income')\n",
    "\n",
    "X_pg_inc = X_pg_inc.join(X_pg_eng)\n",
    "\n",
    "X_pg_inc.to_csv('data/PGFeaturesInc.csv')\n",
    "\n",
    "X_pg_inc, dummy_these = code_categoricals(X_pg_inc, all_2016)\n",
    "X_pg_inc.to_csv('data/PGFeaturesCodedInc.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/ubuntu/.local/lib/python3.5/site-packages/imblearn/pipeline.py:197: UserWarning: Persisting input arguments took 3.18s to run.\n",
      "If this happens often in your code, it can cause performance problems \n",
      "(results will be correct in all cases). \n",
      "The reason for this is probably some large input arguments for a wrapped\n",
      " function (e.g. large strings).\n",
      "THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an\n",
      " example so that they can fix the problem.\n",
      "  **fit_params_steps[name])\n",
      "/home/ubuntu/.local/lib/python3.5/site-packages/imblearn/pipeline.py:197: UserWarning: Persisting input arguments took 3.35s to run.\n",
      "If this happens often in your code, it can cause performance problems \n",
      "(results will be correct in all cases). \n",
      "The reason for this is probably some large input arguments for a wrapped\n",
      " function (e.g. large strings).\n",
      "THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an\n",
      " example so that they can fix the problem.\n",
      "  **fit_params_steps[name])\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Took: 296.30s to fit \n",
      "{'test score': 0.9729990614809677, 'feature_importances_': array([1.76265322e-02, 1.33508395e-03, 1.86835875e-04, ...,\n",
      "       7.67294103e-05, 9.75315989e-03, 0.00000000e+00]), 'transformed_columns_': Index(['WAGP_adj_1', 'WAGP_adj_2', 'WAGP_adj_3', 'WAGP_adj_4', 'WAGP_adj_5',\n",
      "       'WAGP_adj_6', 'WAGP_adj_7', 'WAGP_adj_8', 'WAGP_adj_9', 'WAGP_adj_10',\n",
      "       ...\n",
      "       'HousingStatus_5', 'HousingStatus_6', 'HousingStatus_7',\n",
      "       'HousingStatus_8', 'HousingStatus_9', 'TotalWorkHrs_PU_1',\n",
      "       'TotalWorkHrs_PU_2', 'TotalWorkHrs_PU_3', 'TotalWorkHrs_PU_4',\n",
      "       'TotalWorkHrs_PU_5'],\n",
      "      dtype='object', length=10405), 'training score': 0.9904116648702307}\n"
     ]
    }
   ],
   "source": [
    "# Take a small subset of the data to run POC\n",
    "#X_small = X_pg_inc.iloc[:50, :].copy()\n",
    "X_small = X_pg_inc.copy()\n",
    "\n",
    "# Pull off 'NYCgov_Pov_Stat' for our target variable\n",
    "y = X_small['NYCgov_Income']\n",
    "X = X_small.drop('NYCgov_Income', axis='columns')\n",
    "\n",
    "# Get train and test - no stratifying here since we're doing regression, not classification\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
    "\n",
    "categorizer = Categorizer(columns=dummy_these)\n",
    "dummy_encoder = DummyEncoder(drop_first=True)\n",
    "scaler = Normalizer()\n",
    "regressor = RandomForestRegressor(n_jobs=-1, n_estimators=10, max_features='auto', random_state=42)\n",
    "#balanced_clf = BalancedRandomForestRegressor(n_jobs=-1, n_estimators=10, max_features='auto', random_state=42)\n",
    "\n",
    "cachedir = tempfile.mkdtemp()\n",
    "\n",
    "# Create empty dictionaries to hold results\n",
    "results = {}\n",
    "#results_balanced_no_fin = {}\n",
    "\n",
    "#for classifier, results_dict in zip([clf, balanced_clf], [results_plain_no_fin, results_balanced_no_fin]):\n",
    "\n",
    "pipeline = imbPipeline(steps=[#('cat', categorizer), # No need for Categorizer since we already did it\n",
    "                              ('dummies', dummy_encoder), \n",
    "                              ('scaler', scaler), \n",
    "                              ('reg', regressor)], \n",
    "                       memory=cachedir)\n",
    "\n",
    "t0 = time.time()\n",
    "pipeline.fit(X_train, y_train)\n",
    "\n",
    "time_to_fit = time.time() - t0\n",
    "print('Took: ' + '{:4.2f}'.format(time_to_fit) + 's to fit ')\n",
    "    \n",
    "#results['training score'] = pipeline.named_steps['reg'].score(X_train, y_train)\n",
    "results['training score'] = pipeline.score(X_train, y_train)\n",
    "results['test score'] = pipeline.score(X_test, y_test)\n",
    "results['feature_importances_'] = pipeline.named_steps['reg'].feature_importances_\n",
    "results['transformed_columns_'] = pipeline.named_steps['dummies'].transformed_columns_\n",
    "print(str(results))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[(0.10587798972092581, 'any_anyage_SSP0'),\n",
       " (0.09244462976532644, 'min_adult_ETH_any'),\n",
       " (0.06807623458215825, 'all_adult_TINP<60'),\n",
       " (0.046101140457224174, 'mean_adult_SSIP_any'),\n",
       " (0.0459944407453176, 'min_adult_any_SEX'),\n",
       " (0.04577931790616139, 'min_adult_any_MSP'),\n",
       " (0.045658913558330134, 'mean_adult_INT_any'),\n",
       " (0.0455650902679534, 'mean_adult_any_MSP'),\n",
       " (0.04538766138869088, 'min_adult_SSP_any'),\n",
       " (0.04423539636490374, 'min_adult_PA_any'),\n",
       " (0.044052367770687724, 'min_adult_TINP_any'),\n",
       " (0.040786907341829416, 'all_anyage_TINP<50'),\n",
       " (0.029136605204614197, '%_adult_TINP<50'),\n",
       " (0.01762653216880664, 'WAGP_adj_1'),\n",
       " (0.016079479946236118, 'all_anyage_TINP<60')]"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tester = list(zip(results['feature_importances_'], results['transformed_columns_']))\n",
    "sorted(tester, key=lambda tup: tup[0], reverse=True)[:15]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Using NYCgov_Income instead of NYCGov_Pov_Stat or NYCgov_Pov_Gap - No Financials\n",
    "With the financials, we had everything we needed to actually calculate the NYCgov_Income.  So let's see how predictive\n",
    "we can get without the financials."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "df_pers complete\n",
      "df_pu complete\n"
     ]
    }
   ],
   "source": [
    "# Reuse existing csv \n",
    "X_eng_inc_no_fin = pd.read_csv('data/EngineeredFeaturesNoFin.csv', index_col=[0,1], header=0)\n",
    "\n",
    "X_inc_no_fin = pers_and_pu_features(all_2016, include_financials=False, target_column='NYCgov_Income')\n",
    "\n",
    "X_inc_no_fin = X_inc_no_fin.join(X_eng_inc_no_fin)\n",
    "\n",
    "#X_pg_inc.to_csv('data/PGFeaturesInc.csv')\n",
    "\n",
    "X_inc_no_fin, dummy_these = code_categoricals(X_inc_no_fin, all_2016)\n",
    "#X_pg_inc.to_csv('data/PGFeaturesCodedInc.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2829\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/ubuntu/.local/lib/python3.5/site-packages/imblearn/pipeline.py:197: UserWarning: Persisting input arguments took 1.58s to run.\n",
      "If this happens often in your code, it can cause performance problems \n",
      "(results will be correct in all cases). \n",
      "The reason for this is probably some large input arguments for a wrapped\n",
      " function (e.g. large strings).\n",
      "THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an\n",
      " example so that they can fix the problem.\n",
      "  **fit_params_steps[name])\n",
      "/home/ubuntu/.local/lib/python3.5/site-packages/imblearn/pipeline.py:197: UserWarning: Persisting input arguments took 1.69s to run.\n",
      "If this happens often in your code, it can cause performance problems \n",
      "(results will be correct in all cases). \n",
      "The reason for this is probably some large input arguments for a wrapped\n",
      " function (e.g. large strings).\n",
      "THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an\n",
      " example so that they can fix the problem.\n",
      "  **fit_params_steps[name])\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Took: 624.82s to fit \n",
      "{'training score': 0.9266131362072498, 'feature_importances_': array([0.00450581, 0.00378747, 0.00159843, ..., 0.00644462, 0.17289086,\n",
      "       0.        ]), 'transformed_columns_': Index(['MRGP_adj', 'RNTP_adj', 'MRNT', 'count_18-64_age', 'sum_18-64_age',\n",
      "       'mean_18-64_age', '%_18-64_age', 'any_kid_age', 'all_kid_age',\n",
      "       'min_kid_age',\n",
      "       ...\n",
      "       'HousingStatus_5', 'HousingStatus_6', 'HousingStatus_7',\n",
      "       'HousingStatus_8', 'HousingStatus_9', 'TotalWorkHrs_PU_1',\n",
      "       'TotalWorkHrs_PU_2', 'TotalWorkHrs_PU_3', 'TotalWorkHrs_PU_4',\n",
      "       'TotalWorkHrs_PU_5'],\n",
      "      dtype='object', length=7685), 'test score': 0.5113921081129593}\n"
     ]
    }
   ],
   "source": [
    "print(len(X_inc_no_fin.columns))\n",
    "# Take a small subset of the data to run POC\n",
    "#X_small = X_pg_inc.iloc[:50, :].copy()\n",
    "X_small = X_inc_no_fin.copy()\n",
    "\n",
    "# Pull off 'NYCgov_Pov_Stat' for our target variable\n",
    "y = X_small['NYCgov_Income']\n",
    "X = X_small.drop('NYCgov_Income', axis='columns')\n",
    "\n",
    "# Get train and test - no stratifying here since we're doing regression, not classification\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
    "\n",
    "categorizer = Categorizer(columns=dummy_these)\n",
    "dummy_encoder = DummyEncoder(drop_first=True)\n",
    "scaler = Normalizer()\n",
    "regressor = RandomForestRegressor(n_jobs=-1, n_estimators=100, max_features='auto', oob_score=True, random_state=42)\n",
    "#balanced_clf = BalancedRandomForestRegressor(n_jobs=-1, n_estimators=10, max_features='auto', random_state=42)\n",
    "\n",
    "cachedir = tempfile.mkdtemp()\n",
    "\n",
    "# Create empty dictionaries to hold results\n",
    "results = {}\n",
    "#results_balanced_no_fin = {}\n",
    "\n",
    "#for classifier, results_dict in zip([clf, balanced_clf], [results_plain_no_fin, results_balanced_no_fin]):\n",
    "\n",
    "pipeline = imbPipeline(steps=[#('cat', categorizer), # No need for Categorizer since we already did it\n",
    "                              ('dummies', dummy_encoder), \n",
    "                              ('scaler', scaler), \n",
    "                              ('reg', regressor)], \n",
    "                       memory=cachedir)\n",
    "\n",
    "t0 = time.time()\n",
    "pipeline.fit(X_train, y_train)\n",
    "\n",
    "time_to_fit = time.time() - t0\n",
    "print('Took: ' + '{:4.2f}'.format(time_to_fit) + 's to fit ')\n",
    "    \n",
    "#results['training score'] = pipeline.named_steps['reg'].score(X_train, y_train)\n",
    "results['training score'] = pipeline.score(X_train, y_train)\n",
    "results['test score'] = pipeline.score(X_test, y_test)\n",
    "results['feature_importances_'] = pipeline.named_steps['reg'].feature_importances_\n",
    "results['transformed_columns_'] = pipeline.named_steps['dummies'].transformed_columns_\n",
    "print(str(results))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[(0.17647828610194521, 'TotalWorkHrs_PU_4'),\n",
       " (0.05120298914905345, 'TEN_3'),\n",
       " (0.03737420027016401, 'all_adult_college'),\n",
       " (0.02621767443123551, 'sum_adult_college'),\n",
       " (0.023151071578155193, 'MSP_2_1.0'),\n",
       " (0.018641885619837577, 'sum_anyage_college'),\n",
       " (0.018538562622136528, 'Boro_2_3'),\n",
       " (0.012198687139389928, 'Boro_1_3'),\n",
       " (0.010936901048609376, 'any_18-64_>40WKW'),\n",
       " (0.008332179551431998, 'sum_anyage_sep/divorced'),\n",
       " (0.007195776195791315, 'Boro_3_3'),\n",
       " (0.005849933739184079, 'JWTR_1_7.0'),\n",
       " (0.005405100453006394, 'SCHL_1_23.0'),\n",
       " (0.0053595862132493005, 'AGEP_11_6'),\n",
       " (0.0049020987620536785, 'any_adult_>40WKW')]"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tester = list(zip(results['feature_importances_'], results['transformed_columns_']))\n",
    "sorted(tester, key=lambda tup: tup[0], reverse=True)[:15]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Feature Engineering - No Financials\n",
    "This will be as above, but pulling out the financial variables."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "df_pers complete\n",
      "df_pu complete\n"
     ]
    }
   ],
   "source": [
    "#X_no_fin_new_features = engineer_features(all_2016, include_financials=False)\n",
    "#X_no_fin_new_features.to_csv('data/EngineeredFeaturesNoFin.csv')\n",
    "#X_no_fin_new_features = pd.read_csv('data/EngineeredFeaturesNoFin.csv', index_col=[0,1], header=0)\n",
    "\n",
    "#X_no_fin = pers_and_pu_features(all_2016, include_financials=False, target_column='NYCgov_Pov_Stat')\n",
    "\n",
    "#X_no_fin = X_no_fin.join(X_no_fin_new_features)\n",
    "\n",
    "#X_no_fin.to_csv('data/FeaturesNoFin.csv')\n",
    "#X_no_fin = pd.read_csv('data/FeaturesNoFin.csv', index_col=[0,1], header=0)\n",
    "\n",
    "#X_no_fin, dummy_these = code_categoricals(X_no_fin, all_2016)\n",
    "#X_no_fin.to_csv('data/FeaturesNoFinCoded.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_no_fin = pd.read_csv('data/FeaturesNoFinCoded.csv', index_col=[0,1], header=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/ubuntu/.local/lib/python3.5/site-packages/imblearn/pipeline.py:197: UserWarning: Persisting input arguments took 0.54s to run.\n",
      "If this happens often in your code, it can cause performance problems \n",
      "(results will be correct in all cases). \n",
      "The reason for this is probably some large input arguments for a wrapped\n",
      " function (e.g. large strings).\n",
      "THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an\n",
      " example so that they can fix the problem.\n",
      "  **fit_params_steps[name])\n",
      "/home/ubuntu/.local/lib/python3.5/site-packages/imblearn/pipeline.py:197: UserWarning: Persisting input arguments took 0.51s to run.\n",
      "If this happens often in your code, it can cause performance problems \n",
      "(results will be correct in all cases). \n",
      "The reason for this is probably some large input arguments for a wrapped\n",
      " function (e.g. large strings).\n",
      "THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an\n",
      " example so that they can fix the problem.\n",
      "  **fit_params_steps[name])\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Took: 16.60s to fit \n",
      "{'balanced_accuracy_score': 0.6087474139946064, 'confusion_matrix': array([[4527,  172],\n",
      "       [ 910,  310]]), 'geometric_mean_score': 0.49477011127488796, 'feature_importances_': array([0.00374215, 0.01136674, 0.01506289, ..., 0.00948223, 0.00527128,\n",
      "       0.        ]), 'classification_report': '                   pre       rec       spe        f1       geo       iba       sup\\n\\n    Not Pov       0.83      0.96      0.25      0.89      0.49      0.26      4699\\n        Pov       0.64      0.25      0.96      0.36      0.49      0.23      1220\\n\\navg / total       0.79      0.82      0.40      0.78      0.49      0.26      5919\\n', 'transformed_columns_': Index(['MRGP_adj', 'RNTP_adj', 'MRNT', 'AGEP_1_1', 'AGEP_1_2', 'AGEP_1_3',\n",
      "       'AGEP_1_4', 'AGEP_1_5', 'AGEP_1_6', 'AGEP_1_7',\n",
      "       ...\n",
      "       'HousingStatus_5', 'HousingStatus_6', 'HousingStatus_7',\n",
      "       'HousingStatus_8', 'HousingStatus_9', 'TotalWorkHrs_PU_1',\n",
      "       'TotalWorkHrs_PU_2', 'TotalWorkHrs_PU_3', 'TotalWorkHrs_PU_4',\n",
      "       'TotalWorkHrs_PU_5'],\n",
      "      dtype='object', length=5105)}\n",
      "Took: 5.65s to fit \n",
      "{'balanced_accuracy_score': 0.7340716022592878, 'confusion_matrix': array([[3363, 1336],\n",
      "       [ 302,  918]]), 'geometric_mean_score': 0.7338412772834307, 'feature_importances_': array([0.00771805, 0.01047624, 0.0078005 , ..., 0.01705998, 0.03820723,\n",
      "       0.        ]), 'classification_report': '                   pre       rec       spe        f1       geo       iba       sup\\n\\n    Not Pov       0.92      0.72      0.75      0.80      0.73      0.54      4699\\n        Pov       0.41      0.75      0.72      0.53      0.73      0.54      1220\\n\\navg / total       0.81      0.72      0.74      0.75      0.73      0.54      5919\\n', 'transformed_columns_': Index(['MRGP_adj', 'RNTP_adj', 'MRNT', 'AGEP_1_1', 'AGEP_1_2', 'AGEP_1_3',\n",
      "       'AGEP_1_4', 'AGEP_1_5', 'AGEP_1_6', 'AGEP_1_7',\n",
      "       ...\n",
      "       'HousingStatus_5', 'HousingStatus_6', 'HousingStatus_7',\n",
      "       'HousingStatus_8', 'HousingStatus_9', 'TotalWorkHrs_PU_1',\n",
      "       'TotalWorkHrs_PU_2', 'TotalWorkHrs_PU_3', 'TotalWorkHrs_PU_4',\n",
      "       'TotalWorkHrs_PU_5'],\n",
      "      dtype='object', length=5105)}\n"
     ]
    }
   ],
   "source": [
    "# Take a small subset of the data to run POC\n",
    "#X_small = X_no_fin.iloc[:50, :].copy()\n",
    "X_small = X_no_fin.copy()\n",
    "\n",
    "# Pull off 'NYCgov_Pov_Stat' for our target variable\n",
    "y = X_small['NYCgov_Pov_Stat']\n",
    "y.replace({1: 'Pov', 2:'Not Pov'}, inplace=True)\n",
    "X = X_small.drop('NYCgov_Pov_Stat', axis='columns')\n",
    "\n",
    "# Get train and test - be sure to stratify since this is imbalanced data (poverty ~20% of the set)\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, stratify=y, random_state=42)\n",
    "\n",
    "categorizer = Categorizer(columns=dummy_these)\n",
    "dummy_encoder = DummyEncoder(drop_first=True)\n",
    "#samplers = [SMOTE(random_state=42), SMOTETomek(random_state=42), TomekLinks(random_state=42)]\n",
    "scaler = Normalizer()\n",
    "clf =                  RandomForestClassifier(n_jobs=-1, n_estimators=10, max_features='auto', random_state=42)\n",
    "balanced_clf = BalancedRandomForestClassifier(n_jobs=-1, n_estimators=10, max_features='auto', random_state=42)\n",
    "\n",
    "cachedir = tempfile.mkdtemp()\n",
    "\n",
    "# Create empty dictionaries to hold results\n",
    "results_plain_no_fin = {}\n",
    "results_balanced_no_fin = {}\n",
    "\n",
    "for classifier, results_dict in zip([clf, balanced_clf], [results_plain_no_fin, results_balanced_no_fin]):\n",
    "\n",
    "    pipeline = imbPipeline(steps=[('cat', categorizer), # No need for Categorizer since we already did it\n",
    "                                  ('dummies', dummy_encoder), \n",
    "                                  #('sampler', sampler), \n",
    "                                  ('scaler', scaler), \n",
    "                                  ('clf', classifier)], \n",
    "                           memory=cachedir)\n",
    "\n",
    "    t0 = time.time()\n",
    "    pipeline.fit(X_train, y_train)\n",
    "\n",
    "    time_to_fit = time.time() - t0\n",
    "    print('Took: ' + '{:4.2f}'.format(time_to_fit) + 's to fit ')\n",
    "    \n",
    "    predictions = pipeline.predict(X_test)\n",
    "    results_dict['balanced_accuracy_score'] = balanced_accuracy_score(y_test, predictions)\n",
    "    results_dict['geometric_mean_score'] = geometric_mean_score(y_test, predictions)\n",
    "    results_dict['confusion_matrix'] = confusion_matrix(y_test, predictions)\n",
    "    results_dict['classification_report'] = classification_report_imbalanced(y_test, predictions)\n",
    "    results_dict['feature_importances_'] = pipeline.named_steps['clf'].feature_importances_\n",
    "    results_dict['transformed_columns_'] = pipeline.named_steps['dummies'].transformed_columns_\n",
    "    print(str(results_dict))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[(0.0333263835863417, 'WKW_1_6.0'),\n",
       " (0.019089687064374118, 'TEN_3'),\n",
       " (0.018658342125886018, 'TotalWorkHrs_PU_1'),\n",
       " (0.015062894956498082, 'MRNT'),\n",
       " (0.014952220424570705, 'TotalWorkHrs_PU_2'),\n",
       " (0.014058264808781803, 'DIS_1_2.0'),\n",
       " (0.011368339383472542, 'WKW_2_6.0'),\n",
       " (0.01136674338124465, 'RNTP_adj'),\n",
       " (0.01131130342588219, 'ENG_1_5.0'),\n",
       " (0.010803276411116742, 'CIT_1_1'),\n",
       " (0.01055147678313992, 'HousingStatus_6'),\n",
       " (0.010142020554241103, 'Ethnicity_1_1'),\n",
       " (0.009638502918302148, 'SEX_1_2'),\n",
       " (0.009620946071791698, 'JWTR_1_4.0'),\n",
       " (0.009482233140690393, 'TotalWorkHrs_PU_3')]"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tester = list(zip(results_plain_no_fin['feature_importances_'], results_plain_no_fin['transformed_columns_']))\n",
    "sorted(tester, key=lambda tup: tup[0], reverse=True)[:15]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[(0.03820723190748078, 'TotalWorkHrs_PU_4'),\n",
       " (0.030424103555162847, 'WKW_2_6.0'),\n",
       " (0.028615346415553754, 'WKHP_1_40'),\n",
       " (0.027021511173145822, 'WKW_1_6.0'),\n",
       " (0.022908203636657767, 'TotalWorkHrs_PU_2'),\n",
       " (0.021245426174740102, 'JWTR_1_4.0'),\n",
       " (0.018196157138579097, 'Ethnicity_2_1'),\n",
       " (0.017950247133279758, 'Ethnicity_1_1'),\n",
       " (0.01705998306092355, 'TotalWorkHrs_PU_3'),\n",
       " (0.016393462842024538, 'SCHL_1_22.0'),\n",
       " (0.015787585540996484, 'WKHP_2_40'),\n",
       " (0.014786053558510643, 'TEN_3'),\n",
       " (0.014167886506504471, 'SCHL_1_21.0'),\n",
       " (0.013906358546812292, 'ENG_1_5.0'),\n",
       " (0.01309187152147428, 'JWTR_2_4.0')]"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tester = list(zip(results_balanced_no_fin['feature_importances_'], results_balanced_no_fin['transformed_columns_']))\n",
    "sorted(tester, key=lambda tup: tup[0], reverse=True)[:15]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### No Financials, with SMOTEENN sampling strategy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "saved it\n",
      "<class 'pandas.core.frame.DataFrame'>\n",
      "MultiIndex: 29595 entries, (39, 1) to (1521415, 1)\n",
      "Columns: 5621 entries, AGEP_1 to %_anyage_TINP_any\n",
      "dtypes: bool(1297), float64(4178), int64(146)\n",
      "memory usage: 1013.2 MB\n"
     ]
    }
   ],
   "source": [
    "#tester_ef = pd.read_csv('data/EngineeredFeaturesNoFin.csv', index_col=[0,1], header=0)\n",
    "#tester_ef.head()\n",
    "#len(tester.columns) #249\n",
    "#len(tester_ef.columns) #2580\n",
    "#tester_joined = tester.join(tester_ef)\n",
    "#tester_joined.head() #2829 columns\n",
    "tester = pd.read_csv('data/Features.csv', index_col=[0,1], header=0)\n",
    "tester, dummies = code_categoricals(tester, all_2016)\n",
    "tester.to_csv('data/TestingCoding.csv')\n",
    "print('saved it')\n",
    "tester = pd.read_csv('data/TestingCoding.csv', index_col=[0,1], header=0)\n",
    "tester.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2829\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/ubuntu/.local/lib/python3.5/site-packages/imblearn/pipeline.py:197: UserWarning: Persisting input arguments took 1.50s to run.\n",
      "If this happens often in your code, it can cause performance problems \n",
      "(results will be correct in all cases). \n",
      "The reason for this is probably some large input arguments for a wrapped\n",
      " function (e.g. large strings).\n",
      "THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an\n",
      " example so that they can fix the problem.\n",
      "  **fit_params_steps[name])\n",
      "/home/ubuntu/.local/lib/python3.5/site-packages/imblearn/pipeline.py:200: UserWarning: Persisting input arguments took 4.73s to run.\n",
      "If this happens often in your code, it can cause performance problems \n",
      "(results will be correct in all cases). \n",
      "The reason for this is probably some large input arguments for a wrapped\n",
      " function (e.g. large strings).\n",
      "THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an\n",
      " example so that they can fix the problem.\n",
      "  cloned_transformer, Xt, yt, **fit_params_steps[name])\n",
      "/home/ubuntu/.local/lib/python3.5/site-packages/imblearn/pipeline.py:197: UserWarning: Persisting input arguments took 1.10s to run.\n",
      "If this happens often in your code, it can cause performance problems \n",
      "(results will be correct in all cases). \n",
      "The reason for this is probably some large input arguments for a wrapped\n",
      " function (e.g. large strings).\n",
      "THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an\n",
      " example so that they can fix the problem.\n",
      "  **fit_params_steps[name])\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Took: 903.82s to fit \n",
      "{'balanced_accuracy_score': 0.7483153897411029, 'confusion_matrix': array([[3701,  998],\n",
      "       [ 355,  865]]), 'geometric_mean_score': 0.7472827519843549, 'feature_importances_': array([0.00101219, 0.001638  , 0.00023066, ..., 0.00143429, 0.00032838,\n",
      "       0.00031573]), 'classification_report': '                   pre       rec       spe        f1       geo       iba       sup\\n\\n    Not Pov       0.91      0.79      0.71      0.85      0.75      0.56      4699\\n        Pov       0.46      0.71      0.79      0.56      0.75      0.55      1220\\n\\navg / total       0.82      0.77      0.73      0.79      0.75      0.56      5919\\n', 'transformed_columns_': Index(['AGEP_1', 'AGEP_2', 'AGEP_3', 'AGEP_4', 'AGEP_5', 'AGEP_6', 'AGEP_7',\n",
      "       'AGEP_8', 'AGEP_9', 'AGEP_10',\n",
      "       ...\n",
      "       'mean_anyage_ETH_other', '%_anyage_ETH_other', 'any_anyage_ETH_any',\n",
      "       'all_anyage_ETH_any', 'min_anyage_ETH_any', 'max_anyage_ETH_any',\n",
      "       'count_anyage_ETH_any', 'sum_anyage_ETH_any', 'mean_anyage_ETH_any',\n",
      "       '%_anyage_ETH_any'],\n",
      "      dtype='object', length=2828)}\n"
     ]
    }
   ],
   "source": [
    "X_and_y = pd.read_csv('data/FeaturesNoFinCoded.csv', index_col=[0,1], header=0)\n",
    "print(len(X_and_y.columns))\n",
    "\n",
    "# Pull off 'NYCgov_Pov_Stat' for our target variable\n",
    "y = X_and_y['NYCgov_Pov_Stat']\n",
    "y.replace({1: 'Pov', 2:'Not Pov'}, inplace=True)\n",
    "X = X_and_y.drop('NYCgov_Pov_Stat', axis='columns')\n",
    "\n",
    "# Get train and test - be sure to stratify since this is imbalanced data (poverty ~20% of the set)\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, stratify=y, random_state=42)\n",
    "\n",
    "categorizer = Categorizer(columns=dummy_these)\n",
    "dummy_encoder = DummyEncoder(drop_first=True)\n",
    "sampler = SMOTEENN(random_state=42)\n",
    "scaler = Normalizer()\n",
    "clf = BalancedRandomForestClassifier(n_jobs=-1, n_estimators=1000, max_features='auto', random_state=42)\n",
    "\n",
    "cachedir = tempfile.mkdtemp(dir='/mnt/ssd/tmp')\n",
    "\n",
    "# Create empty dictionaries to hold results\n",
    "results = {}\n",
    "\n",
    "pipeline = imbPipeline(steps=[#('cat', categorizer), # No need for Categorizer since we already did it\n",
    "                              ('dummies', dummy_encoder), \n",
    "                              ('sampler', sampler), \n",
    "                              ('scaler', scaler), \n",
    "                              ('clf', classifier)], \n",
    "                       memory=cachedir)\n",
    "\n",
    "t0 = time.time()\n",
    "pipeline.fit(X_train, y_train)\n",
    "\n",
    "time_to_fit = time.time() - t0\n",
    "print('Took: ' + '{:4.2f}'.format(time_to_fit) + 's to fit ')\n",
    "\n",
    "predictions = pipeline.predict(X_test)\n",
    "results_dict['balanced_accuracy_score'] = balanced_accuracy_score(y_test, predictions)\n",
    "results_dict['geometric_mean_score'] = geometric_mean_score(y_test, predictions)\n",
    "results_dict['confusion_matrix'] = confusion_matrix(y_test, predictions)\n",
    "results_dict['classification_report'] = classification_report_imbalanced(y_test, predictions)\n",
    "results_dict['feature_importances_'] = pipeline.named_steps['clf'].feature_importances_\n",
    "results_dict['transformed_columns_'] = pipeline.named_steps['dummies'].transformed_columns_\n",
    "print(str(results_dict))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[(0.05414204498575277, 'max_adult_40_plus_work_hrs'),\n",
       " (0.0299772802107448, '%_18-64_<30_work_hrs'),\n",
       " (0.029120004226272207, '%_anyage_40_plus_work_hrs'),\n",
       " (0.02813508930255575, 'max_anyage_40_plus_work_hrs'),\n",
       " (0.02807103273303036, 'any_anyage_>40WKW'),\n",
       " (0.027730196434804382, 'min_anyage_40_plus_work_hrs'),\n",
       " (0.026378429827302253, 'min_adult_>40WKW'),\n",
       " (0.022687981522365352, 'mean_18-64_50-52WKW'),\n",
       " (0.022232016123656696, 'all_18-64_<15_work_hrs'),\n",
       " (0.014389072985389828, 'any_adult_>40WKW'),\n",
       " (0.01381564852426873, 'count_adult_50-52WKW'),\n",
       " (0.01178808204087493, 'all_anyage_<40_work_hrs'),\n",
       " (0.011526602791514214, 'max_18-64_no_diploma'),\n",
       " (0.008817078681850138, 'sum_anyage_>40WKW'),\n",
       " (0.008134514402889726, 'sum_anyage_no_diploma')]"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tester = list(zip(results_dict['feature_importances_'], results_dict['transformed_columns_']))\n",
    "sorted(tester, key=lambda tup: tup[0], reverse=True)[:15]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "4203\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/ubuntu/.local/lib/python3.5/site-packages/imblearn/pipeline.py:197: UserWarning: Persisting input arguments took 2.09s to run.\n",
      "If this happens often in your code, it can cause performance problems \n",
      "(results will be correct in all cases). \n",
      "The reason for this is probably some large input arguments for a wrapped\n",
      " function (e.g. large strings).\n",
      "THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an\n",
      " example so that they can fix the problem.\n",
      "  **fit_params_steps[name])\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Took: 225.46s to fit \n",
      "\n",
      "Accuracy: 0.9241425916539956\n",
      "Balanced accuracy: 0.8790971396076599\n",
      "Geometric mean: 0.875750180666023\n",
      "Confusion matrix:\n",
      "[[4491  208]\n",
      " [ 241  979]]\n",
      "\n",
      "Classification report:\n",
      "                   pre       rec       spe        f1       geo       iba       sup\n",
      "\n",
      "        0.0       0.95      0.96      0.80      0.95      0.88      0.78      4699\n",
      "        1.0       0.82      0.80      0.96      0.81      0.88      0.76      1220\n",
      "\n",
      "avg / total       0.92      0.92      0.83      0.92      0.88      0.77      5919\n",
      "\n",
      "OOB score: 0.9260010136847441\n",
      "n_estimators: 1000\n"
     ]
    }
   ],
   "source": [
    "tester = X_and_y.copy()\n",
    "tester = tester.loc[:, tester.astype('float64').std() > .3] #4203 columns\n",
    "\n",
    "print(len(tester.columns))\n",
    "\n",
    "# Pull off 'NYCgov_Pov_Stat' for our target variable\n",
    "y = tester['NYCgov_Pov_Stat']\n",
    "y.replace({2:0}, inplace=True) # Original coding is 1 in pov, 2 not in pov\n",
    "X = tester.drop('NYCgov_Pov_Stat', axis='columns')\n",
    "\n",
    "# Get train and test - be sure to stratify since this is imbalanced data (poverty ~20% of the set)\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, stratify=y, random_state=42)\n",
    "\n",
    "scaler = Normalizer()\n",
    "classifier = RandomForestClassifier(n_estimators=1000, n_jobs=-1, max_features='auto', random_state=42, oob_score=True)\n",
    "cachedir = tempfile.mkdtemp(dir='/mnt/ssd/tmp')\n",
    "\n",
    "rf_pipeline = imbPipeline(steps=[('scaler', scaler), ('clf', classifier)], memory=cachedir)\n",
    "\n",
    "t0 = time.time()\n",
    "rf_pipeline.fit(X_train, y_train)\n",
    "\n",
    "time_to_fit = time.time() - t0\n",
    "print('Took: ' + '{:4.2f}'.format(time_to_fit) + 's to fit ')\n",
    "\n",
    "predictions = rf_pipeline.predict(X_test)\n",
    "\n",
    "print('\\nAccuracy: ' + str(rf_pipeline.score(X_test, y_test)))\n",
    "print('Balanced accuracy: ' + str(balanced_accuracy_score(y_test, predictions)))\n",
    "print('Geometric mean: ' + str(geometric_mean_score(y_test, predictions)))\n",
    "print('Confusion matrix:\\n' + str(confusion_matrix(y_test, predictions)))\n",
    "print('\\nClassification report:\\n' + str(classification_report_imbalanced(y_test, predictions)))\n",
    "print('OOB score: ' + str(rf_pipeline.named_steps['clf'].oob_score_))\n",
    "print('n_estimators: ' + str(rf_pipeline.named_steps['clf'].n_estimators))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5916\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/ubuntu/.local/lib/python3.5/site-packages/imblearn/pipeline.py:197: UserWarning: Persisting input arguments took 2.67s to run.\n",
      "If this happens often in your code, it can cause performance problems \n",
      "(results will be correct in all cases). \n",
      "The reason for this is probably some large input arguments for a wrapped\n",
      " function (e.g. large strings).\n",
      "THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an\n",
      " example so that they can fix the problem.\n",
      "  **fit_params_steps[name])\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Took: 312.12s to fit \n",
      "\n",
      "Accuracy: 0.9241425916539956\n",
      "Balanced accuracy: 0.8794005700550169\n",
      "Geometric mean: 0.8760997784301491\n",
      "Confusion matrix:\n",
      "[[4490  209]\n",
      " [ 240  980]]\n",
      "\n",
      "Classification report:\n",
      "                   pre       rec       spe        f1       geo       iba       sup\n",
      "\n",
      "        0.0       0.95      0.96      0.80      0.95      0.88      0.78      4699\n",
      "        1.0       0.82      0.80      0.96      0.81      0.88      0.76      1220\n",
      "\n",
      "avg / total       0.92      0.92      0.83      0.92      0.88      0.77      5919\n",
      "\n",
      "OOB score: 0.9281128569015036\n",
      "n_estimators: 1000\n"
     ]
    }
   ],
   "source": [
    "print(len(X_and_y.columns))\n",
    "\n",
    "# Pull off 'NYCgov_Pov_Stat' for our target variable\n",
    "y = X_and_y['NYCgov_Pov_Stat']\n",
    "y.replace({2:0}, inplace=True) # Original coding is 1 in pov, 2 not in pov\n",
    "X = X_and_y.drop('NYCgov_Pov_Stat', axis='columns')\n",
    "\n",
    "# Get train and test - be sure to stratify since this is imbalanced data (poverty ~20% of the set)\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, stratify=y, random_state=42)\n",
    "\n",
    "scaler = Normalizer()\n",
    "classifier = RandomForestClassifier(n_estimators=1000, n_jobs=-1, max_features='auto', random_state=42, oob_score=True)\n",
    "cachedir = tempfile.mkdtemp(dir='/mnt/ssd/tmp')\n",
    "\n",
    "rf_pipeline = imbPipeline(steps=[('scaler', scaler), ('clf', classifier)], memory=cachedir)\n",
    "\n",
    "t0 = time.time()\n",
    "rf_pipeline.fit(X_train, y_train)\n",
    "\n",
    "time_to_fit = time.time() - t0\n",
    "print('Took: ' + '{:4.2f}'.format(time_to_fit) + 's to fit ')\n",
    "\n",
    "predictions = rf_pipeline.predict(X_test)\n",
    "\n",
    "print('\\nAccuracy: ' + str(rf_pipeline.score(X_test, y_test)))\n",
    "print('Balanced accuracy: ' + str(balanced_accuracy_score(y_test, predictions)))\n",
    "print('Geometric mean: ' + str(geometric_mean_score(y_test, predictions)))\n",
    "print('Confusion matrix:\\n' + str(confusion_matrix(y_test, predictions)))\n",
    "print('\\nClassification report:\\n' + str(classification_report_imbalanced(y_test, predictions)))\n",
    "print('OOB score: ' + str(rf_pipeline.named_steps['clf'].oob_score_))\n",
    "print('n_estimators: ' + str(rf_pipeline.named_steps['clf'].n_estimators))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[(0.008738746575772808, 'any_anyage_any_SEX'),\n",
       " (0.007793420790104585, 'all_anyage_TINP<20'),\n",
       " (0.007184138721496747, 'any_adult_TINP<20'),\n",
       " (0.006653662791125626, 'all_anyage_WAG<60'),\n",
       " (0.006535150897617367, 'any_anyage_ETH_any'),\n",
       " (0.006433470037326151, 'all_anyage_work_trans'),\n",
       " (0.006420108118935234, 'all_adult_TINP<20'),\n",
       " (0.00603712066356437, '%_anyage_SEMP_any'),\n",
       " (0.005989984744940004, 'any_anyage_TINP<70'),\n",
       " (0.0056792764598369684, '%_anyage_TINP<25'),\n",
       " (0.0054738810580131836, 'all_anyage_TINP<35'),\n",
       " (0.005471542245196101, '%_anyage_TINP<45'),\n",
       " (0.005455904001405748, 'any_anyage_TINP<40'),\n",
       " (0.0053834925472248125, '%_anyage_RETP_any'),\n",
       " (0.005367176152264387, 'any_anyage_any_DIS')]"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rf_imps = list(zip(rf_pipeline.named_steps['clf'].feature_importances_, X_train.columns))\n",
    "sorted(rf_imps, key=lambda tup: tup[0], reverse=True)[:15]"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
